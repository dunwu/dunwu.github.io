const e=JSON.parse('{"key":"v-433c39ee","path":"/pages/25f78a/","title":"Java原子类","lang":"zh-CN","frontmatter":{"title":"Java原子类","date":"2019-12-26T23:11:52.000Z","order":5,"permalink":"/pages/25f78a/","category":["Java","JavaSE","并发"],"tag":["Java","JavaSE","并发","原子类"],"description":"Java 原子变量类 原子变量类简介 为何需要原子变量类 保证线程安全是 Java 并发编程必须要解决的重要问题。Java 从原子性、可见性、有序性这三大特性入手，确保多线程的数据一致性。 确保线程安全最常见的做法是利用锁机制（Lock、sychronized）来对共享数据做互斥同步，这样在同一个时刻，只有一个线程可以执行某个方法或者某个代码块，那么操作必然是原子性的，线程安全的。互斥同步最主要的问题是线程阻塞和唤醒所带来的性能问题。 volatile 是轻量级的锁（自然比普通锁性能要好），它保证了共享变量在多线程中的可见性，但无法保证原子性。所以，它只能在一些特定场景下使用。 为了兼顾原子性以及锁带来的性能问题，Java 引入了 CAS （主要体现在 Unsafe 类）来实现非阻塞同步（也叫乐观锁）。并基于 CAS ，提供了一套原子工具类。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/pages/25f78a/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"Java原子类"}],["meta",{"property":"og:description","content":"Java 原子变量类 原子变量类简介 为何需要原子变量类 保证线程安全是 Java 并发编程必须要解决的重要问题。Java 从原子性、可见性、有序性这三大特性入手，确保多线程的数据一致性。 确保线程安全最常见的做法是利用锁机制（Lock、sychronized）来对共享数据做互斥同步，这样在同一个时刻，只有一个线程可以执行某个方法或者某个代码块，那么操作必然是原子性的，线程安全的。互斥同步最主要的问题是线程阻塞和唤醒所带来的性能问题。 volatile 是轻量级的锁（自然比普通锁性能要好），它保证了共享变量在多线程中的可见性，但无法保证原子性。所以，它只能在一些特定场景下使用。 为了兼顾原子性以及锁带来的性能问题，Java 引入了 CAS （主要体现在 Unsafe 类）来实现非阻塞同步（也叫乐观锁）。并基于 CAS ，提供了一套原子工具类。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-15T22:46:25.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"JavaSE"}],["meta",{"property":"article:tag","content":"并发"}],["meta",{"property":"article:tag","content":"原子类"}],["meta",{"property":"article:published_time","content":"2019-12-26T23:11:52.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-15T22:46:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java原子类\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-12-26T23:11:52.000Z\\",\\"dateModified\\":\\"2024-05-15T22:46:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io\\"}]}"]]},"headers":[{"level":2,"title":"原子变量类简介","slug":"原子变量类简介","link":"#原子变量类简介","children":[{"level":3,"title":"为何需要原子变量类","slug":"为何需要原子变量类","link":"#为何需要原子变量类","children":[]},{"level":3,"title":"原子变量类的作用","slug":"原子变量类的作用","link":"#原子变量类的作用","children":[]}]},{"level":2,"title":"基本类型","slug":"基本类型","link":"#基本类型","children":[{"level":3,"title":"AtomicInteger 用法","slug":"atomicinteger-用法","link":"#atomicinteger-用法","children":[]},{"level":3,"title":"AtomicInteger 实现","slug":"atomicinteger-实现","link":"#atomicinteger-实现","children":[]}]},{"level":2,"title":"引用类型","slug":"引用类型","link":"#引用类型","children":[]},{"level":2,"title":"数组类型","slug":"数组类型","link":"#数组类型","children":[]},{"level":2,"title":"属性更新器类型","slug":"属性更新器类型","link":"#属性更新器类型","children":[]},{"level":2,"title":"原子化的累加器","slug":"原子化的累加器","link":"#原子化的累加器","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1694447058000,"updatedTime":1715813185000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":4}]},"readingTime":{"minutes":9.02,"words":2707},"filePathRelative":"01.Java/01.JavaSE/05.并发/05.Java原子类.md","localizedDate":"2019年12月26日","excerpt":"<h1> Java 原子变量类</h1>\\n<h2> 原子变量类简介</h2>\\n<h3> 为何需要原子变量类</h3>\\n<p>保证线程安全是 Java 并发编程必须要解决的重要问题。Java 从原子性、可见性、有序性这三大特性入手，确保多线程的数据一致性。</p>\\n<ul>\\n<li>确保线程安全最常见的做法是利用锁机制（<code>Lock</code>、<code>sychronized</code>）来对共享数据做互斥同步，这样在同一个时刻，只有一个线程可以执行某个方法或者某个代码块，那么操作必然是原子性的，线程安全的。互斥同步最主要的问题是线程阻塞和唤醒所带来的性能问题。</li>\\n<li><code>volatile</code> 是轻量级的锁（自然比普通锁性能要好），它保证了共享变量在多线程中的可见性，但无法保证原子性。所以，它只能在一些特定场景下使用。</li>\\n<li>为了兼顾原子性以及锁带来的性能问题，Java 引入了 CAS （主要体现在 <code>Unsafe</code> 类）来实现非阻塞同步（也叫乐观锁）。并基于 CAS ，提供了一套原子工具类。</li>\\n</ul>","autoDesc":true}');export{e as data};
