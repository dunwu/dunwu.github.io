import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,a as n,b as s,d as t,e as p}from"./app-ab18ad7c.js";const l={},u=p(`<h1 id="流量控制" tabindex="-1"><a class="header-anchor" href="#流量控制" aria-hidden="true">#</a> 流量控制</h1><blockquote><p>在高并发场景下，为了应对瞬时海量请求的压力，保障系统的平稳运行，必须预估系统的流量阈值，通过限流规则阻断处理不过来的请求。</p></blockquote><h2 id="限流简介" tabindex="-1"><a class="header-anchor" href="#限流简介" aria-hidden="true">#</a> 限流简介</h2><p>限流可以认为是服务降级的一种。限流就是<strong>限制系统的输入和输出流量已达到保护系统的目的</strong>。一般来说系统的吞吐量是可以被测算的，为了保证系统的稳定运行，一旦达到的需要限制的阈值，就需要限制流量并采取一些措施以完成限制流量的目的。比如：延迟处理，拒绝处理，或者部分拒绝处理等等。</p><p>限流规则包含三个部分：时间粒度，接口粒度，最大限流值。限流规则设置是否合理直接影响到限流是否合理有效。</p><h2 id="限流算法" tabindex="-1"><a class="header-anchor" href="#限流算法" aria-hidden="true">#</a> 限流算法</h2><h3 id="固定窗口限流算法" tabindex="-1"><a class="header-anchor" href="#固定窗口限流算法" aria-hidden="true">#</a> 固定窗口限流算法</h3><h4 id="固定窗口限流算法的原理" tabindex="-1"><a class="header-anchor" href="#固定窗口限流算法的原理" aria-hidden="true">#</a> 固定窗口限流算法的原理</h4><p>固定窗口限流算法的<strong>基本策略</strong>是：</p><ol><li>设置一个固定时间窗口，以及这个固定时间窗口内的最大请求数；</li><li>为每个固定时间窗口设置一个计数器，用于统计请求数；</li><li>一旦请求数超过最大请求数，则请求会被拦截。</li></ol><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202401230748006.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="固定窗口限流算法的利弊" tabindex="-1"><a class="header-anchor" href="#固定窗口限流算法的利弊" aria-hidden="true">#</a> 固定窗口限流算法的利弊</h4><p>固定窗口限流算法的<strong>优点</strong>是：实现简单。</p><p>固定窗口限流算法的<strong>缺点</strong>是：存在<strong>临界问题</strong>。所谓临界问题，是指：流量分别集中在一个固定时间窗口的尾部和一个固定时间窗口的头部。举例来说，假设限流规则为每分钟不超过 100 次请求。在第一个时间窗口中，起初没有任何请求，在最后 1 s，收到 100 次请求，由于没有达到阈值，所有请求都通过；在第二个时间窗口中，第 1 秒就收到 100 次请求，而后续没有任何请求。虽然，这两个时间窗口内的流量都符合限流要求，但是在两个时间窗口临界的这 2s 内，实际上有 200 次请求，显然是超过预期吞吐量的，存在压垮系统的可能。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202401230748769.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="固定窗口限流算法的实现" tabindex="-1"><a class="header-anchor" href="#固定窗口限流算法的实现" aria-hidden="true">#</a> 固定窗口限流算法的实现</h4><p>【示例】Java 版本的固定窗口限流算法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicLong</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SlidingWindowRateLimiter</span> <span class="token keyword">implements</span> <span class="token class-name">RateLimiter</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 允许的最大请求数
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> maxPermits<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 窗口期时长
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> periodMillis<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 分片窗口期时长
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> shardPeriodMillis<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 窗口期截止时间
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> lastPeriodMillis<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 分片窗口数
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> shardNum<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 请求总计数
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicLong</span> totalCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 分片窗口计数列表
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AtomicLong</span><span class="token punctuation">&gt;</span></span> countList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">SlidingWindowRateLimiter</span><span class="token punctuation">(</span><span class="token keyword">long</span> qps<span class="token punctuation">,</span> <span class="token keyword">int</span> shardNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span>qps<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">,</span> shardNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">SlidingWindowRateLimiter</span><span class="token punctuation">(</span><span class="token keyword">long</span> maxPermits<span class="token punctuation">,</span> <span class="token keyword">long</span> period<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> timeUnit<span class="token punctuation">,</span> <span class="token keyword">int</span> shardNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>maxPermits <span class="token operator">=</span> maxPermits<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>periodMillis <span class="token operator">=</span> timeUnit<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span>period<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>lastPeriodMillis <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>shardPeriodMillis <span class="token operator">=</span> timeUnit<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span>period<span class="token punctuation">)</span> <span class="token operator">/</span> shardNum<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>shardNum <span class="token operator">=</span> shardNum<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> shardNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            countList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token keyword">permits</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> now <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">&gt;</span> lastPeriodMillis<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> shardId <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> shardId <span class="token operator">&lt;</span> shardNum<span class="token punctuation">;</span> shardId<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">long</span> shardCount <span class="token operator">=</span> countList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>shardId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                totalCount<span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span><span class="token operator">-</span>shardCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
                countList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>shardId<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                lastPeriodMillis <span class="token operator">+=</span> shardPeriodMillis<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> shardId <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>now <span class="token operator">%</span> periodMillis <span class="token operator">/</span> shardPeriodMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>totalCount<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">permits</span> <span class="token operator">&lt;=</span> maxPermits<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            countList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>shardId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span><span class="token keyword">permits</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            totalCount<span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span><span class="token keyword">permits</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="滑动窗口限流算法" tabindex="-1"><a class="header-anchor" href="#滑动窗口限流算法" aria-hidden="true">#</a> 滑动窗口限流算法</h3><h4 id="滑动窗口限流算法的原理" tabindex="-1"><a class="header-anchor" href="#滑动窗口限流算法的原理" aria-hidden="true">#</a> 滑动窗口限流算法的原理</h4><p>滑动窗口限流算法是对固定窗口限流算法的改进，解决了临界问题。</p><p>滑动窗口限流算法的<strong>基本策略</strong>是：</p><ul><li>将固定时间窗口分片为多个子窗口，每个子窗口的访问次数独立统计；</li><li>当请求时间大于当前子窗口的最大时间时，则将当前子窗口废弃，并将计时窗口向前滑动，并将下一个子窗口置为当前窗口。</li><li>要保证所有子窗口的统计数之和不能超过阈值。</li></ul><p>滑动窗口限流算法就是针对固定窗口限流算法的更细粒度的控制，分片越多，则限流越精准。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202401230748277.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="滑动窗口限流算法的利弊" tabindex="-1"><a class="header-anchor" href="#滑动窗口限流算法的利弊" aria-hidden="true">#</a> 滑动窗口限流算法的利弊</h4><p>滑动窗口限流算法的<strong>优点</strong>是：在滑动窗口限流算法中，临界位置的突发请求都会被算到时间窗口内，因此可以解决计数器算法的临界问题。</p><p>滑动窗口限流算法的<strong>缺点</strong>是：</p><ul><li><strong>额外的内存开销</strong> - 滑动时间窗口限流算法的时间窗口是持续滑动的，并且除了需要一个计数器来记录时间窗口内接口请求次数之外，还需要记录在时间窗口内每个接口请求到达的时间点，所以存在额外的内存开销。</li><li><strong>限流的控制粒度受限于窗口分片粒度</strong> - 滑动窗口限流算法，<strong>只能在选定的时间粒度上限流，对选定时间粒度内的更加细粒度的访问频率不做限制</strong>。但是，由于每个分片窗口都有额外的内存开销，所以也并不是分片数越多越好的。</li></ul><h4 id="滑动窗口限流算法的实现" tabindex="-1"><a class="header-anchor" href="#滑动窗口限流算法的实现" aria-hidden="true">#</a> 滑动窗口限流算法的实现</h4><p>【示例】Java 版本的滑动窗口限流算法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedList</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicLong</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SlidingWindowRateLimiter</span> <span class="token keyword">implements</span> <span class="token class-name">RateLimiter</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 允许的最大请求数
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> maxPermits<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 窗口期时长
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> periodMillis<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 分片窗口期时长
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> shardPeriodMillis<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 窗口期截止时间
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> lastPeriodMillis<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 分片窗口数
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> shardNum<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 请求总计数
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicLong</span> totalCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 分片窗口计数列表
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AtomicLong</span><span class="token punctuation">&gt;</span></span> countList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">SlidingWindowRateLimiter</span><span class="token punctuation">(</span><span class="token keyword">long</span> qps<span class="token punctuation">,</span> <span class="token keyword">int</span> shardNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span>qps<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">,</span> shardNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">SlidingWindowRateLimiter</span><span class="token punctuation">(</span><span class="token keyword">long</span> maxPermits<span class="token punctuation">,</span> <span class="token keyword">long</span> period<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> timeUnit<span class="token punctuation">,</span> <span class="token keyword">int</span> shardNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>maxPermits <span class="token operator">=</span> maxPermits<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>periodMillis <span class="token operator">=</span> timeUnit<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span>period<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>lastPeriodMillis <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>shardPeriodMillis <span class="token operator">=</span> timeUnit<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span>period<span class="token punctuation">)</span> <span class="token operator">/</span> shardNum<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>shardNum <span class="token operator">=</span> shardNum<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> shardNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            countList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token keyword">permits</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> now <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">&gt;</span> lastPeriodMillis<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> shardId <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> shardId <span class="token operator">&lt;</span> shardNum<span class="token punctuation">;</span> shardId<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">long</span> shardCount <span class="token operator">=</span> countList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>shardId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                totalCount<span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span><span class="token operator">-</span>shardCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
                countList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>shardId<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                lastPeriodMillis <span class="token operator">+=</span> shardPeriodMillis<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> shardId <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>now <span class="token operator">%</span> periodMillis <span class="token operator">/</span> shardPeriodMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>totalCount<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">permits</span> <span class="token operator">&lt;=</span> maxPermits<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            countList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>shardId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span><span class="token keyword">permits</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            totalCount<span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span><span class="token keyword">permits</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="漏桶限流算法" tabindex="-1"><a class="header-anchor" href="#漏桶限流算法" aria-hidden="true">#</a> 漏桶限流算法</h3><h4 id="漏桶限流算法的原理" tabindex="-1"><a class="header-anchor" href="#漏桶限流算法的原理" aria-hidden="true">#</a> 漏桶限流算法的原理</h4><p>漏桶限流算法的<strong>基本策略</strong>是：</p><ul><li>水（请求）以任意速率由入口进入到漏桶中；</li><li>水以固定的速率由出口出水（请求通过）；</li><li>漏桶的容量是固定的，如果水的流入速率大于流出速率，最终会导致漏桶中的水溢出（这意味着请求拒绝）。</li></ul><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202401230749486.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="漏桶限流算法的利弊" tabindex="-1"><a class="header-anchor" href="#漏桶限流算法的利弊" aria-hidden="true">#</a> 漏桶限流算法的利弊</h4><p>漏桶限流算法的<strong>优点</strong>是：<strong>消费速率固定</strong>——即无论流量多大，即便是突发的大流量，处理请求的速度始终是固定的。</p><p>漏桶限流算法的<strong>缺点</strong>是：不能灵活的调整流量。例如：一个集群通过增减节点的方式，弹性伸缩了其吞吐能力，漏桶限流算法无法随之调整。</p><p><strong>漏桶策略适用于间隔性突发流量且流量不用即时处理的场景</strong>。</p><h4 id="漏桶限流算法的实现" tabindex="-1"><a class="header-anchor" href="#漏桶限流算法的实现" aria-hidden="true">#</a> 漏桶限流算法的实现</h4><p>【示例】Java 版本的漏桶限流算法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicLong</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LeakyBucketRateLimiter</span> <span class="token keyword">implements</span> <span class="token class-name">RateLimiter</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * QPS
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> qps<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 桶的容量
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> capacity<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 计算的起始时间
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> beginTimeMillis<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 桶中当前的水量
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicLong</span> waterNum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">LeakyBucketRateLimiter</span><span class="token punctuation">(</span><span class="token keyword">int</span> qps<span class="token punctuation">,</span> <span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>qps <span class="token operator">=</span> qps<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token keyword">permits</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// 如果桶中没有水，直接通过</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>waterNum<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            beginTimeMillis <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            waterNum<span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span><span class="token keyword">permits</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 计算水量</span>
        <span class="token keyword">long</span> leakedWaterNum <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> beginTimeMillis<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">*</span> qps<span class="token punctuation">;</span>
        <span class="token keyword">long</span> currentWaterNum <span class="token operator">=</span> waterNum<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> leakedWaterNum<span class="token punctuation">;</span>
        waterNum<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> currentWaterNum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 重置时间</span>
        beginTimeMillis <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>waterNum<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">permits</span> <span class="token operator">&lt;</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            waterNum<span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span><span class="token keyword">permits</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="令牌桶限流算法" tabindex="-1"><a class="header-anchor" href="#令牌桶限流算法" aria-hidden="true">#</a> 令牌桶限流算法</h3><h4 id="令牌桶限流算法的原理" tabindex="-1"><a class="header-anchor" href="#令牌桶限流算法的原理" aria-hidden="true">#</a> 令牌桶限流算法的原理</h4><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202401230750231.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>令牌桶算法的<strong>原理</strong>：</p><ol><li>接口限制 T 秒内最大访问次数为 N，则每隔 T/N 秒会放一个 token 到桶中</li><li>桶内最多存放 M 个 token，如果 token 到达时令牌桶已经满了，那么这个 token 就会被丢弃</li><li>接口请求会先从令牌桶中取 token，拿到 token 则处理接口请求，拿不到 token 则进行限流处理</li></ol><h4 id="令牌桶限流算法的利弊" tabindex="-1"><a class="header-anchor" href="#令牌桶限流算法的利弊" aria-hidden="true">#</a> 令牌桶限流算法的利弊</h4><p>因为令牌桶存放了很多令牌，那么大量的突发请求会被执行，但是它不会出现临界问题，在令牌用完之后，令牌是以一个恒定的速率添加到令牌桶中的，因此不能再次发送大量突发请求。</p><p>规定固定容量的桶，token 以固定速度往桶内填充，当桶满时 token 不会被继续放入，每过来一个请求把 token 从桶中移除,如果桶中没有 token 不能请求。</p><p><strong>令牌桶算法适用于有突发特性的流量，且流量需要即时处理的场景</strong>。</p><h4 id="令牌桶限流算法的实现" tabindex="-1"><a class="header-anchor" href="#令牌桶限流算法的实现" aria-hidden="true">#</a> 令牌桶限流算法的实现</h4><p>【示例】Java 实现令牌桶算法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicLong</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 令牌桶限流算法
 *
 * <span class="token keyword">@author</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mailto:forbreak@163.com<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Zhang Peng<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
 * <span class="token keyword">@date</span> 2024-01-18
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TokenBucketRateLimiter</span> <span class="token keyword">implements</span> <span class="token class-name">RateLimiter</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * QPS
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> qps<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 桶的容量
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> capacity<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 上一次令牌发放时间
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> endTimeMillis<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 桶中当前的令牌数量
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicLong</span> tokenNum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">TokenBucketRateLimiter</span><span class="token punctuation">(</span><span class="token keyword">long</span> qps<span class="token punctuation">,</span> <span class="token keyword">long</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>qps <span class="token operator">=</span> qps<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>endTimeMillis <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token keyword">permits</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">long</span> now <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> gap <span class="token operator">=</span> now <span class="token operator">-</span> endTimeMillis<span class="token punctuation">;</span>

        <span class="token comment">// 计算令牌数</span>
        <span class="token keyword">long</span> newTokenNum <span class="token operator">=</span> <span class="token punctuation">(</span>gap <span class="token operator">*</span> qps <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> currentTokenNum <span class="token operator">=</span> tokenNum<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> newTokenNum<span class="token punctuation">;</span>
        tokenNum<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> currentTokenNum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>tokenNum<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token keyword">permits</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            tokenNum<span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token keyword">permits</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            endTimeMillis <span class="token operator">=</span> now<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,56),k=n("p",null,[n("strong",null,"扩展")],-1),r={href:"https://blog.csdn.net/forezp/article/details/100060686",target:"_blank",rel:"noopener noreferrer"},d=p(`<h3 id="限流算法测试" tabindex="-1"><a class="header-anchor" href="#限流算法测试" aria-hidden="true">#</a> 限流算法测试</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>thread<span class="token punctuation">.</span></span><span class="token class-name">ThreadUtil</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">RandomUtil</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CountDownLatch</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicInteger</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RateLimiterDemo</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// ============================================================================</span>

        <span class="token keyword">int</span> qps <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;======================= 固定时间窗口限流算法 =======================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">FixedWindowRateLimiter</span> fixedWindowRateLimiter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FixedWindowRateLimiter</span><span class="token punctuation">(</span>qps<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">testRateLimit</span><span class="token punctuation">(</span>fixedWindowRateLimiter<span class="token punctuation">,</span> qps<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;======================= 滑动时间窗口限流算法 =======================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SlidingWindowRateLimiter</span> slidingWindowRateLimiter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SlidingWindowRateLimiter</span><span class="token punctuation">(</span>qps<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">testRateLimit</span><span class="token punctuation">(</span>slidingWindowRateLimiter<span class="token punctuation">,</span> qps<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;======================= 漏桶限流算法 =======================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">LeakyBucketRateLimiter</span> leakyBucketRateLimiter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LeakyBucketRateLimiter</span><span class="token punctuation">(</span>qps<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">testRateLimit</span><span class="token punctuation">(</span>leakyBucketRateLimiter<span class="token punctuation">,</span> qps<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;======================= 令牌桶限流算法 =======================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TokenBucketRateLimiter</span> tokenBucketRateLimiter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TokenBucketRateLimiter</span><span class="token punctuation">(</span>qps<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">testRateLimit</span><span class="token punctuation">(</span>tokenBucketRateLimiter<span class="token punctuation">,</span> qps<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testRateLimit</span><span class="token punctuation">(</span><span class="token class-name">RateLimiter</span> rateLimiter<span class="token punctuation">,</span> <span class="token keyword">int</span> qps<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">AtomicInteger</span> okNum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">AtomicInteger</span> limitNum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">ThreadUtil</span><span class="token punctuation">.</span><span class="token function">newFixedExecutor</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&quot;限流测试&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> beginTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">int</span> threadNum <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">CountDownLatch</span> latch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span>threadNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> threadNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token function">batchRequest</span><span class="token punctuation">(</span>rateLimiter<span class="token punctuation">,</span> okNum<span class="token punctuation">,</span> limitNum<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;发生异常!&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                    latch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            latch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">long</span> endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">long</span> gap <span class="token operator">=</span> endTime <span class="token operator">-</span> beginTime<span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;限流 QPS: {} -&gt; 实际结果：耗时 {} ms，{} 次请求成功，{} 次请求被限流，实际 QPS: {}&quot;</span><span class="token punctuation">,</span>
                qps<span class="token punctuation">,</span> gap<span class="token punctuation">,</span> okNum<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> limitNum<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> okNum<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span> <span class="token operator">/</span> gap<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>okNum<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> qps<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;限流符合预期&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;发生异常!&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">batchRequest</span><span class="token punctuation">(</span><span class="token class-name">RateLimiter</span> rateLimiter<span class="token punctuation">,</span> <span class="token class-name">AtomicInteger</span> okNum<span class="token punctuation">,</span> <span class="token class-name">AtomicInteger</span> limitNum<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>rateLimiter<span class="token punctuation">.</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;请求成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                okNum<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;请求限流&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                limitNum<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">RandomUtil</span><span class="token punctuation">.</span><span class="token function">randomInt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="分布式限流" tabindex="-1"><a class="header-anchor" href="#分布式限流" aria-hidden="true">#</a> 分布式限流</h2><p>前文中，基于 Java 实现的限流算法示例只能运行在单节点，无法有效应对集群部署的服务，这中场景下就需要分布式限流。</p><p>实现分布式限流的一种简单解决方案是使用 Redis + Lua 来实现。使用二者来开发的原因是：1. Redis 的性能极高；2. Redis 支持以原子操作的方式执行 Lua 脚本。</p><h3 id="redis-lua-实现的固定窗口限流算法" tabindex="-1"><a class="header-anchor" href="#redis-lua-实现的固定窗口限流算法" aria-hidden="true">#</a> Redis + Lua 实现的固定窗口限流算法</h3><p>Redis + Lua 实现的固定窗口限流算法实现思路：</p><ul><li>根据实际需要，将当前时间格式化为天（<code>yyyyMMdd</code>）、时（<code>yyyyMMddHH</code>）、分（<code>yyyyMMddHHmm</code>）、秒（<code>yyyyMMddHHmmss</code>），并作为 Redis 的 String 类型 Key。该 Key 可以视为一个固定时间窗口，其中的 value 用于统计访问量；</li><li>用于代表不同粒度的时间窗口按需设置过期时间；</li><li>一旦达到窗口的限流阈值时，请求被限流；否则请求通过。</li></ul><p>【示例】Redis + Lua 实现的固定窗口限流算法</p><p>下面的代码片段模拟通过一个大小为 1 分钟的固定时间窗口进行限流，阈值为 100，过期时间 60s。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">&quot;rate:limit:202401222100&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> limit <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> seconds <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token keyword">permits</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// -- 缓存 Key</span>
        <span class="token comment">// local key = KEYS[1]</span>
        <span class="token comment">// -- 访问请求数</span>
        <span class="token comment">// local permits = tonumber(ARGV[1])</span>
        <span class="token comment">// -- 过期时间</span>
        <span class="token comment">// local seconds = tonumber(ARGV[2])</span>
        <span class="token comment">// -- 限流阈值</span>
        <span class="token comment">// local limit = tonumber(ARGV[3])</span>
        <span class="token comment">//</span>
        <span class="token comment">// -- 获取统计值</span>
        <span class="token comment">// local count = tonumber(redis.call(&#39;GET&#39;, key) or &quot;0&quot;)</span>
        <span class="token comment">//</span>
        <span class="token comment">// if count + permits &gt; limit then</span>
        <span class="token comment">//   -- 触发限流</span>
        <span class="token comment">//   return 0</span>
        <span class="token comment">// else</span>
        <span class="token comment">//   redis.call(&#39;INCRBY&#39;, key, permits)</span>
        <span class="token comment">//   redis.call(&#39;EXPIRE&#39;, key, seconds)</span>
        <span class="token comment">//   return count + permits</span>
        <span class="token comment">// end</span>
        <span class="token class-name">String</span> script <span class="token operator">=</span>
            <span class="token string">&quot;-- 缓存 Key\\n&quot;</span>
                <span class="token operator">+</span> <span class="token string">&quot;local key = KEYS[1]\\n&quot;</span>
                <span class="token operator">+</span> <span class="token string">&quot;-- 访问请求数\\n&quot;</span>
                <span class="token operator">+</span> <span class="token string">&quot;local permits = tonumber(ARGV[1])\\n&quot;</span>
                <span class="token operator">+</span> <span class="token string">&quot;-- 过期时间\\n&quot;</span>
                <span class="token operator">+</span> <span class="token string">&quot;local seconds = tonumber(ARGV[2])\\n&quot;</span>
                <span class="token operator">+</span> <span class="token string">&quot;-- 限流阈值\\n&quot;</span>
                <span class="token operator">+</span> <span class="token string">&quot;local limit = tonumber(ARGV[3])\\n&quot;</span>
                <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span>
                <span class="token operator">+</span> <span class="token string">&quot;-- 获取统计值\\n&quot;</span>
                <span class="token operator">+</span> <span class="token string">&quot;local count = tonumber(redis.call(&#39;GET&#39;, key) or \\&quot;0\\&quot;)\\n&quot;</span>
                <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span>
                <span class="token operator">+</span> <span class="token string">&quot;if count + permits &gt; limit then\\n&quot;</span>
                <span class="token operator">+</span> <span class="token string">&quot;  -- 触发限流\\n&quot;</span>
                <span class="token operator">+</span> <span class="token string">&quot;  return 0\\n&quot;</span>
                <span class="token operator">+</span> <span class="token string">&quot;else\\n&quot;</span>
                <span class="token operator">+</span> <span class="token string">&quot;  redis.call(&#39;INCRBY&#39;, key, permits)\\n&quot;</span>
                <span class="token operator">+</span> <span class="token string">&quot;  redis.call(&#39;EXPIRE&#39;, key, seconds)\\n&quot;</span>
                <span class="token operator">+</span> <span class="token string">&quot;  return count + permits\\n&quot;</span>
                <span class="token operator">+</span> <span class="token string">&quot;end&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> keys <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> args <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">permits</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>seconds<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>limit<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> eval <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span>script<span class="token punctuation">,</span> keys<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> value <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> eval<span class="token punctuation">;</span>
        <span class="token keyword">return</span> value <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">11</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;请求成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;请求失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 请求成功</span>
    <span class="token comment">// 请求成功</span>
    <span class="token comment">// 请求成功</span>
    <span class="token comment">// 请求成功</span>
    <span class="token comment">// 请求成功</span>
    <span class="token comment">// 请求成功</span>
    <span class="token comment">// 请求成功</span>
    <span class="token comment">// 请求成功</span>
    <span class="token comment">// 请求成功</span>
    <span class="token comment">// 请求成功</span>
    <span class="token comment">// 请求失败</span>
    <span class="token comment">// rate:limit:202401222100 统计值达到 100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="redis-lua-实现的令牌桶限流算法" tabindex="-1"><a class="header-anchor" href="#redis-lua-实现的令牌桶限流算法" aria-hidden="true">#</a> Redis + Lua 实现的令牌桶限流算法</h3><p>【示例】基于 Redis Lua 令牌桶限流算法实现</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- 令牌桶限流</span>

<span class="token comment">-- 令牌的唯一标识</span>
<span class="token keyword">local</span> bucketKey <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token comment">-- 上次请求的时间</span>
<span class="token keyword">local</span> last_mill_request_key <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
<span class="token comment">-- 令牌桶的容量</span>
<span class="token keyword">local</span> limit <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">-- 请求令牌的数量</span>
<span class="token keyword">local</span> permits <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">-- 令牌流入的速率</span>
<span class="token keyword">local</span> rate <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">-- 当前时间</span>
<span class="token keyword">local</span> curr_mill_time <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment">-- 添加令牌</span>

<span class="token comment">-- 获取当前令牌的数量</span>
<span class="token keyword">local</span> current_limit <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span> bucketKey<span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span>
<span class="token comment">-- 获取上次请求的时间</span>
<span class="token keyword">local</span> last_mill_request_time <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span> last_mill_request_key<span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span>
<span class="token comment">-- 计算向桶里添加令牌的数量</span>
<span class="token keyword">if</span> last_mill_request_time <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">then</span>
	<span class="token comment">-- 令牌桶初始化</span>
	<span class="token comment">-- 更新上次请求时间</span>
	redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&quot;HSET&quot;</span><span class="token punctuation">,</span> last_mill_request_key<span class="token punctuation">,</span> curr_mill_time<span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token number">0</span>
<span class="token keyword">else</span>
	<span class="token keyword">local</span> add_token_num <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>curr_mill_time <span class="token operator">-</span> last_mill_request_time<span class="token punctuation">)</span> <span class="token operator">*</span> rate<span class="token punctuation">)</span>
<span class="token keyword">end</span>

<span class="token comment">-- 更新令牌的数量</span>
<span class="token keyword">if</span> current_limit <span class="token operator">+</span> add_token_num <span class="token operator">&gt;</span> limit <span class="token keyword">then</span>
    current_limit <span class="token operator">=</span> limit
<span class="token keyword">else</span>
	current_limit <span class="token operator">=</span> current_limit <span class="token operator">+</span> add_token_num
<span class="token keyword">end</span>
	redis<span class="token punctuation">.</span><span class="token function">pcall</span><span class="token punctuation">(</span><span class="token string">&quot;HSET&quot;</span><span class="token punctuation">,</span>bucketKey<span class="token punctuation">,</span> current_limit<span class="token punctuation">)</span>
<span class="token comment">-- 设置过期时间</span>
redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&quot;EXPIRE&quot;</span><span class="token punctuation">,</span> bucketKey<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>

<span class="token comment">-- 限流判断</span>
<span class="token keyword">if</span> current_limit <span class="token operator">-</span> permits <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token keyword">then</span>
    <span class="token comment">-- 达到限流大小</span>
    <span class="token keyword">return</span> <span class="token number">0</span>
<span class="token keyword">else</span>
    <span class="token comment">-- 没有达到限流大小</span>
	current_limit <span class="token operator">=</span> current_limit <span class="token operator">-</span> permits
	redis<span class="token punctuation">.</span><span class="token function">pcall</span><span class="token punctuation">(</span><span class="token string">&quot;HSET&quot;</span><span class="token punctuation">,</span> bucketKey<span class="token punctuation">,</span> current_limit<span class="token punctuation">)</span>
    <span class="token comment">-- 设置过期时间</span>
    redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&quot;EXPIRE&quot;</span><span class="token punctuation">,</span> bucketKey<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
	<span class="token comment">-- 更新上次请求的时间</span>
	redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&quot;HSET&quot;</span><span class="token punctuation">,</span> last_mill_request_key<span class="token punctuation">,</span> curr_mill_time<span class="token punctuation">)</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="限流工具" tabindex="-1"><a class="header-anchor" href="#限流工具" aria-hidden="true">#</a> 限流工具</h2><p>前面介绍了限流算法的基本原理和一些简单的实现。但在生产环境，我们一般应该使用更成熟的限流工具。</p>`,16),m=n("code",null,"RateLimiter",-1),v={href:"https://blog.csdn.net/forezp/article/details/100060686",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/Netflix/Hystrix",target:"_blank",rel:"noopener noreferrer"},y={href:"https://github.com/alibaba/Sentinel",target:"_blank",rel:"noopener noreferrer"},w=n("h2",{id:"参考资料",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考资料","aria-hidden":"true"},"#"),s(" 参考资料")],-1),g={href:"https://item.jd.com/11322972.html",target:"_blank",rel:"noopener noreferrer"},h={href:"https://www.jianshu.com/p/76cc8ba5ca91",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.com/doocs/advanced-java/blob/master/docs/high-concurrency/huifer-how-to-limit-current.md",target:"_blank",rel:"noopener noreferrer"},q={href:"https://gongfukangee.github.io/2019/04/04/Limit/",target:"_blank",rel:"noopener noreferrer"},L={href:"https://blog.csdn.net/forezp/article/details/100060686",target:"_blank",rel:"noopener noreferrer"};function _(R,x){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("blockquote",null,[k,n("p",null,[s("Guava 的 RateLimiter 工具类就是基于令牌桶算法实现，其源码分析可以参考："),n("a",r,[s("RateLimiter 基于漏桶算法，但它参考了令牌桶算法"),t(a)])])]),d,n("ul",null,[n("li",null,[n("blockquote",null,[n("p",null,[s("Guava 的 "),m,s("：RateLimiter 基于漏桶算法，但它参考了令牌桶算法。具体用法可以参考："),n("a",v,[s("RateLimiter 基于漏桶算法，但它参考了令牌桶算法"),t(a)])])])]),n("li",null,[n("a",b,[s("Hystrix"),t(a)]),s("：经典的限流、熔断工具，很值得借鉴学习。注：官方已停止发布版本。")]),n("li",null,[n("a",y,[s("Sentinel"),t(a)]),s("：阿里的限流、熔断工具。")])]),w,n("ul",null,[n("li",null,[n("a",g,[s("《大型网站技术架构：核心原理与案例分析》"),t(a)])]),n("li",null,[n("a",h,[s("谈谈限流算法的几种实现"),t(a)])]),n("li",null,[n("a",f,[s("如何限流？在工作中是怎么做的？说一下具体的实现？"),t(a)])]),n("li",null,[n("a",q,[s("浅析限流算法"),t(a)])]),n("li",null,[n("a",L,[s("RateLimiter 基于漏桶算法，但它参考了令牌桶算法"),t(a)])])])])}const M=e(l,[["render",_],["__file","03.流量控制.html.vue"]]);export{M as default};
