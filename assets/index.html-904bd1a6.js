const e=JSON.parse('{"key":"v-19e52fec","path":"/pages/ebf8d4/","title":"jvm-and-java","lang":"zh-CN","frontmatter":{"title":"jvm-and-java","date":"2020-10-16T20:29:24.000Z","category":["Java","JavaSE","JVM"],"tag":["Java","JavaSE","JVM"],"permalink":"/pages/ebf8d4/","description":"JVM 和 Java 特性 JVM 如何执行方法调用 在 Java 程序里，如果同一个类中出现多个名字相同，并且参数类型相同的方法，那么它无法通过编译。如果我们想要在同一个类中定义名字相同的方法，那么它们的参数类型必须不同。这些方法之间的关系，我们称之为重载。 重载的方法在编译过程中即可完成识别。具体到每一个方法调用，Java 编译器会根据所传入参数的声明类型（注意与实际类型区分）来选取重载方法。选取的过程共分为三个阶段： 在不考虑对基本类型自动装拆箱（auto-boxing，auto-unboxing），以及可变长参数的情况下选取重载方法； 如果在第 1 个阶段中没有找到适配的方法，那么在允许自动装拆箱，但不允许可变长参数的情况下选取重载方法； 如果在第 2 个阶段中没有找到适配的方法，那么在允许自动装拆箱以及可变长参数的情况下选取重载方法。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/pages/ebf8d4/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"jvm-and-java"}],["meta",{"property":"og:description","content":"JVM 和 Java 特性 JVM 如何执行方法调用 在 Java 程序里，如果同一个类中出现多个名字相同，并且参数类型相同的方法，那么它无法通过编译。如果我们想要在同一个类中定义名字相同的方法，那么它们的参数类型必须不同。这些方法之间的关系，我们称之为重载。 重载的方法在编译过程中即可完成识别。具体到每一个方法调用，Java 编译器会根据所传入参数的声明类型（注意与实际类型区分）来选取重载方法。选取的过程共分为三个阶段： 在不考虑对基本类型自动装拆箱（auto-boxing，auto-unboxing），以及可变长参数的情况下选取重载方法； 如果在第 1 个阶段中没有找到适配的方法，那么在允许自动装拆箱，但不允许可变长参数的情况下选取重载方法； 如果在第 2 个阶段中没有找到适配的方法，那么在允许自动装拆箱以及可变长参数的情况下选取重载方法。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-08T15:41:08.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"JavaSE"}],["meta",{"property":"article:tag","content":"JVM"}],["meta",{"property":"article:published_time","content":"2020-10-16T20:29:24.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-08T15:41:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"jvm-and-java\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-10-16T20:29:24.000Z\\",\\"dateModified\\":\\"2023-09-08T15:41:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io\\"}]}"]]},"headers":[{"level":2,"title":"JVM 如何执行方法调用","slug":"jvm-如何执行方法调用","link":"#jvm-如何执行方法调用","children":[{"level":3,"title":"静态绑定和动态绑定","slug":"静态绑定和动态绑定","link":"#静态绑定和动态绑定","children":[]},{"level":3,"title":"调用指令的符号引用","slug":"调用指令的符号引用","link":"#调用指令的符号引用","children":[]},{"level":3,"title":"虚方法调用","slug":"虚方法调用","link":"#虚方法调用","children":[]},{"level":3,"title":"方法表","slug":"方法表","link":"#方法表","children":[]},{"level":3,"title":"内联缓存","slug":"内联缓存","link":"#内联缓存","children":[]}]},{"level":2,"title":"JVM 如何处理异常","slug":"jvm-如何处理异常","link":"#jvm-如何处理异常","children":[{"level":3,"title":"JVM 如何捕获异常","slug":"jvm-如何捕获异常","link":"#jvm-如何捕获异常","children":[]},{"level":3,"title":"Java 7 的 Supressed 异常以及语法糖","slug":"java-7-的-supressed-异常以及语法糖","link":"#java-7-的-supressed-异常以及语法糖","children":[]}]},{"level":2,"title":"JVM 如何实现反射","slug":"jvm-如何实现反射","link":"#jvm-如何实现反射","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1694186720000,"updatedTime":1694187668000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":2}]},"readingTime":{"minutes":8.23,"words":2469},"filePathRelative":"01.Java/01.JavaSE/06.JVM/jvm-and-java.md","localizedDate":"2020年10月16日","excerpt":"<h1> JVM 和 Java 特性</h1>\\n<h2> JVM 如何执行方法调用</h2>\\n<p>在 Java 程序里，如果同一个类中出现多个名字相同，并且参数类型相同的方法，那么它无法通过编译。如果我们想要在同一个类中定义名字相同的方法，那么它们的参数类型必须不同。这些方法之间的关系，我们称之为重载。</p>\\n<p>重载的方法在编译过程中即可完成识别。具体到每一个方法调用，Java 编译器会根据所传入参数的声明类型（注意与实际类型区分）来选取重载方法。选取的过程共分为三个阶段：</p>\\n<ol>\\n<li>在不考虑对基本类型自动装拆箱（auto-boxing，auto-unboxing），以及可变长参数的情况下选取重载方法；</li>\\n<li>如果在第 1 个阶段中没有找到适配的方法，那么在允许自动装拆箱，但不允许可变长参数的情况下选取重载方法；</li>\\n<li>如果在第 2 个阶段中没有找到适配的方法，那么在允许自动装拆箱以及可变长参数的情况下选取重载方法。</li>\\n</ol>","autoDesc":true}');export{e as data};
