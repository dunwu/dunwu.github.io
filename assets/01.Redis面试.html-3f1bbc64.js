import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as a,c as n,a as e,b as i,d,e as r}from"./app-64c8372a.js";const o={},h=r('<h1 id="redis-面试" tabindex="-1"><a class="header-anchor" href="#redis-面试" aria-hidden="true">#</a> Redis 面试</h1><h2 id="redis-简介" tabindex="-1"><a class="header-anchor" href="#redis-简介" aria-hidden="true">#</a> Redis 简介</h2><h3 id="什么是-redis" tabindex="-1"><a class="header-anchor" href="#什么是-redis" aria-hidden="true">#</a> 什么是 Redis</h3><p>Redis 是一种内存数据库，对数据的读写操作都是在内存中完成，因此<strong>读写速度非常快</strong>，常用于<strong>缓存，消息队列、分布式锁等场景</strong>。</p><p>Redis 提供了多种数据类型，如：String(字符串)、Hash(哈希)、 List (列表)、Set(集合)、Zset(有序集合)、Bitmaps（位图）、HyperLogLog（基数统计）、GEO（地理空间）、Stream（流）。Redis 对数据类型的操作都是<strong>原子性</strong>的，因为执行命令由单线程负责的，不存在并发竞争的问题。</p><p>除此之外，Redis 还支持<strong>事务 、持久化、Lua 脚本、多种集群方案（主从复制模式、哨兵模式、切片机群模式）、发布/订阅模式，内存淘汰机制、过期删除机制</strong>等等。</p><h3 id="redis-的优势" tabindex="-1"><a class="header-anchor" href="#redis-的优势" aria-hidden="true">#</a> Redis 的优势</h3><ul><li>性能极高 – Redis 能读的速度是 110000 次/s，写的速度是 81000 次/s。</li><li>丰富的数据类型 - 支持字符串、列表、集合、有序集合、散列表。</li><li>原子 - Redis 的所有操作都是原子性的。单个操作是原子性的。多个操作也支持事务，即原子性，通过 MULTI 和 EXEC 指令包起来。</li><li>持久化 - Redis 支持数据的持久化。可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</li><li>备份 - Redis 支持数据的备份，即 master-slave 模式的数据备份。</li><li>丰富的特性 - Redis 还支持发布订阅, 通知, key 过期等等特性。</li></ul><h3 id="redis-有哪些使用场景" tabindex="-1"><a class="header-anchor" href="#redis-有哪些使用场景" aria-hidden="true">#</a> Redis 有哪些使用场景</h3><ul><li><strong>缓存</strong> - 将热点数据放到内存中，设置内存的最大使用量以及过期淘汰策略来保证缓存的命中率。</li><li><strong>计数器</strong> - Redis 这种内存数据库能支持计数器频繁的读写操作。</li><li><strong>应用限流</strong> - 限制一个网站访问流量。</li><li><strong>消息队列</strong> - 使用 List 数据类型，它是双向链表。</li><li><strong>查找表</strong> - 使用 HASH 数据类型。</li><li><strong>交集运算</strong> - 使用 SET 类型，例如求两个用户的共同好友。</li><li><strong>排行榜</strong> - 使用 ZSET 数据类型。</li><li><strong>分布式 Session</strong> - 多个应用服务器的 Session 都存储到 Redis 中来保证 Session 的一致性。</li><li><strong>分布式锁</strong> - 除了可以使用 SETNX 实现分布式锁之外，还可以使用官方提供的 RedLock 分布式锁实现。</li></ul><h3 id="为什么用-redis-作为缓存" tabindex="-1"><a class="header-anchor" href="#为什么用-redis-作为缓存" aria-hidden="true">#</a> 为什么用 Redis 作为缓存</h3><p>主要是因为 <strong>Redis 具备「高性能」和「高并发」两种特性</strong>。</p><p><strong><em>1、Redis 具备高性能</em></strong></p><p>假如用户第一次访问 MySQL 中的某些数据。这个过程会比较慢，因为是从硬盘上读取的。将该用户访问的数据缓存在 Redis 中，这样下一次再访问这些数据的时候就可以直接从缓存中获取了，操作 Redis 缓存就是直接操作内存，所以速度相当快。</p><p>如果 MySQL 中的对应数据改变的之后，同步改变 Redis 缓存中相应的数据即可，不过这里会有 Redis 和 MySQL 双写一致性的问题，后面我们会提到。</p><p><strong><em>2、 Redis 具备高并发</em></strong></p><p>单台设备的 Redis 的 QPS（Query Per Second，每秒钟处理完请求的次数） 是 MySQL 的 10 倍，Redis 单机的 QPS 能轻松破 10w，而 MySQL 单机的 QPS 很难破 1w。</p><h3 id="redis-和-memcached-有什么区别" tabindex="-1"><a class="header-anchor" href="#redis-和-memcached-有什么区别" aria-hidden="true">#</a> Redis 和 Memcached 有什么区别</h3><p>Redis 与 Memcached 的<strong>共性</strong>：</p><ol><li>都是内存数据库，一般都用来当做缓存使用。</li><li>都有过期策略。</li><li>两者的性能都非常高。</li></ol><p>Redis 与 Memcached <strong>差异</strong>：</p><table><thead><tr><th></th><th>Redis</th><th>Memcached</th></tr></thead><tbody><tr><td>数据类型</td><td>支持数据类型更丰富：String、Hash、List、Set、ZSet 等</td><td>只支持 KV 数据类型</td></tr><tr><td>持久化</td><td>支持两种持久化策略：RDB 快照和 AOF 日志</td><td>不支持持久化，一旦重启或宕机就会丢失数据</td></tr><tr><td>分布式</td><td>支持分布式</td><td>本身不支持分布式，只能通过在客户端使用像一致性哈希这样的分布式算法来实现分布式存储，这种方式在存储和查询时都需要先在客户端计算一次数据所在的节点</td></tr><tr><td>性能</td><td>Redis 的读写采用单线程，因此存储小数据时比 Memcached 性能更高</td><td>在 100k 以上的数据中，Memcached 性能要高于 Redis</td></tr><tr><td>其他功能</td><td>支持发布订阅模型、Lua 脚本、事务等功能</td><td>不支持</td></tr></tbody></table><h3 id="redis-为什么快" tabindex="-1"><a class="header-anchor" href="#redis-为什么快" aria-hidden="true">#</a> Redis 为什么快</h3><p>Redis 单机 QPS 能达到 100000。</p><p>Redis 是单线程模型（Redis 6.0 已经支持多线程模型），为什么还能有这么高的并发？</p><ul><li>Redis 完全基于内存操作。</li><li>Redis 数据结构简单。</li><li>采用单线程，避免线程上下文切换和竞争。</li><li>使用 I/O 多路复用模型（非阻塞 I/O）。</li></ul><blockquote><p>I/O 多路复用</p><p>I/O 多路复用模型是利用 select、poll、epoll 可以同时监察多个流的 I/O 事件的能力，在空闲的时候，会把当前线程阻塞掉，当有一个或多个流有 I/O 事件时，就从阻塞态中唤醒，于是程序就会轮询一遍所有的流（epoll 是只轮询那些真正发出了事件的流），并且只依次顺序的处理就绪的流，这种做法就避免了大量的无用操作。</p></blockquote><h2 id="redis-数据类型" tabindex="-1"><a class="header-anchor" href="#redis-数据类型" aria-hidden="true">#</a> Redis 数据类型</h2><h3 id="redis-支持哪些数据类型" tabindex="-1"><a class="header-anchor" href="#redis-支持哪些数据类型" aria-hidden="true">#</a> Redis 支持哪些数据类型</h3><p>Redis 支持的五种基本数据类型：</p><ul><li><strong>String（字符串）</strong> - 典型应用场景：缓存对象、计数器、分布式锁、共享 session 信息等。</li><li><strong>Hash（哈希）</strong> - 典型应用场景：缓存对象、购物车等。</li><li><strong>List（列表）</strong> - 典型应用场景：消息队列（但是有两个问题：1. 生产者需要自行实现全局唯一 ID；2. 不能以消费组形式消费数据）等。</li><li><strong>Set（集合）</strong> - 典型应用场景：聚合计算（并集、交集、差集），如点赞、共同关注、抽奖活动等。</li><li><strong>Zset（有序集合）</strong> - 典型应用场景：排序场景，如排行榜、电话和姓名排序等。</li></ul><p>随着版本升级，Redis 支持的四种扩展数据类型：</p><ul><li>BitMap（2.2 版新增） - 二值状态统计的场景，比如签到、判断用户登陆状态、连续签到用户总数等；</li><li>HyperLogLog（2.8 版新增） - 海量数据基数统计的场景，比如百万级网页 UV 计数等；</li><li>GEO（3.2 版新增） - 存储地理位置信息的场景，比如滴滴叫车；</li><li>Stream（5.0 版新增） - 消息队列，相比于基于 List 类型实现的消息队列，有这两个特有的特性：自动生成全局唯一消息 ID，支持以消费组形式消费数据。</li></ul><h3 id="redis-五种基本数据类型是如何实现的" tabindex="-1"><a class="header-anchor" href="#redis-五种基本数据类型是如何实现的" aria-hidden="true">#</a> Redis 五种基本数据类型是如何实现的</h3><h4 id="string-类型内部实现" tabindex="-1"><a class="header-anchor" href="#string-类型内部实现" aria-hidden="true">#</a> String 类型内部实现</h4><p>String 类型的底层的数据结构实现主要是 SDS（简单动态字符串）。 SDS 和我们认识的 C 字符串不太一样，之所以没有使用 C 语言的字符串表示，因为 SDS 相比于 C 的原生字符串：</p><ul><li><strong>SDS 不仅可以保存文本数据，还可以保存二进制数据</strong>。因为 SDS 使用 len 属性的值而不是空字符来判断字符串是否结束，并且 SDS 的所有 API 都会以处理二进制的方式来处理 SDS 存放在 buf[] 数组里的数据。所以 SDS 不光能存放文本数据，而且能保存图片、音频、视频、压缩文件这样的二进制数据。</li><li><strong>SDS 获取字符串长度的时间复杂度是 O(1)</strong>。因为 C 语言的字符串并不记录自身长度，所以获取长度的复杂度为 O(n)；而 SDS 结构里用 len 属性记录了字符串长度，所以复杂度为 O(1)。</li><li><strong>Redis 的 SDS API 是安全的，拼接字符串不会造成缓冲区溢出</strong>。因为 SDS 在拼接字符串之前会检查 SDS 空间是否满足要求，如果空间不够会自动扩容，所以不会导致缓冲区溢出的问题。</li></ul><h4 id="list-类型内部实现" tabindex="-1"><a class="header-anchor" href="#list-类型内部实现" aria-hidden="true">#</a> List 类型内部实现</h4><p>List 类型的底层数据结构是由<strong>双向链表或压缩列表</strong>实现的：</p><ul><li>如果列表的元素个数小于 512 个（默认值，可由 list-max-ziplist-entries 配置），列表每个元素的值都小于 64 字节（默认值，可由 list-max-ziplist-value 配置），Redis 会使用<strong>压缩列表</strong>作为 List 类型的底层数据结构；</li><li>如果列表的元素不满足上面的条件，Redis 会使用<strong>双向链表</strong>作为 List 类型的底层数据结构；</li></ul><p>但是<strong>在 Redis 3.2 版本之后，List 数据类型底层数据结构就只由 quicklist 实现了，替代了双向链表和压缩列表</strong>。</p><h4 id="hash-类型内部实现" tabindex="-1"><a class="header-anchor" href="#hash-类型内部实现" aria-hidden="true">#</a> Hash 类型内部实现</h4><p>Hash 类型的底层数据结构是由<strong>压缩列表或哈希表</strong>实现的：</p><ul><li>如果哈希类型元素个数小于 512 个（默认值，可由 hash-max-ziplist-entries 配置），所有值小于 64 字节（默认值，可由 hash-max-ziplist-value 配置）的话，Redis 会使用<strong>压缩列表</strong>作为 Hash 类型的底层数据结构；</li><li>如果哈希类型元素不满足上面条件，Redis 会使用<strong>哈希表</strong>作为 Hash 类型的底层数据结构。</li></ul><p><strong>在 Redis 7.0 中，压缩列表数据结构已经废弃了，交由 listpack 数据结构来实现了</strong>。</p><h4 id="set-类型内部实现" tabindex="-1"><a class="header-anchor" href="#set-类型内部实现" aria-hidden="true">#</a> Set 类型内部实现</h4><p>Set 类型的底层数据结构是由<strong>哈希表或整数集合</strong>实现的：</p><ul><li>如果集合中的元素都是整数且元素个数小于 512 （默认值，set-maxintset-entries 配置）个，Redis 会使用<strong>整数集合</strong>作为 Set 类型的底层数据结构；</li><li>如果集合中的元素不满足上面条件，则 Redis 使用<strong>哈希表</strong>作为 Set 类型的底层数据结构。</li></ul><h4 id="zset-类型内部实现" tabindex="-1"><a class="header-anchor" href="#zset-类型内部实现" aria-hidden="true">#</a> ZSet 类型内部实现</h4><p>Zset 类型的底层数据结构是由<strong>压缩列表或跳表</strong>实现的：</p><ul><li>如果有序集合的元素个数小于 128 个，并且每个元素的值小于 64 字节时，Redis 会使用<strong>压缩列表</strong>作为 Zset 类型的底层数据结构；</li><li>如果有序集合的元素不满足上面的条件，Redis 会使用<strong>跳表</strong>作为 Zset 类型的底层数据结构；</li></ul><p><strong>在 Redis 7.0 中，压缩列表数据结构已经废弃了，交由 listpack 数据结构来实现了。</strong></p><h2 id="redis-client" tabindex="-1"><a class="header-anchor" href="#redis-client" aria-hidden="true">#</a> Redis Client</h2>',53),c={href:"https://redis.io/clients",target:"_blank",rel:"noopener noreferrer"},p=e("p",null,"redis 官方推荐的 Java Redis Client：",-1),R={href:"https://github.com/xetorthio/jedis",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/redisson/redisson",target:"_blank",rel:"noopener noreferrer"},u={href:"https://github.com/lettuce-io/lettuce-core",target:"_blank",rel:"noopener noreferrer"},m=r('<h2 id="redis-内存淘汰" tabindex="-1"><a class="header-anchor" href="#redis-内存淘汰" aria-hidden="true">#</a> Redis 内存淘汰</h2><p>【问题】</p><ul><li>Redis 有哪些内存淘汰策略？</li><li>这些淘汰策略分别适用于什么场景？</li><li>Redis 有哪些删除失效 key 的方法？</li><li>如何设置 Redis 中键的过期时间？</li><li>如果让你实现一个 LRU 算法，怎么做？</li></ul><hr><p>【解答】</p><p>（1）Redis 过期策略是：<strong>定期删除+惰性删除</strong>。</p><ul><li>消极方法（passive way），在主键被访问时如果发现它已经失效，那么就删除它。</li><li>主动方法（active way），定期从设置了失效时间的主键中选择一部分失效的主键删除。</li></ul><p>（2）Redis 内存淘汰策略：</p><ul><li><strong><code>noeviction</code></strong> - 当内存使用达到阈值的时候，所有引起申请内存的命令会报错。这是 Redis 默认的策略。</li><li><strong><code>allkeys-lru</code></strong> - 在主键空间中，优先移除最近未使用的 key。</li><li><strong><code>allkeys-random</code></strong> - 在主键空间中，随机移除某个 key。</li><li><strong><code>volatile-lru</code></strong> - 在设置了过期时间的键空间中，优先移除最近未使用的 key。</li><li><strong><code>volatile-random</code></strong> - 在设置了过期时间的键空间中，随机移除某个 key。</li><li><strong><code>volatile-ttl</code></strong> - 在设置了过期时间的键空间中，具有更早过期时间的 key 优先移除。</li></ul><p>（3）如何选择内存淘汰策略：</p><ul><li>如果数据呈现幂等分布，也就是一部分数据访问频率高，一部分数据访问频率低，则使用 <code>allkeys-lru</code>。</li><li>如果数据呈现平等分布，也就是所有的数据访问频率都相同，则使用 <code>allkeys-random</code>。</li><li><code>volatile-lru</code> 策略和 <code>volatile-random</code> 策略适合我们将一个 Redis 实例既应用于缓存和又应用于持久化存储的时候，然而我们也可以通过使用两个 Redis 实例来达到相同的效果。</li><li>将 key 设置过期时间实际上会消耗更多的内存，因此我们建议使用 <code>allkeys-lru</code> 策略从而更有效率的使用内存。</li></ul><p>（4）LRU 算法实现思路：可以继承 LinkedHashMap，并覆写 removeEldestEntry 方法来实现一个最简单的 LRUCache</p><h2 id="redis-持久化" tabindex="-1"><a class="header-anchor" href="#redis-持久化" aria-hidden="true">#</a> Redis 持久化</h2><p>【问题】</p><ul><li>Redis 有几种持久化方式？</li><li>Redis 的不同持久化方式的特性和原理是什么？</li><li>RDB 和 AOF 各有什么优缺点？分别适用于什么样的场景？</li><li>Redis 执行持久化时，可以处理请求吗？</li><li>AOF 有几种同步频率？</li></ul><hr><p>【解答】</p><p>（1）Redis 支持两种持久化方式：RDB 和 AOF。</p><p>（2）RDB 即某一时刻的二进制数据快照。</p><p>Redis 会周期性生成 RDB 文件。</p><p>生成 RDB 流程：Redis fork 一个子进程，负责生成 RDB；生成 RDB 采用 Copy On Write 模式，此时，如果收到写请求，会在原副本上操作，不影响工作。</p><p>RDB 只能恢复生成快照时刻的数据，之后的数据无法恢复。生成 RDB 的资源开销高昂。RDB 适合做冷备。</p><p>（3）AOF 会将写命令不断追加到 AOF 文本日志末尾。</p><p>AOF 丢数据比 RDB 少，但文件会比 RDB 文件大很多。</p><p>一般，AOF 设置 <code>appendfsync</code> 同步频率为 <strong><code>everysec</code></strong> 即可。</p><p>（4）RDB or AOF</p><p>建议同时使用 RDB 和 AOF。用 AOF 来保证数据不丢失，作为数据恢复的第一选择; 用 RDB 来做不同程度的冷备，在 AOF 文件都丢失或损坏不可用的时候，还可以使用 RDB 来进行快速的数据恢复。</p><h2 id="redis-事务" tabindex="-1"><a class="header-anchor" href="#redis-事务" aria-hidden="true">#</a> Redis 事务</h2><p>【问题】</p><ul><li>Redis 的并发竞争问题是什么？如何解决这个问题？</li><li>Redis 支持事务吗？</li><li>Redis 事务是严格意义的事务吗？Redis 为什么不支持回滚。</li><li>Redis 事务如何工作？</li><li>了解 Redis 事务中的 CAS 行为吗？</li></ul><p>【解答】</p><p><strong>Redis 提供的不是严格的事务，Redis 只保证串行执行命令，并且能保证全部执行，但是执行命令失败时并不会回滚，而是会继续执行下去</strong>。</p><p>Redis 不支持回滚的理由：</p><ul><li>Redis 命令只会因为错误的语法而失败，或是命令用在了错误类型的键上面。</li><li>因为不需要对回滚进行支持，所以 Redis 的内部可以保持简单且快速。</li></ul><p><code>MULTI</code> 、 <code>EXEC</code> 、 <code>DISCARD</code> 和 <code>WATCH</code> 是 Redis 事务相关的命令。</p><p>Redis 有天然解决这个并发竞争问题的类 CAS 乐观锁方案：每次要<strong>写之前，先判断</strong>一下当前这个 value 的时间戳是否比缓存里的 value 的时间戳要新。如果是的话，那么可以写，否则，就不能用旧的数据覆盖新的数据。</p><h2 id="redis-管道" tabindex="-1"><a class="header-anchor" href="#redis-管道" aria-hidden="true">#</a> Redis 管道</h2><p>【问题】</p><ul><li>除了事务，还有其他批量执行 Redis 命令的方式吗？</li></ul><p>【解答】</p><p>Redis 是一种基于 C/S 模型以及请求/响应协议的 TCP 服务。Redis 支持管道技术。管道技术允许请求以异步方式发送，即旧请求的应答还未返回的情况下，允许发送新请求。这种方式可以大大提高传输效率。使用管道发送命令时，Redis Server 会将部分请求放到缓存队列中（占用内存），执行完毕后一次性发送结果。如果需要发送大量的命令，会占用大量的内存，因此应该按照合理数量分批次的处理。</p><h2 id="redis-高并发" tabindex="-1"><a class="header-anchor" href="#redis-高并发" aria-hidden="true">#</a> Redis 高并发</h2><p>【问题】</p><ul><li>Redis 是单线程模型，为何吞吐量还很高？</li><li>Redis 的 IO 多路复用原理是什么？</li><li>Redis 集群如何分片和寻址？</li><li>Redis 集群如何扩展？</li><li>Redis 集群如何保证数据一致？</li><li>Redis 集群如何规划？你们公司的生产环境上如何部署 Redis 集群？</li></ul><hr><p>【解答】</p><p>（1）单线程</p><p>Redis 为单进程单线程模式，采用队列模式将并发访问变为串行访问。Redis 单机吞吐量也很高，能达到几万 QPS。</p><p>Redis 单线程模型，依然有很高的并发吞吐，原因在于：</p><ul><li>Redis 读写都是内存操作。</li><li>Redis 基于<strong>非阻塞的 IO 多路复用机制</strong>，同时监听多个 socket，将产生事件的 socket 压入内存队列中，事件分派器根据 socket 上的事件类型来选择对应的事件处理器进行处理。</li><li>单线程，避免了线程创建、销毁、上下文切换的开销，并且避免了资源竞争。</li></ul><p>（2）扩展并发吞吐量、存储容量</p><p>Redis 的高性能（扩展并发吞吐量、存储容量）通过主从架构来实现。</p><p>Redis 集群采用主从模型，提供复制和故障转移功能，来保证 Redis 集群的高可用。通常情况，一主多从模式已经可以满足大部分项目的需要。根据实际的并发量，可以通过增加节点来扩展并发吞吐。</p><p>一主多从模式下，主节点负责写操作（单机几万 QPS），从节点负责查询操作（单机十万 QPS）。</p><p>进一步，如果需要缓存大量数据，就需要分区（sharding）。Redis 集群通过划分虚拟 hash 槽来分片，每个主节点负责一定范围的 hash 槽。当需要扩展集群节点时，重新分配 hash 槽即可，redis-trib 会自动迁移变更 hash 槽中所属的 key。</p><p>（3）Redis 集群数据一致性</p><p>Redis 集群基于复制特性实现节点间的数据一致性。</p><h2 id="redis-复制" tabindex="-1"><a class="header-anchor" href="#redis-复制" aria-hidden="true">#</a> Redis 复制</h2><p>【问题】</p><ul><li>Redis 复制的工作原理？Redis 旧版复制和新版复制有何不同？</li><li>Redis 主从节点间如何复制数据？</li><li>Redis 的数据一致性是强一致性吗？</li></ul><hr><p>【解答】</p><p>（1）旧版复制基于 <code>SYNC</code> 命令实现。分为同步（sync）和命令传播（command propagate）两个操作。这种方式存在缺陷：不能高效处理断线重连后的复制情况。</p><p>（2）新版复制基于 <code>PSYNC</code> 命令实现。同步操作分为了两块：</p><ul><li><strong><code>完整重同步（full resychronization）</code></strong> 用于初次复制；</li><li><strong><code>部分重同步（partial resychronization）</code></strong> 用于断线后重复制。 <ul><li>主从服务器的<strong>复制偏移量（replication offset）</strong></li><li>主服务器的<strong>复制积压缓冲区（replication backlog）</strong></li><li><strong>服务器的运行 ID</strong></li></ul></li></ul><p>（3）Redis 集群主从节点复制的工作流程：</p><ul><li>步骤 1. 设置主从服务器</li><li>步骤 2. 主从服务器建立 TCP 连接。</li><li>步骤 3. 发送 PING 检查通信状态。</li><li>步骤 4. 身份验证。</li><li>步骤 5. 发送端口信息。</li><li>步骤 6. 同步。</li><li>步骤 7. 命令传播。</li></ul><h2 id="redis-哨兵" tabindex="-1"><a class="header-anchor" href="#redis-哨兵" aria-hidden="true">#</a> Redis 哨兵</h2><p>【问题】</p><ul><li>Redis 如何实现高可用？</li><li>Redis 哨兵的功能？</li><li>Redis 哨兵的原理？</li><li>Redis 哨兵如何选举 Leader？</li><li>Redis 如何实现故障转移？</li></ul><hr><p>【解答】</p><p>（1）Redis 的高可用是通过哨兵来实现（Raft 协议的 Redis 实现）。Sentinel（哨兵）可以监听主服务器，并在主服务器进入下线状态时，自动从从服务器中选举出新的主服务器。</p><p>由一个或多个 Sentinel 实例组成的 Sentinel 系统可以监视任意多个主服务器，以及这些主服务器的所有从服务器，并在被监视的主服务器进入下线状态时，自动将下线主服务器的某个从服务器升级为新的主服务器，然后由新的主服务器代替已下线的主服务器继续处理命令请求。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/dev/snap/20200131135847.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="redis-vs-memcached" tabindex="-1"><a class="header-anchor" href="#redis-vs-memcached" aria-hidden="true">#</a> Redis vs. Memcached</h2><p>【问题】</p><p>Redis 和 Memcached 有什么区别？</p><p>分布式缓存技术选型，选 Redis 还是 Memcached，为什么？</p><p>Redis 和 Memcached 各自的线程模型是怎样的？</p><p>为什么单线程的 Redis 性能却不输于多线程的 Memcached？</p><p>【解答】</p><p>Redis 不仅仅支持简单的 k/v 类型的数据，同时还提供 list，set，zset，hash 等数据结构的存储。memcache 支持简单的数据类型，String。</p><p>Redis 支持数据的备份，即 master-slave 模式的数据备份。</p><p>Redis 支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用,而 Memecache 把数据全部存在内存之中</p><p>redis 的速度比 memcached 快很多</p><p>Memcached 是多线程，非阻塞 IO 复用的网络模型；Redis 使用单线程的 IO 复用模型。</p><figure><img src="https://user-gold-cdn.xitu.io/2018/4/18/162d7773080d4570?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="Redis与Memcached的区别与比较" tabindex="0" loading="lazy"><figcaption>Redis与Memcached的区别与比较</figcaption></figure>',88),S=e("strong",null,"：《脚踏两只船的困惑 - Memcached 与 Redis》",-1),f={href:"https://www.imooc.com/article/23549",target:"_blank",rel:"noopener noreferrer"},b=e("p",null,[e("strong",null,"终极策略："),i(" 使用 Redis 的 String 类型做的事，都可以用 Memcached 替换，以此换取更好的性能提升； 除此以外，优先考虑 Redis；")],-1),_=e("h2",{id:"参考资料",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#参考资料","aria-hidden":"true"},"#"),i(" 参考资料")],-1),x={href:"https://juejin.im/post/5ad6e4066fb9a028d82c4b66",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/doocs/advanced-java#%E7%BC%93%E5%AD%98",target:"_blank",rel:"noopener noreferrer"};function D(y,v){const s=l("ExternalLinkIcon");return a(),n("div",null,[h,e("p",null,[i("Redis 社区中有多种编程语言的客户端，可以在这里查找合适的客户端："),e("a",c,[i("Redis 官方罗列的客户端清单"),d(s)])]),p,e("ul",null,[e("li",null,[e("a",R,[i("jedis"),d(s)]),i(" - 最流行的 Redis Java 客户端")]),e("li",null,[e("a",g,[i("redisson"),d(s)]),i(" - 额外提供了很多的分布式服务特性，如：分布式锁、分布式 Java 常用对象（BitSet、BlockingQueue、CountDownLatch 等）")]),e("li",null,[e("a",u,[i("lettuce"),d(s)]),i(" - Spring Boot 2.0 默认 Redis 客户端")])]),m,e("p",null,[i("如果想要更详细了解的话，可以查看慕课网上的这篇手记（非常推荐） "),S,i("："),e("a",f,[i("www.imooc.com/article/23549"),d(s)])]),b,_,e("ul",null,[e("li",null,[e("a",x,[i("面试中关于 Redis 的问题看这篇就够了"),d(s)])]),e("li",null,[e("a",k,[i("advanced-java"),d(s)])])])])}const B=t(o,[["render",D],["__file","01.Redis面试.html.vue"]]);export{B as default};
