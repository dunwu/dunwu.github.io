import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o,c as p,a as s,b as n,d as a,e}from"./app-103fb7a1.js";const c={},r=e(`<h1 id="elasticsearch-索引" tabindex="-1"><a class="header-anchor" href="#elasticsearch-索引" aria-hidden="true">#</a> Elasticsearch 索引</h1><h2 id="索引管理操作" tabindex="-1"><a class="header-anchor" href="#索引管理操作" aria-hidden="true">#</a> 索引管理操作</h2><p>Elasticsearch 索引管理主要包括如何进行索引的创建、索引的删除、副本的更新、索引读写权限、索引别名的配置等等内容。</p><h3 id="索引删除" tabindex="-1"><a class="header-anchor" href="#索引删除" aria-hidden="true">#</a> 索引删除</h3><p>ES 索引删除操作向 ES 集群的 http 接口发送指定索引的 delete http 请求即可，可以通过 curl 命令，具体如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-X</span> DELETE http://<span class="token punctuation">{</span>es_host<span class="token punctuation">}</span>:<span class="token punctuation">{</span>es_http_port<span class="token punctuation">}</span>/<span class="token punctuation">{</span>index<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果删除成功，它会返回如下信息，具体示例如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-X</span> DELETE http://10.10.10.66:9200/my_index?pretty
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>为了返回的信息便于读取，增加了 pretty 参数：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">{</span>
  <span class="token string">&quot;acknowledged&quot;</span> <span class="token builtin class-name">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="索引别名" tabindex="-1"><a class="header-anchor" href="#索引别名" aria-hidden="true">#</a> 索引别名</h3><p>ES 的索引别名就是给一个索引或者多个索引起的另一个名字，典型的应用场景是针对索引使用的平滑切换。</p><p>首先，创建索引 my_index，然后将别名 my_alias 指向它，示例如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>PUT /my_index
PUT /my_index/_alias/my_alias
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以通过如下形式：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>POST /_aliases
<span class="token punctuation">{</span>
  <span class="token string">&quot;actions&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;add&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;index&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;my_index&quot;</span>, <span class="token string">&quot;alias&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;my_alias&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以在一次请求中增加别名和移除别名混合使用：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>POST /_aliases
<span class="token punctuation">{</span>
  <span class="token string">&quot;actions&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;remove&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;index&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;my_index&quot;</span>, <span class="token string">&quot;alias&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;my_alias&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;add&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;index&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;my_index_v2&quot;</span>, <span class="token string">&quot;alias&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;my_alias&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>需要注意的是，如果别名与索引是一对一的，使用别名索引文档或者查询文档是可以的，但是如果别名和索引是一对多的，使用别名会发生错误，因为 ES 不知道把文档写入哪个索引中去或者从哪个索引中读取文档。</p></blockquote>`,19),d={href:"https://www.knowledgedict.com/tutorial/elasticsearch-index-smooth-shift.html",target:"_blank",rel:"noopener noreferrer"},u=e(`<h2 id="settings-详解" tabindex="-1"><a class="header-anchor" href="#settings-详解" aria-hidden="true">#</a> Settings 详解</h2><p>Elasticsearch 索引的配置项主要分为<strong>静态配置属性</strong>和<strong>动态配置属性</strong>，静态配置属性是索引创建后不能修改，而动态配置属性则可以随时修改。</p><p>ES 索引设置的 api 为 <strong><em><code>_settings</code></em></strong>，完整的示例如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>PUT /my_index
<span class="token punctuation">{</span>
  <span class="token string">&quot;settings&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;index&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
      <span class="token string">&quot;number_of_shards&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;1&quot;</span>,
      <span class="token string">&quot;number_of_replicas&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;1&quot;</span>,
      <span class="token string">&quot;refresh_interval&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;60s&quot;</span>,
      <span class="token string">&quot;analysis&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;filter&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
          <span class="token string">&quot;tsconvert&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;type&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;stconvert&quot;</span>,
            <span class="token string">&quot;convert_type&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;t2s&quot;</span>,
            <span class="token string">&quot;delimiter&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;,&quot;</span>
          <span class="token punctuation">}</span>,
          <span class="token string">&quot;synonym&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;type&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;synonym&quot;</span>,
            <span class="token string">&quot;synonyms_path&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;analysis/synonyms.txt&quot;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>,
        <span class="token string">&quot;analyzer&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
          <span class="token string">&quot;ik_max_word_synonym&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;filter&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>
              <span class="token string">&quot;synonym&quot;</span>,
              <span class="token string">&quot;tsconvert&quot;</span>,
              <span class="token string">&quot;standard&quot;</span>,
              <span class="token string">&quot;lowercase&quot;</span>,
              <span class="token string">&quot;stop&quot;</span>
            <span class="token punctuation">]</span>,
            <span class="token string">&quot;tokenizer&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;ik_max_word&quot;</span>
          <span class="token punctuation">}</span>,
          <span class="token string">&quot;ik_smart_synonym&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;filter&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>
              <span class="token string">&quot;synonym&quot;</span>,
              <span class="token string">&quot;standard&quot;</span>,
              <span class="token string">&quot;lowercase&quot;</span>,
              <span class="token string">&quot;stop&quot;</span>
            <span class="token punctuation">]</span>,
            <span class="token string">&quot;tokenizer&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;ik_smart&quot;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>,
			<span class="token string">&quot;mapping&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
				<span class="token string">&quot;coerce&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;false&quot;</span>,
				<span class="token string">&quot;ignore_malformed&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;false&quot;</span>
			<span class="token punctuation">}</span>,
			<span class="token string">&quot;indexing&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
				<span class="token string">&quot;slowlog&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
					<span class="token string">&quot;threshold&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
						<span class="token string">&quot;index&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
							<span class="token string">&quot;warn&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;2s&quot;</span>,
							<span class="token string">&quot;info&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;1s&quot;</span>
						<span class="token punctuation">}</span>
					<span class="token punctuation">}</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>,
			<span class="token string">&quot;provided_name&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;hospital_202101070533&quot;</span>,
			<span class="token string">&quot;query&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
				<span class="token string">&quot;default_field&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;timestamp&quot;</span>,
				<span class="token string">&quot;parse&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
					<span class="token string">&quot;allow_unmapped_fields&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;false&quot;</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>,
			<span class="token string">&quot;requests&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
				<span class="token string">&quot;cache&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
					<span class="token string">&quot;enable&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;true&quot;</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>,
			<span class="token string">&quot;search&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
				<span class="token string">&quot;slowlog&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
					<span class="token string">&quot;threshold&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
						<span class="token string">&quot;fetch&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
							<span class="token string">&quot;warn&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;1s&quot;</span>,
							<span class="token string">&quot;info&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;200ms&quot;</span>
						<span class="token punctuation">}</span>,
						<span class="token string">&quot;query&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
							<span class="token string">&quot;warn&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;1s&quot;</span>,
							<span class="token string">&quot;info&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;500ms&quot;</span>
						<span class="token punctuation">}</span>
					<span class="token punctuation">}</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="固定属性" tabindex="-1"><a class="header-anchor" href="#固定属性" aria-hidden="true">#</a> 固定属性</h3><ul><li><strong><em><code>index.creation_date</code></em></strong>：顾名思义索引的创建时间戳。</li><li><strong><em><code>index.uuid</code></em></strong>：索引的 uuid 信息。</li><li><strong><em><code>index.version.created</code></em></strong>：索引的版本号。</li></ul><h3 id="索引静态配置" tabindex="-1"><a class="header-anchor" href="#索引静态配置" aria-hidden="true">#</a> 索引静态配置</h3><ul><li><strong><em><code>index.number_of_shards</code></em></strong>：索引的主分片数，默认值是 <strong><em><code>5</code></em></strong>。这个配置在索引创建后不能修改；在 es 层面，可以通过 <strong><em><code>es.index.max_number_of_shards</code></em></strong> 属性设置索引最大的分片数，默认为 <strong><em><code>1024</code></em></strong>。</li><li><strong><em><code>index.codec</code></em></strong>：数据存储的压缩算法，默认值为 <strong><em><code>LZ4</code></em></strong>，可选择值还有 <strong><em><code>best_compression</code></em></strong>，它比 LZ4 可以获得更好的压缩比（即占据较小的磁盘空间，但存储性能比 LZ4 低）。</li><li><strong><em><code>index.routing_partition_size</code></em></strong>：路由分区数，如果设置了该参数，其路由算法为：<code>( hash(_routing) + hash(_id) % index.routing_parttion_size ) % number_of_shards</code>。如果该值不设置，则路由算法为 <code>hash(_routing) % number_of_shardings</code>，<code>_routing</code> 默认值为 <code>_id</code>。</li></ul><p>静态配置里，有重要的部分是配置分析器（config analyzers）。</p><ul><li><p><strong><code>index.analysis</code></strong></p><p>：分析器最外层的配置项，内部主要分为 char_filter、tokenizer、filter 和 analyzer。</p><ul><li><strong><em><code>char_filter</code></em></strong>：定义新的字符过滤器件。</li><li><strong><em><code>tokenizer</code></em></strong>：定义新的分词器。</li><li><strong><em><code>filter</code></em></strong>：定义新的 token filter，如同义词 filter。</li><li><strong><em><code>analyzer</code></em></strong>：配置新的分析器，一般是 char_filter、tokenizer 和一些 token filter 的组合。</li></ul></li></ul><h3 id="索引动态配置" tabindex="-1"><a class="header-anchor" href="#索引动态配置" aria-hidden="true">#</a> 索引动态配置</h3>`,11),m=s("li",null,[s("strong",null,[s("em",null,[s("code",null,"index.number_of_replicas")])]),n("：索引主分片的副本数，默认值是 "),s("strong",null,[s("em",null,[s("code",null,"1")])]),n("，该值必须大于等于 0，这个配置可以随时修改。")],-1),g=s("strong",null,[s("em",null,[s("code",null,"index.refresh_interval")])],-1),k=s("strong",null,[s("em",null,[s("code",null,"1s")])],-1),v=s("strong",null,[s("em",null,[s("code",null,"-1")])],-1),b={href:"https://www.knowledgedict.com/tutorial/elasticsearch-refresh_interval-settings.html",target:"_blank",rel:"noopener noreferrer"},h=e(`<h2 id="mapping-详解" tabindex="-1"><a class="header-anchor" href="#mapping-详解" aria-hidden="true">#</a> Mapping 详解</h2><p>在 Elasticsearch 中，<strong><code>Mapping</code></strong>（映射），用来定义一个文档以及其所包含的字段如何被存储和索引，可以在映射中事先定义字段的数据类型、字段的权重、分词器等属性，就如同在关系型数据库中创建数据表时会设置字段的类型。</p><p>Mapping 会把 json 文档映射成 Lucene 所需要的扁平格式</p><p>一个 Mapping 属于一个索引的 Type</p><ul><li>每个文档都属于一个 Type</li><li>一个 Type 有一个 Mapping 定义</li><li>7.0 开始，不需要在 Mapping 定义中指定 type 信息</li></ul><h3 id="映射分类" tabindex="-1"><a class="header-anchor" href="#映射分类" aria-hidden="true">#</a> 映射分类</h3><p>在 Elasticsearch 中，映射可分为静态映射和动态映射。在关系型数据库中写入数据之前首先要建表，在建表语句中声明字段的属性，在 Elasticsearch 中，则不必如此，Elasticsearch 最重要的功能之一就是让你尽可能快地开始探索数据，文档写入 Elasticsearch 中，它会根据字段的类型自动识别，这种机制称为<strong>动态映射</strong>，而<strong>静态映射</strong>则是写入数据之前对字段的属性进行手工设置。</p><h4 id="静态映射" tabindex="-1"><a class="header-anchor" href="#静态映射" aria-hidden="true">#</a> 静态映射</h4><p><strong>静态映射</strong>是在创建索引时手工指定索引映射。静态映射和 SQL 中在建表语句中指定字段属性类似。相比动态映射，通过静态映射可以添加更详细、更精准的配置信息。</p><p>如何定义一个 Mapping</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>PUT /books
<span class="token punctuation">{</span>
    <span class="token string">&quot;mappings&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;type_one&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span> <span class="token punctuation">..</span>. any mappings <span class="token punctuation">..</span>. <span class="token punctuation">}</span>,
        <span class="token string">&quot;type_two&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span> <span class="token punctuation">..</span>. any mappings <span class="token punctuation">..</span>. <span class="token punctuation">}</span>,
        <span class="token punctuation">..</span>.
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="动态映射" tabindex="-1"><a class="header-anchor" href="#动态映射" aria-hidden="true">#</a> 动态映射</h4><p><strong>动态映射</strong>是一种偷懒的方式，可直接创建索引并写入文档，文档中字段的类型是 Elasticsearch <strong>自动识别</strong>的，不需要在创建索引的时候设置字段的类型。在实际项目中，如果遇到的业务在导入数据之前不确定有哪些字段，也不清楚字段的类型是什么，使用动态映射非常合适。当 Elasticsearch 在文档中碰到一个以前没见过的字段时，它会利用动态映射来决定该字段的类型，并自动把该字段添加到映射中，根据字段的取值自动推测字段类型的规则见下表：</p><table><thead><tr><th style="text-align:left;">JSON 格式的数据</th><th style="text-align:left;">自动推测的字段类型</th></tr></thead><tbody><tr><td style="text-align:left;">null</td><td style="text-align:left;">没有字段被添加</td></tr><tr><td style="text-align:left;">true or false</td><td style="text-align:left;">boolean 类型</td></tr><tr><td style="text-align:left;">浮点类型数字</td><td style="text-align:left;">float 类型</td></tr><tr><td style="text-align:left;">数字</td><td style="text-align:left;">long 类型</td></tr><tr><td style="text-align:left;">JSON 对象</td><td style="text-align:left;">object 类型</td></tr><tr><td style="text-align:left;">数组</td><td style="text-align:left;">由数组中第一个非空值决定</td></tr><tr><td style="text-align:left;">string</td><td style="text-align:left;">有可能是 date 类型（若开启日期检测）、double 或 long 类型、text 类型、keyword 类型</td></tr></tbody></table><p>下面举一个例子认识动态 mapping，在 Elasticsearch 中创建一个新的索引并查看它的 mapping，命令如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>PUT books
GET books/_mapping
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>此时 books 索引的 mapping 是空的，返回结果如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;books&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;mappings&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再往 books 索引中写入一条文档，命令如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>PUT books/it/1
<span class="token punctuation">{</span>
	<span class="token string">&quot;id&quot;</span><span class="token builtin class-name">:</span> <span class="token number">1</span>,
	<span class="token string">&quot;publish_date&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;2019-11-10&quot;</span>,
	<span class="token string">&quot;name&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;master Elasticsearch&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>文档写入完成之后，再次查看 mapping，返回结果如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;books&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;mappings&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;properties&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;long&quot;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;text&quot;</span><span class="token punctuation">,</span>
          <span class="token property">&quot;fields&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;keyword&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
              <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;keyword&quot;</span><span class="token punctuation">,</span>
              <span class="token property">&quot;ignore_above&quot;</span><span class="token operator">:</span> <span class="token number">256</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token property">&quot;publish_date&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;date&quot;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用动态 mapping 要结合实际业务需求来综合考虑，如果将 Elasticsearch 当作主要的数据存储使用，并且希望出现未知字段时抛出异常来提醒你注意这一问题，那么开启动态 mapping 并不适用。在 mapping 中可以通过 <code>dynamic</code> 设置来控制是否自动新增字段，接受以下参数：</p><ul><li><strong><code>true</code></strong>：默认值为 true，自动添加字段。</li><li><strong><code>false</code></strong>：忽略新的字段。</li><li><strong><code>strict</code></strong>：严格模式，发现新的字段抛出异常。</li></ul><h3 id="基础类型" tabindex="-1"><a class="header-anchor" href="#基础类型" aria-hidden="true">#</a> 基础类型</h3><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">关键字</th></tr></thead><tbody><tr><td style="text-align:left;">字符串类型</td><td style="text-align:left;">string、text、keyword</td></tr><tr><td style="text-align:left;">数字类型</td><td style="text-align:left;">long、integer、short、byte、double、float、half_float、scaled_float</td></tr><tr><td style="text-align:left;">日期类型</td><td style="text-align:left;">date</td></tr><tr><td style="text-align:left;">布尔类型</td><td style="text-align:left;">boolean</td></tr><tr><td style="text-align:left;">二进制类型</td><td style="text-align:left;">binary</td></tr><tr><td style="text-align:left;">范围类型</td><td style="text-align:left;">range</td></tr></tbody></table><h3 id="复杂类型" tabindex="-1"><a class="header-anchor" href="#复杂类型" aria-hidden="true">#</a> 复杂类型</h3><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">关键字</th></tr></thead><tbody><tr><td style="text-align:left;">数组类型</td><td style="text-align:left;">array</td></tr><tr><td style="text-align:left;">对象类型</td><td style="text-align:left;">object</td></tr><tr><td style="text-align:left;">嵌套类型</td><td style="text-align:left;">nested</td></tr></tbody></table><h3 id="特殊类型" tabindex="-1"><a class="header-anchor" href="#特殊类型" aria-hidden="true">#</a> 特殊类型</h3><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">关键字</th></tr></thead><tbody><tr><td style="text-align:left;">地理类型</td><td style="text-align:left;">geo_point</td></tr><tr><td style="text-align:left;">地理图形类型</td><td style="text-align:left;">geo_shape</td></tr><tr><td style="text-align:left;">IP 类型</td><td style="text-align:left;">ip</td></tr><tr><td style="text-align:left;">范围类型</td><td style="text-align:left;">completion</td></tr><tr><td style="text-align:left;">令牌计数类型</td><td style="text-align:left;">token_count</td></tr><tr><td style="text-align:left;">附件类型</td><td style="text-align:left;">attachment</td></tr><tr><td style="text-align:left;">抽取类型</td><td style="text-align:left;">percolator</td></tr></tbody></table><h3 id="mapping-属性" tabindex="-1"><a class="header-anchor" href="#mapping-属性" aria-hidden="true">#</a> Mapping 属性</h3><p>Elasticsearch 的 mapping 中的字段属性非常多，具体如下表格：</p><p>| 属性名 | 描述 |<br> | :- | :- | |<br> | <strong><em><code>type</code></em></strong> | 字段类型，常用的有 text、integer 等等。 |<br> | <strong><em><code>index</code></em></strong> | 当前字段是否被作为索引。可选值为 <strong><em><code>true</code></em></strong>，默认为 true。 |<br> | <strong><em><code>store</code></em></strong> | 是否存储指定字段，可选值为 <strong><em><code>true</code></em></strong> | <strong><em><code>false</code></em></strong>，设置 true 意味着需要开辟单独的存储空间为这个字段做存储，而且这个存储是独立于 <strong><em><code>_source</code></em></strong> 的存储的。 |<br> | <strong><em><code>norms</code></em></strong> | 是否使用归一化因子，可选值为 <strong><em><code>true</code></em></strong> | <strong><em><code>false</code></em></strong>，不需要对某字段进行打分排序时，可禁用它，节省空间；<em>type</em> 为 <em>text</em> 时，默认为 <em>true</em>；而 <em>type</em> 为 <em>keyword</em> 时，默认为 <em>false</em>。 |<br> | <strong><em><code>index_options</code></em></strong> | 索引选项控制添加到倒排索引（Inverted Index）的信息，这些信息用于搜索（Search）和高亮显示：<strong><em><code>docs</code></em></strong>：只索引文档编号(Doc Number)；<strong><em><code>freqs</code></em></strong>：索引文档编号和词频率（term frequency）；<strong><em><code>positions</code></em></strong>：索引文档编号，词频率和词位置（序号）；<strong><em><code>offsets</code></em></strong>：索引文档编号，词频率，词偏移量（开始和结束位置）和词位置（序号）。默认情况下，被分析的字符串（analyzed string）字段使用 <em>positions</em>，其他字段默认使用 <em>docs</em>。此外，需要注意的是 <em>index_option</em> 是 elasticsearch 特有的设置属性；临近搜索和短语查询时，<em>index_option</em> 必须设置为 <em>offsets</em>，同时高亮也可使用 postings highlighter。 |<br> | <strong><em><code>term_vector</code></em></strong> | 索引选项控制词向量相关信息：<strong><em><code>no</code></em></strong>：默认值，表示不存储词向量相关信息；<strong><em><code>yes</code></em></strong>：只存储词向量信息；<strong><em><code>with_positions</code></em></strong>：存储词项和词项位置；<strong><em><code>with_offsets</code></em></strong>：存储词项和字符偏移位置；<strong><em><code>with_positions_offsets</code></em></strong>：存储词项、词项位置、字符偏移位置。<em>term_vector</em> 是 lucene 层面的索引设置。 |<br> | <strong><em><code>similarity</code></em></strong> | 指定文档相似度算法（也可以叫评分模型）：<strong><em><code>BM25</code></em></strong>：ES 5 之后的默认设置。 |<br> | <strong><em><code>copy_to</code></em></strong> | 复制到自定义 _all 字段，值是数组形式，即表明可以指定多个自定义的字段。 |<br> | <strong><em><code>analyzer</code></em></strong> | 指定索引和搜索时的分析器，如果同时指定 <em>search_analyzer</em> 则搜索时会优先使用 <em>search_analyzer</em>。 |<br> | <strong><em><code>search_analyzer</code></em></strong> | 指定搜索时的分析器，搜索时的优先级最高。 |<br> | <strong><em><code>null_value</code></em></strong> | 用于需要对 Null 值实现搜索的场景，只有 Keyword 类型支持此配置。 |</p><h2 id="索引查询" tabindex="-1"><a class="header-anchor" href="#索引查询" aria-hidden="true">#</a> 索引查询</h2><h3 id="多个-index、多个-type-查询" tabindex="-1"><a class="header-anchor" href="#多个-index、多个-type-查询" aria-hidden="true">#</a> 多个 index、多个 type 查询</h3><p>Elasticsearch 的搜索 api 支持<strong>一个索引（index）的多个类型（type）查询</strong>以及**多个索引（index）**的查询。</p><p>例如，我们可以搜索 twitter 索引下面所有匹配条件的所有类型中文档，如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>GET /twitter/_search?q<span class="token operator">=</span>user:shay
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们也可以搜索一个索引下面指定多个 type 下匹配条件的文档，如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>GET /twitter/tweet,user/_search?q<span class="token operator">=</span>user:banon
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们也可以搜索多个索引下匹配条件的文档，如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>GET /twitter,elasticsearch/_search?q<span class="token operator">=</span>tags:wow
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此外我们也可以搜索所有索引下匹配条件的文档，用_all 表示所有索引，如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>GET /_all/_search?q<span class="token operator">=</span>tags:wow
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>甚至我们可以搜索所有索引及所有 type 下匹配条件的文档，如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>GET /_search?q<span class="token operator">=</span>tags:wow
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="uri-搜索" tabindex="-1"><a class="header-anchor" href="#uri-搜索" aria-hidden="true">#</a> URI 搜索</h3><p>Elasticsearch 支持用 uri 搜索，可用 get 请求里面拼接相关的参数，并用 curl 相关的命令就可以进行测试。</p><p>如下有一个示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>GET twitter/_search?q<span class="token operator">=</span>user:kimchy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如下是上一个请求的相应实体：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;timed_out&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token property">&quot;took&quot;</span><span class="token operator">:</span> <span class="token number">62</span><span class="token punctuation">,</span>
  <span class="token property">&quot;_shards&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;total&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token property">&quot;successful&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token property">&quot;skipped&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">&quot;failed&quot;</span><span class="token operator">:</span> <span class="token number">0</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;hits&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;total&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token property">&quot;max_score&quot;</span><span class="token operator">:</span> <span class="token number">1.3862944</span><span class="token punctuation">,</span>
    <span class="token property">&quot;hits&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token property">&quot;_index&quot;</span><span class="token operator">:</span> <span class="token string">&quot;twitter&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;_type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;_doc&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;_id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;_score&quot;</span><span class="token operator">:</span> <span class="token number">1.3862944</span><span class="token punctuation">,</span>
        <span class="token property">&quot;_source&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token property">&quot;user&quot;</span><span class="token operator">:</span> <span class="token string">&quot;kimchy&quot;</span><span class="token punctuation">,</span>
          <span class="token property">&quot;date&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2009-11-15T14:12:12&quot;</span><span class="token punctuation">,</span>
          <span class="token property">&quot;message&quot;</span><span class="token operator">:</span> <span class="token string">&quot;trying out Elasticsearch&quot;</span><span class="token punctuation">,</span>
          <span class="token property">&quot;likes&quot;</span><span class="token operator">:</span> <span class="token number">0</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>URI 中允许的参数：</p><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">q</td><td style="text-align:left;">查询字符串，映射到 query_string 查询</td></tr><tr><td style="text-align:left;">df</td><td style="text-align:left;">在查询中未定义字段前缀时使用的默认字段</td></tr><tr><td style="text-align:left;">analyzer</td><td style="text-align:left;">查询字符串时指定的分词器</td></tr><tr><td style="text-align:left;">analyze_wildcard</td><td style="text-align:left;">是否允许通配符和前缀查询，默认设置为 false</td></tr><tr><td style="text-align:left;">batched_reduce_size</td><td style="text-align:left;">应在协调节点上一次减少的分片结果数。如果请求中潜在的分片数量很大，则应将此值用作保护机制，以减少每个搜索请求的内存开销</td></tr><tr><td style="text-align:left;">default_operator</td><td style="text-align:left;">默认使用的匹配运算符，可以是<em>AND</em>或者<em>OR</em>，默认是<em>OR</em></td></tr><tr><td style="text-align:left;">lenient</td><td style="text-align:left;">如果设置为 true，将会忽略由于格式化引起的问题（如向数据字段提供文本），默认为 false</td></tr><tr><td style="text-align:left;">explain</td><td style="text-align:left;">对于每个 hit，包含了具体如何计算得分的解释</td></tr><tr><td style="text-align:left;">_source</td><td style="text-align:left;">请求文档内容的参数，默认 true；设置 false 的话，不返回_source 字段，可以使用**_source_include<strong>和</strong>_source_exclude**参数分别指定返回字段和不返回的字段</td></tr><tr><td style="text-align:left;">stored_fields</td><td style="text-align:left;">指定每个匹配返回的文档中的存储字段，多个用逗号分隔。不指定任何值将导致没有字段返回</td></tr><tr><td style="text-align:left;">sort</td><td style="text-align:left;">排序方式，可以是<em>fieldName</em>、<em>fieldName:asc</em>或者<em>fieldName:desc</em>的形式。fieldName 可以是文档中的实际字段，也可以是诸如_score 字段，其表示基于分数的排序。此外可以指定多个 sort 参数（顺序很重要）</td></tr><tr><td style="text-align:left;">track_scores</td><td style="text-align:left;">当排序时，若设置 true，返回每个命中文档的分数</td></tr><tr><td style="text-align:left;">track_total_hits</td><td style="text-align:left;">是否返回匹配条件命中的总文档数，默认为 true</td></tr><tr><td style="text-align:left;">timeout</td><td style="text-align:left;">设置搜索的超时时间，默认无超时时间</td></tr><tr><td style="text-align:left;">terminate_after</td><td style="text-align:left;">在达到查询终止条件之前，指定每个分片收集的最大文档数。如果设置，则在响应中多了一个 terminated_early 的布尔字段，以指示查询执行是否实际上已终止。默认为 no terminate_after</td></tr><tr><td style="text-align:left;">from</td><td style="text-align:left;">从第几条（索引以 0 开始）结果开始返回，默认为 0</td></tr><tr><td style="text-align:left;">size</td><td style="text-align:left;">返回命中的文档数，默认为 10</td></tr><tr><td style="text-align:left;">search_type</td><td style="text-align:left;">搜索的方式，可以是<em>dfs_query_then_fetch</em>或<em>query_then_fetch</em>。默认为<em>query_then_fetch</em></td></tr><tr><td style="text-align:left;">allow_partial_search_results</td><td style="text-align:left;">是否可以返回部分结果。如设置为 false，表示如果请求产生部分结果，则设置为返回整体故障；默认为 true，表示允许请求在超时或部分失败的情况下获得部分结果</td></tr></tbody></table><h3 id="查询流程" tabindex="-1"><a class="header-anchor" href="#查询流程" aria-hidden="true">#</a> 查询流程</h3><p>在 Elasticsearch 中，查询是一个比较复杂的执行模式，因为我们不知道那些 document 会被匹配到，任何一个 shard 上都有可能，所以一个 search 请求必须查询一个索引或多个索引里面的所有 shard 才能完整的查询到我们想要的结果。</p><p>找到所有匹配的结果是查询的第一步，来自多个 shard 上的数据集在分页返回到客户端之前会被合并到一个排序后的 list 列表，由于需要经过一步取 top N 的操作，所以 search 需要进过两个阶段才能完成，分别是 query 和 fetch。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,58),q={href:"https://www.elastic.co/",target:"_blank",rel:"noopener noreferrer"},y={href:"https://www.knowledgedict.com/tutorial/elasticsearch-index-mapping.html",target:"_blank",rel:"noopener noreferrer"};function f(x,_){const t=i("ExternalLinkIcon");return o(),p("div",null,[r,s("p",null,[n("ES 索引别名有个典型的应用场景是平滑切换，更多细节可以查看 "),s("a",d,[n("Elasticsearch（ES）索引零停机（无需重启）无缝平滑切换的方法"),a(t)]),n("。")]),u,s("ul",null,[m,s("li",null,[g,n("：执行新索引数据的刷新操作频率，该操作使对索引的最新更改对搜索可见，默认为 "),k,n("。也可以设置为 "),v,n(" 以禁用刷新。更详细信息参考 "),s("a",b,[n("Elasticsearch 动态修改 refresh_interval 刷新间隔设置"),a(t)]),n("。")])]),h,s("ul",null,[s("li",null,[s("a",q,[n("Elasticsearch 官网"),a(t)])]),s("li",null,[s("a",y,[n("Elasticsearch 索引映射类型及 mapping 属性详解"),a(t)])])])])}const T=l(c,[["render",f],["__file","04.Elasticsearch索引.html.vue"]]);export{T as default};
