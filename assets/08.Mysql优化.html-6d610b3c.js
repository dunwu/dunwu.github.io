const e=JSON.parse('{"key":"v-3b1a87b8","path":"/12.%E6%95%B0%E6%8D%AE%E5%BA%93/03.%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/02.Mysql/08.Mysql%E4%BC%98%E5%8C%96.html","title":"Mysql 优化","lang":"zh-CN","frontmatter":{"title":"Mysql 优化","date":"2020-06-03T20:16:48.000Z","order":"08","category":["数据库","关系型数据库","Mysql"],"tag":["数据库","关系型数据库","Mysql","优化"],"description":"Mysql 优化 数据结构优化 良好的逻辑设计和物理设计是高性能的基石。 数据类型优化 数据类型优化基本原则 更小的通常更好 - 越小的数据类型通常会更快，占用更少的磁盘、内存，处理时需要的 CPU 周期也更少。 例如：整型比字符类型操作代价低，因而会使用整型来存储 IP 地址，使用 DATETIME 来存储时间，而不是使用字符串。 简单就好 - 如整型比字符型操作代价低。 例如：很多软件会用整型来存储 IP 地址。 例如：UNSIGNED 表示不允许负值，大致可以使正数的上限提高一倍。 尽量避免 NULL - 可为 NULL 的列会使得索引、索引统计和值比较都更复杂。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/12.%E6%95%B0%E6%8D%AE%E5%BA%93/03.%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/02.Mysql/08.Mysql%E4%BC%98%E5%8C%96.html"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"Mysql 优化"}],["meta",{"property":"og:description","content":"Mysql 优化 数据结构优化 良好的逻辑设计和物理设计是高性能的基石。 数据类型优化 数据类型优化基本原则 更小的通常更好 - 越小的数据类型通常会更快，占用更少的磁盘、内存，处理时需要的 CPU 周期也更少。 例如：整型比字符类型操作代价低，因而会使用整型来存储 IP 地址，使用 DATETIME 来存储时间，而不是使用字符串。 简单就好 - 如整型比字符型操作代价低。 例如：很多软件会用整型来存储 IP 地址。 例如：UNSIGNED 表示不允许负值，大致可以使正数的上限提高一倍。 尽量避免 NULL - 可为 NULL 的列会使得索引、索引统计和值比较都更复杂。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-21T14:54:54.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"数据库"}],["meta",{"property":"article:tag","content":"关系型数据库"}],["meta",{"property":"article:tag","content":"Mysql"}],["meta",{"property":"article:tag","content":"优化"}],["meta",{"property":"article:published_time","content":"2020-06-03T20:16:48.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-21T14:54:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Mysql 优化\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-06-03T20:16:48.000Z\\",\\"dateModified\\":\\"2023-09-21T14:54:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io\\"}]}"]]},"headers":[{"level":2,"title":"数据结构优化","slug":"数据结构优化","link":"#数据结构优化","children":[{"level":3,"title":"数据类型优化","slug":"数据类型优化","link":"#数据类型优化","children":[]},{"level":3,"title":"表设计","slug":"表设计","link":"#表设计","children":[]},{"level":3,"title":"范式和反范式","slug":"范式和反范式","link":"#范式和反范式","children":[]},{"level":3,"title":"索引优化","slug":"索引优化","link":"#索引优化","children":[]}]},{"level":2,"title":"SQL 优化","slug":"sql-优化","link":"#sql-优化","children":[{"level":3,"title":"优化 COUNT() 查询","slug":"优化-count-查询","link":"#优化-count-查询","children":[]},{"level":3,"title":"优化关联查询","slug":"优化关联查询","link":"#优化关联查询","children":[]},{"level":3,"title":"优化 GROUP BY 和 DISTINCT","slug":"优化-group-by-和-distinct","link":"#优化-group-by-和-distinct","children":[]},{"level":3,"title":"优化 LIMIT","slug":"优化-limit","link":"#优化-limit","children":[]},{"level":3,"title":"优化 UNION","slug":"优化-union","link":"#优化-union","children":[]},{"level":3,"title":"优化查询方式","slug":"优化查询方式","link":"#优化查询方式","children":[]}]},{"level":2,"title":"执行计划（EXPLAIN）","slug":"执行计划-explain","link":"#执行计划-explain","children":[]},{"level":2,"title":"optimizer trace","slug":"optimizer-trace","link":"#optimizer-trace","children":[]},{"level":2,"title":"数据模型和业务","slug":"数据模型和业务","link":"#数据模型和业务","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1695308094000,"updatedTime":1695308094000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":1}]},"readingTime":{"minutes":14.87,"words":4462},"filePathRelative":"12.数据库/03.关系型数据库/02.Mysql/08.Mysql优化.md","localizedDate":"2020年6月3日","excerpt":"<h1> Mysql 优化</h1>\\n<h2> 数据结构优化</h2>\\n<p>良好的逻辑设计和物理设计是高性能的基石。</p>\\n<h3> 数据类型优化</h3>\\n<h4> 数据类型优化基本原则</h4>\\n<ul>\\n<li><strong>更小的通常更好</strong> - 越小的数据类型通常会更快，占用更少的磁盘、内存，处理时需要的 CPU 周期也更少。\\n<ul>\\n<li>例如：整型比字符类型操作代价低，因而会使用整型来存储 IP 地址，使用 <code>DATETIME</code> 来存储时间，而不是使用字符串。</li>\\n</ul>\\n</li>\\n<li><strong>简单就好</strong> - 如整型比字符型操作代价低。\\n<ul>\\n<li>例如：很多软件会用整型来存储 IP 地址。</li>\\n<li>例如：<strong><code>UNSIGNED</code> 表示不允许负值，大致可以使正数的上限提高一倍</strong>。</li>\\n</ul>\\n</li>\\n<li><strong>尽量避免 NULL</strong> - 可为 NULL 的列会使得索引、索引统计和值比较都更复杂。</li>\\n</ul>","autoDesc":true}');export{e as data};
