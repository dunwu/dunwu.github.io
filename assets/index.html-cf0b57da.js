const e=JSON.parse('{"key":"v-788272e6","path":"/pages/e1881c/","title":"分布式事务基本原理","lang":"zh-CN","frontmatter":{"title":"分布式事务基本原理","date":"2019-06-21T11:30:00.000Z","category":["分布式","分布式协同","分布式协同综合"],"tag":["分布式","数据调度","事务","2PC","TCC","本地消息表","MQ事务消息","SAGA"],"permalink":"/pages/e1881c/","description":"分布式事务基本原理 分布式事务指的是事务操作跨越多个节点，并且要求满足事务的 ACID 特性。 分布式事务简介 ACID ACID 是数据库事务正确执行的四个基本要素。 原子性（Atomicity） 事务被视为不可分割的最小单元，事务中的所有操作要么全部提交成功，要么全部失败回滚。 回滚可以用日志来实现，日志记录着事务所执行的修改操作，在回滚时反向执行这些修改操作即可。 一致性（Consistency） 数据库在事务执行前后都保持一致性状态。 在一致性状态下，所有事务对一个数据的读取结果都是相同的。 隔离性（Isolation） 一个事务所做的修改在最终提交以前，对其它事务是不可见的。 持久性（Durability） 一旦事务提交，则其所做的修改将会永远保存到数据库中。即使系统发生崩溃，事务执行的结果也不能丢失。 可以通过数据库备份和恢复来实现，在系统发生奔溃时，使用备份的数据库进行数据恢复。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/pages/e1881c/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"分布式事务基本原理"}],["meta",{"property":"og:description","content":"分布式事务基本原理 分布式事务指的是事务操作跨越多个节点，并且要求满足事务的 ACID 特性。 分布式事务简介 ACID ACID 是数据库事务正确执行的四个基本要素。 原子性（Atomicity） 事务被视为不可分割的最小单元，事务中的所有操作要么全部提交成功，要么全部失败回滚。 回滚可以用日志来实现，日志记录着事务所执行的修改操作，在回滚时反向执行这些修改操作即可。 一致性（Consistency） 数据库在事务执行前后都保持一致性状态。 在一致性状态下，所有事务对一个数据的读取结果都是相同的。 隔离性（Isolation） 一个事务所做的修改在最终提交以前，对其它事务是不可见的。 持久性（Durability） 一旦事务提交，则其所做的修改将会永远保存到数据库中。即使系统发生崩溃，事务执行的结果也不能丢失。 可以通过数据库备份和恢复来实现，在系统发生奔溃时，使用备份的数据库进行数据恢复。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-08T15:41:08.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"分布式"}],["meta",{"property":"article:tag","content":"数据调度"}],["meta",{"property":"article:tag","content":"事务"}],["meta",{"property":"article:tag","content":"2PC"}],["meta",{"property":"article:tag","content":"TCC"}],["meta",{"property":"article:tag","content":"本地消息表"}],["meta",{"property":"article:tag","content":"MQ事务消息"}],["meta",{"property":"article:tag","content":"SAGA"}],["meta",{"property":"article:published_time","content":"2019-06-21T11:30:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-08T15:41:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"分布式事务基本原理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-06-21T11:30:00.000Z\\",\\"dateModified\\":\\"2023-09-08T15:41:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io\\"}]}"]]},"headers":[{"level":2,"title":"分布式事务简介","slug":"分布式事务简介","link":"#分布式事务简介","children":[{"level":3,"title":"ACID","slug":"acid","link":"#acid","children":[]},{"level":3,"title":"本地事务和分布式事务","slug":"本地事务和分布式事务","link":"#本地事务和分布式事务","children":[]},{"level":3,"title":"CAP 和 BASE","slug":"cap-和-base","link":"#cap-和-base","children":[]},{"level":3,"title":"柔性事务","slug":"柔性事务","link":"#柔性事务","children":[]}]},{"level":2,"title":"两阶段提交（2PC）","slug":"两阶段提交-2pc","link":"#两阶段提交-2pc","children":[{"level":3,"title":"方案简介","slug":"方案简介","link":"#方案简介","children":[]},{"level":3,"title":"处理流程","slug":"处理流程","link":"#处理流程","children":[]},{"level":3,"title":"方案总结","slug":"方案总结","link":"#方案总结","children":[]}]},{"level":2,"title":"三阶段提交（3PC）","slug":"三阶段提交-3pc","link":"#三阶段提交-3pc","children":[{"level":3,"title":"方案简介","slug":"方案简介-1","link":"#方案简介-1","children":[]},{"level":3,"title":"处理流程","slug":"处理流程-1","link":"#处理流程-1","children":[]},{"level":3,"title":"方案总结","slug":"方案总结-1","link":"#方案总结-1","children":[]}]},{"level":2,"title":"补偿事务（TCC）","slug":"补偿事务-tcc","link":"#补偿事务-tcc","children":[{"level":3,"title":"方案简介","slug":"方案简介-2","link":"#方案简介-2","children":[]},{"level":3,"title":"处理流程","slug":"处理流程-2","link":"#处理流程-2","children":[]},{"level":3,"title":"方案总结","slug":"方案总结-2","link":"#方案总结-2","children":[]}]},{"level":2,"title":"本地消息表","slug":"本地消息表","link":"#本地消息表","children":[{"level":3,"title":"方案简介","slug":"方案简介-3","link":"#方案简介-3","children":[]},{"level":3,"title":"处理流程","slug":"处理流程-3","link":"#处理流程-3","children":[]},{"level":3,"title":"方案总结","slug":"方案总结-3","link":"#方案总结-3","children":[]}]},{"level":2,"title":"MQ 事务","slug":"mq-事务","link":"#mq-事务","children":[{"level":3,"title":"RocketMQ 事务消息流程","slug":"rocketmq-事务消息流程","link":"#rocketmq-事务消息流程","children":[]},{"level":3,"title":"MQ 事务方案总结","slug":"mq-事务方案总结","link":"#mq-事务方案总结","children":[]}]},{"level":2,"title":"SAGA","slug":"saga","link":"#saga","children":[{"level":3,"title":"方案简介","slug":"方案简介-4","link":"#方案简介-4","children":[]},{"level":3,"title":"处理流程","slug":"处理流程-4","link":"#处理流程-4","children":[]},{"level":3,"title":"方案总结","slug":"方案总结-4","link":"#方案总结-4","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[{"level":3,"title":"各方案使用场景","slug":"各方案使用场景","link":"#各方案使用场景","children":[]},{"level":3,"title":"分布式事务方案设计","slug":"分布式事务方案设计","link":"#分布式事务方案设计","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1694186720000,"updatedTime":1694187668000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":2}]},"readingTime":{"minutes":31.7,"words":9510},"filePathRelative":"15.分布式/11.分布式协同/01.分布式协同综合/05.分布式事务.md","localizedDate":"2019年6月21日","excerpt":"<h1> 分布式事务基本原理</h1>\\n<blockquote>\\n<p><strong>分布式事务指的是事务操作跨越多个节点，并且要求满足事务的 ACID 特性。</strong></p>\\n</blockquote>\\n<h2> 分布式事务简介</h2>\\n<h3> ACID</h3>\\n<p>ACID 是数据库事务正确执行的四个基本要素。</p>\\n<ul>\\n<li><strong>原子性（Atomicity）</strong>\\n<ul>\\n<li>事务被视为不可分割的最小单元，事务中的所有操作要么全部提交成功，要么全部失败回滚。</li>\\n<li>回滚可以用日志来实现，日志记录着事务所执行的修改操作，在回滚时反向执行这些修改操作即可。</li>\\n</ul>\\n</li>\\n<li><strong>一致性（Consistency）</strong>\\n<ul>\\n<li>数据库在事务执行前后都保持一致性状态。</li>\\n<li>在一致性状态下，所有事务对一个数据的读取结果都是相同的。</li>\\n</ul>\\n</li>\\n<li><strong>隔离性（Isolation）</strong>\\n<ul>\\n<li>一个事务所做的修改在最终提交以前，对其它事务是不可见的。</li>\\n</ul>\\n</li>\\n<li><strong>持久性（Durability）</strong>\\n<ul>\\n<li>一旦事务提交，则其所做的修改将会永远保存到数据库中。即使系统发生崩溃，事务执行的结果也不能丢失。</li>\\n<li>可以通过数据库备份和恢复来实现，在系统发生奔溃时，使用备份的数据库进行数据恢复。</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{e as data};
