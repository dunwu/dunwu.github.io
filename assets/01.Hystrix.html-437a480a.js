import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as l,c,a as n,b as s,d as t,e}from"./app-4c6ca41d.js";const p={},r=e(`<h1 id="hystrix-快速入门" tabindex="-1"><a class="header-anchor" href="#hystrix-快速入门" aria-hidden="true">#</a> Hystrix 快速入门</h1><h2 id="一、hystrix-简介" tabindex="-1"><a class="header-anchor" href="#一、hystrix-简介" aria-hidden="true">#</a> 一、Hystrix 简介</h2><h3 id="hystrix-是什么" tabindex="-1"><a class="header-anchor" href="#hystrix-是什么" aria-hidden="true">#</a> Hystrix 是什么</h3><p>Hystrix 是 Netflix 开源的一款容错框架，包含常用的容错方法：线程池隔离、信号量隔离、熔断、降级。</p><p>Hystrix 官方宣布<strong>不再发布新版本</strong>。</p><p>但是 Hystrix 的客户端熔断保护，断路器设计理念，有非常高的学习价值。</p><h3 id="为什么需要-hystrix" tabindex="-1"><a class="header-anchor" href="#为什么需要-hystrix" aria-hidden="true">#</a> 为什么需要 Hystrix</h3><p>复杂的分布式系统架构中的应用程序往往具有数十个依赖项，每个依赖项都会不可避免地在某个时刻失败。 如果主机应用程序未与这些外部故障隔离开来，则可能会被波及。</p><p>例如，对于依赖于 30 个服务的应用程序，假设每个服务的正常运行时间为 99.99％，则可以期望：</p><blockquote><p>99.99<sup>30</sup> = 99.7％ 的正常运行时间</p><p>10 亿个请求中的 0.3％= 3,000,000 个失败</p><p>即使所有依赖项都具有出色的正常运行时间，每月也会有 2 个小时以上的停机时间。</p><p>然而，现实情况一般比这种估量情况更糟糕。</p></blockquote><hr><p>当一切正常时，整体系统如下所示：</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20200717141615.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>在高并发场景，这些依赖的稳定性与否对系统的影响非常大，但是依赖有很多不可控问题：如网络连接、资源繁忙、服务宕机等。例如：下图中有一个 QPS 为 50 的依赖 I 出现不可用，但是其他依赖服务是可用的。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20200717141749.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>但是，在高并发场景下，当依赖 I 阻塞时，大多数服务器的线程池就出现阻塞(BLOCK)。当这种级联故障愈演愈烈，就可能造成整个线上服务不可用的雪崩效应，如下图：</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20200717141859.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>Hystrix 就是为了解决这类问题而应运而生。</p><h3 id="hystrix-的功能" tabindex="-1"><a class="header-anchor" href="#hystrix-的功能" aria-hidden="true">#</a> Hystrix 的功能</h3><p>Hystrix 具有以下功能：</p><ul><li>避免资源耗尽：阻止任何一个依赖服务耗尽所有的资源，比如 tomcat 中的所有线程资源。</li><li>避免请求排队和积压：采用限流和 <code>fail fast</code> 来控制故障。</li><li>支持降级：提供 fallback 降级机制来应对故障。</li><li>资源隔离：比如 <code>bulkhead</code>（舱壁隔离技术）、<code>swimlane</code>（泳道技术）、<code>circuit breaker</code>（断路技术）来限制任何一个依赖服务的故障的影响。</li><li>统计/监控/报警：通过近实时的统计/监控/报警功能，来提高故障发现的速度。</li><li>通过近实时的属性和配置<strong>热修改</strong>功能，来提高故障处理和恢复的速度。</li><li>保护依赖服务调用的所有故障情况，而不仅仅只是网络故障情况。</li></ul><p>如果使用 Hystrix 对每个基础依赖服务进行过载保护，则整个系统架构将会类似下图所示，每个依赖项彼此隔离，受到延迟时发生饱和的资源的被限制访问，并包含 fallback 逻辑（用于降级处理），该逻辑决定了在依赖项中发生任何类型的故障时做出对应的处理。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20200717142842.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="hystrix-核心概念" tabindex="-1"><a class="header-anchor" href="#hystrix-核心概念" aria-hidden="true">#</a> Hystrix 核心概念</h2><h2 id="二、hystrix-工作流程" tabindex="-1"><a class="header-anchor" href="#二、hystrix-工作流程" aria-hidden="true">#</a> 二、Hystrix 工作流程</h2><p>如下图所示，Hystrix 的工作流程大致可以分为 9 个步骤。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20200717143247.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="一-包装命令" tabindex="-1"><a class="header-anchor" href="#一-包装命令" aria-hidden="true">#</a> （一）包装命令</h3><p>x 支持资源隔离。</p><p>资源隔离，就是说，你如果要把对某一个依赖服务的所有调用请求，全部隔离在同一份资源池内，不会去用其它资源了，这就叫资源隔离。哪怕对这个依赖服务，比如说商品服务，现在同时发起的调用量已经到了 1000，但是分配给商品服务线程池内就 10 个线程，最多就只会用这 10 个线程去执行。不会因为对商品服务调用的延迟，将 Tomcat 内部所有的线程资源全部耗尽。</p><p>Hystrix 进行资源隔离，其实是提供了一个抽象，叫做命令模式。这也是 Hystrix 最最基本的资源隔离技术。</p><p>在使用 Hystrix 的过程中，会对<strong>依赖服务</strong>的调用请求封装成<strong>命令对象</strong>，Hystrix 对 <strong>命令对象</strong>抽象了两个抽象类：<code>HystrixCommand</code> 和<code>HystrixObservableCommand</code> 。</p><ul><li><code>HystrixCommand</code> 表示的<strong>命令对象</strong>会返回一个唯一返回值。</li><li><code>HystrixObservableCommand</code> 表示的<strong>命令对象</strong> 会返回多个返回值。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">HystrixCommand</span> command <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HystrixCommand</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">HystrixObservableCommand</span> command <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HystrixObservableCommand</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二-执行命令" tabindex="-1"><a class="header-anchor" href="#二-执行命令" aria-hidden="true">#</a> （二）执行命令</h3><p>Hystrix 中共有 4 种方式执行命令，如下所示：</p><table><thead><tr><th style="text-align:left;">执行方式</th><th style="text-align:left;">说明</th><th style="text-align:left;">可用对象</th></tr></thead><tbody><tr><td style="text-align:left;"><code>execute()</code></td><td style="text-align:left;">阻塞式同步执行，返回依赖服务的单一返回结果(或者抛出异常)</td><td style="text-align:left;"><code>HystrixCommand</code></td></tr><tr><td style="text-align:left;"><code>queue()</code></td><td style="text-align:left;">基于 Future 的异步方式执行，返回依赖服务的单一返回结果(或者抛出异常)</td><td style="text-align:left;"><code>HystrixCommand</code></td></tr><tr><td style="text-align:left;"><code>observe()</code></td><td style="text-align:left;">基于 Rxjava 的 Observable 方式，返回通过 Observable 表示的依赖服务返回结果,代调用代码先执行(Hot Obserable)</td><td style="text-align:left;"><code>HystrixObservableCommand</code></td></tr><tr><td style="text-align:left;"><code>toObvsevable</code></td><td style="text-align:left;">基于 Rxjava 的 Observable 方式，返回通过 Observable 表示的依赖服务返回结果,执行代码等到真正订阅的时候才会执行(cold observable)</td><td style="text-align:left;"><code>HystrixObservableCommand</code></td></tr></tbody></table><p>这四种命令中，<code>exeucte()</code>、<code>queue()</code>、<code>observe()</code>的表示也是通过<code>toObservable()</code>实现的，其转换关系如下图所示：</p><figure><img src="https:////upload-images.jianshu.io/upload_images/14126519-60964d9fa41614c1.png?imageMogr2/auto-orient/strip|imageView2/2/w/563/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><code>HystrixCommand</code> 执行方式</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">K</span> value   <span class="token operator">=</span> command<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 等价语句：</span>
<span class="token class-name">K</span> value <span class="token operator">=</span> command<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">&gt;</span></span> fValue  <span class="token operator">=</span> command<span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//等价语句：</span>
<span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">&gt;</span></span> fValue <span class="token operator">=</span> command<span class="token punctuation">.</span><span class="token function">toObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBlocking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">&gt;</span></span> ohValue <span class="token operator">=</span> command<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//hot observable，立刻订阅，命令立刻执行</span>
<span class="token comment">//等价语句：</span>
<span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">&gt;</span></span> ohValue <span class="token operator">=</span> command<span class="token punctuation">.</span><span class="token function">toObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 上述执行最终实现还是基于 toObservable()</span>
<span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">&gt;</span></span> ocValue <span class="token operator">=</span> command<span class="token punctuation">.</span><span class="token function">toObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//cold observable，延后订阅，订阅发生后，执行才真正执行</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三-是否缓存" tabindex="-1"><a class="header-anchor" href="#三-是否缓存" aria-hidden="true">#</a> （三）是否缓存</h3><p>如果当前命令对象配置了允许从<code>结果缓存</code>中取返回结果，并且在<code>结果缓存</code>中已经缓存了请求结果，则缓存的请求结果会立刻通过 <code>Observable</code> 的格式返回。</p><h3 id="四-是否开启断路器" tabindex="-1"><a class="header-anchor" href="#四-是否开启断路器" aria-hidden="true">#</a> （四）是否开启断路器</h3><p>如果第三步没有缓存没有命中，则判断一下当前断路器的断路状态是否打开。如果断路器状态为<code>打开</code>状态，则 <code>Hystrix</code> 将不会执行此 Command 命令，直接执行<strong>步骤 8</strong> 调用 Fallback；</p><p>如果断路器状态是<code>关闭</code>，则执行 <strong>步骤 5</strong> 检查是否有足够的资源运行 Command 命令</p><h3 id="五-信号量、线程池是否拒绝" tabindex="-1"><a class="header-anchor" href="#五-信号量、线程池是否拒绝" aria-hidden="true">#</a> （五）信号量、线程池是否拒绝</h3><p>如果当前要执行的 Command 命令 先关连的线程池 和队列(或者信号量)资源已经满了，Hystrix 将不会运行 Command 命令，直接执行 <strong>步骤 8</strong>的 Fallback 降级处理；如果未满，表示有剩余的资源执行 Command 命令，则执行<strong>步骤 6</strong></p><h3 id="六-construct-或-run" tabindex="-1"><a class="header-anchor" href="#六-construct-或-run" aria-hidden="true">#</a> （六）construct() 或 run()</h3><p>当经过<strong>步骤 5</strong> 判断，有足够的资源执行 Command 命令时，本步骤将调用 Command 命令运行方法，基于不同类型的 Command，有如下两种两种运行方式：</p><table><thead><tr><th style="text-align:left;">运行方式</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>HystrixCommand.run()</code></td><td style="text-align:left;">返回一个处理结果或者抛出一个异常</td></tr><tr><td style="text-align:left;"><code>HystrixObservableCommand.construct()</code></td><td style="text-align:left;">返回一个 Observable 表示的结果(可能多个)，或者 基于<code>onError</code>的错误通知</td></tr></tbody></table><p>如果<code>run()</code> 或者<code>construct()</code>方法 的<code>真实执行时间</code>超过了 Command 设置的<code>超时时间阈值</code>, 则<strong>当前则执行线程</strong>（或者是独立的定时器线程）将会抛出<code>TimeoutException</code>。抛出超时异常 TimeoutException，后，将执行<strong>步骤 8</strong>的 Fallback 降级处理。即使<code>run()</code>或者<code>construct()</code>执行没有被取消或中断，最终能够处理返回结果，但在降级处理逻辑中，将会抛弃<code>run()</code>或<code>construct()</code>方法的返回结果，而返回 Fallback 降级处理结果。</p><blockquote><p><strong>注意事项</strong><br> 需要注意的是，Hystrix 无法强制 将正在运行的线程停止掉--Hystrix 能够做的最好的方式就是在 JVM 中抛出一个<code>InterruptedException</code>。如果 Hystrix 包装的工作不抛出中断异常<code>InterruptedException</code>, 则在 Hystrix 线程池中的线程将会继续执行，尽管<code>调用的客户端</code>已经接收到了<code>TimeoutException</code>。这种方式会使 Hystrix 的线程池处于饱和状态。大部分的 Java Http Client 开源库并不会解析 <code>InterruptedException</code>。所以确认 HTTP client 相关的连接和读/写相关的超时时间设置。<br> 如果 Command 命令没有抛出任何异常，并且有返回结果，则 Hystrix 将会在做完日志记录和统计之后会将结果返回。 如果是通过<code>run()</code>方式运行，则返回一个<code>Obserable</code>对象，包含一个唯一值，并且发送一个<code>onCompleted</code>通知；如果是通过<code>consturct()</code>方式运行 ，则返回一个<code>Observable对象</code>。</p></blockquote><h3 id="七-健康检查" tabindex="-1"><a class="header-anchor" href="#七-健康检查" aria-hidden="true">#</a> （七）健康检查</h3><p>Hystrix 会统计 Command 命令执行执行过程中的<strong>成功数</strong>、<strong>失败数</strong>、<strong>拒绝数</strong>和<strong>超时数</strong>,将这些信息记录到<strong>断路器(Circuit Breaker)<strong>中。断路器将上述统计按照</strong>时间窗</strong>的形式记录到一个定长数组中。断路器根据时间窗内的统计数据去判定请求什么时候可以被熔断，熔断后，在接下来一段恢复周期内，相同的请求过来后会直接被熔断。当再次校验，如果健康监测通过后，熔断开关将会被关闭。</p><h3 id="八-获取-fallback" tabindex="-1"><a class="header-anchor" href="#八-获取-fallback" aria-hidden="true">#</a> （八）获取 Fallback</h3><p>当以下场景出现后，Hystrix 将会尝试触发 <code>Fallback</code>:</p><blockquote><ul><li>步骤 6 Command 执行时抛出了任何异常；</li><li>步骤 4 断路器已经被打开</li><li>步骤 5 执行命令的线程池、队列或者信号量资源已满</li><li>命令执行的时间超过阈值</li></ul></blockquote><h3 id="九-返回结果" tabindex="-1"><a class="header-anchor" href="#九-返回结果" aria-hidden="true">#</a> （九）返回结果</h3><p>如果 Hystrix 命令对象执行成功，将会返回结果，或者以<code>Observable</code>形式包装的结果。根据<strong>步骤 2</strong>的 command 调用方式，返回的<code>Observable</code> 会按照如下图说是的转换关系进行返回：</p><figure><img src="https:////upload-images.jianshu.io/upload_images/14126519-8790f97df332d9a2.png?imageMogr2/auto-orient/strip|imageView2/2/w/640/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li><code>execute()</code> — 用和 <code>.queue()</code> 相同的方式获取 <code>Future</code>，然后调用 <code>Future</code> 的 <code>get()</code> 以获取 <code>Observable</code> 的单个值。</li><li><code>queue()</code> —将 <code>Observable</code> 转换为 <code>BlockingObservable</code>，以便可以将其转换为 <code>Future</code> 并返回。</li><li><code>watch()</code> —订阅 <code>Observable</code> 并开始执行命令的流程； 返回一个 <code>Observable</code>，当订阅该 <code>Observable</code> 时，它会重新通知。</li><li><code>toObservable()</code> —返回不变的 <code>Observable</code>； 必须订阅它才能真正开始执行命令的流程。</li></ul><h2 id="三、断路器工作原理" tabindex="-1"><a class="header-anchor" href="#三、断路器工作原理" aria-hidden="true">#</a> 三、断路器工作原理</h2><figure><img src="https:////upload-images.jianshu.io/upload_images/14126519-dce007513bf90794.png?imageMogr2/auto-orient/strip|imageView2/2/w/640/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ol><li>断路器时间窗内的请求数 是否超过了<strong>请求数断路器生效阈值</strong><code>circuitBreaker.requestVolumeThreshold</code>,如果超过了阈值，则将会触发断路，断路状态为<strong>开启</strong><br> 例如，如果当前阈值设置的是<code>20</code>,则当时间窗内统计的请求数共计 19 个，即使 19 个全部失败了，都不会触发断路器。</li><li>并且请求错误率超过了<strong>请求错误率阈值</strong><code>errorThresholdPercentage</code></li><li>如果两个都满足，则将断路器由<strong>关闭</strong>迁移到<strong>开启</strong></li><li>如果断路器开启，则后续的所有相同请求将会被断路掉；</li><li>直到过了<strong>沉睡时间窗</strong><code>sleepWindowInMilliseconds</code>后，再发起请求时，允许其通过（此时的状态为<strong>半开起状态</strong>）。如果请求失败了，则保持断路器状态为<strong>开启</strong>状态，并更新<strong>沉睡时间窗</strong>。如果请求成功了，则将断路器状态改为<strong>关闭</strong>状态；</li></ol><p>核心的逻辑如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token annotation punctuation">@Override</span>
                        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token class-name">HealthCounts</span> hc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token comment">// check if we are past the statisticalWindowVolumeThreshold</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span>hc<span class="token punctuation">.</span><span class="token function">getTotalRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> properties<span class="token punctuation">.</span><span class="token function">circuitBreakerRequestVolumeThreshold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                <span class="token comment">// we are not past the minimum volume threshold for the stat window,</span>
                                <span class="token comment">// so no change to circuit status.</span>
                                <span class="token comment">// if it was CLOSED, it stays CLOSED</span>
                                <span class="token comment">// if it was half-open, we need to wait for a successful command execution</span>
                                <span class="token comment">// if it was open, we need to wait for sleep window to elapse</span>
                            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                                <span class="token keyword">if</span> <span class="token punctuation">(</span>hc<span class="token punctuation">.</span><span class="token function">getErrorPercentage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> properties<span class="token punctuation">.</span><span class="token function">circuitBreakerErrorThresholdPercentage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                    <span class="token comment">//we are not past the minimum error threshold for the stat window,</span>
                                    <span class="token comment">// so no change to circuit status.</span>
                                    <span class="token comment">// if it was CLOSED, it stays CLOSED</span>
                                    <span class="token comment">// if it was half-open, we need to wait for a successful command execution</span>
                                    <span class="token comment">// if it was open, we need to wait for sleep window to elapse</span>
                                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                                    <span class="token comment">// our failure rate is too high, we need to set the state to OPEN</span>
                                    <span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token class-name">Status</span><span class="token punctuation">.</span><span class="token constant">CLOSED</span><span class="token punctuation">,</span> <span class="token class-name">Status</span><span class="token punctuation">.</span><span class="token constant">OPEN</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                        circuitOpened<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                    <span class="token punctuation">}</span>
                                <span class="token punctuation">}</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="系统指标" tabindex="-1"><a class="header-anchor" href="#系统指标" aria-hidden="true">#</a> 系统指标</h3><p>Hystrix 对系统指标的统计是基于时间窗模式的：</p><blockquote><p><strong>时间窗</strong>：最近的一个时间区间内，比如前一小时到现在，那么时间窗的长度就是<code>1小时</code>；<br><strong>桶</strong>：桶是在特定的<strong>时间窗</strong>内，等分的指标收集的统计集合；比如时间窗的长度为<code>1小时</code>，而桶的数量为<code>10</code>,那么每个桶在时间轴上依次排开，时间由远及近，每个桶统计的时间分片为 <code>1h / 10 = 6 min</code> 6 分钟。一个桶中，包含了<code>成功数</code>、<code>失败数</code>、<code>超时数</code>、<code>拒绝数</code> 四个指标。</p></blockquote><p>在系统内，时间窗会随着系统的运行逐渐向前移动，而时间窗的长度和桶的数量是固定不变的，那么随着时间的移动，会出现较久的过期的桶被移除出去，新的桶被添加进来，如下图所示：</p><figure><img src="https:////upload-images.jianshu.io/upload_images/14126519-11710915e1a5dcda.png?imageMogr2/auto-orient/strip|imageView2/2/w/640/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="四、资源隔离技术" tabindex="-1"><a class="header-anchor" href="#四、资源隔离技术" aria-hidden="true">#</a> 四、资源隔离技术</h2><h3 id="线程池隔离" tabindex="-1"><a class="header-anchor" href="#线程池隔离" aria-hidden="true">#</a> 线程池隔离</h3><p>如下图所示，由于计算机系统的基本执行单位就是线程，线程具备独立的执行能力，所以，为了做到资源保护，需要对系统的线程池进行划分，对于外部调用方</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>User Request
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>的请求，调用各个线程池的服务，各个线程池独立完成调用，然后将结果返回</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>调用方
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>。在调用服务的过程中，如果</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>服务提供方
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行时间过长，则</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>调用方
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以直接以超时的方式直接返回，快速失败。</p><figure><img src="https:////upload-images.jianshu.io/upload_images/14126519-55a0be64ecac4cda.png?imageMogr2/auto-orient/strip|imageView2/2/w/640/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>线程池隔离的几点好处</p><blockquote><ol><li>使用超时返回的机制，避免同步调用服务时，调用时间过长，无法释放，导致资源耗尽的情况</li><li>服务方可以控制请求数量，请求过多，可以直接拒绝,达到快速失败的目的；</li><li>请求排队，线程池可以维护执行队列，将请求压到队列中处理</li></ol></blockquote><p>举个例子，如下代码段，模拟了同步调用服务的过程：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>        <span class="token comment">//服务提供方，执行服务的时候模拟2分钟的耗时</span>
        <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> callableService  <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
            <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token operator">&gt;</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
               <span class="token comment">//模拟服务执行时间过长的情况</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token string">&quot;OK&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token comment">//模拟10个客户端调用服务</span>
        <span class="token class-name">ExecutorService</span> clients <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//模拟给10个客户端提交处理请求</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            clients<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
                <span class="token comment">//同步调用</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token class-name">String</span> result <span class="token operator">=</span> callableService<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;当前客户端：&quot;</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;调用服务完成，得到结果：&quot;</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在此环节中，客户端 <code>clients</code>必须等待服务方返回结果之后，才能接收新的请求。如果用吞吐量来衡量系统的话，会发现系统的处理能力比较低。为了提高相应时间，可以借助线程池的方式，设置超时时间，这样的话，客户端就不需要必须等待服务方返回，如果时间过长，可以提前返回,改造后的代码如下所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token comment">//服务提供方，执行服务的时候模拟2分钟的耗时</span>
        <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> callableService  <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
            <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token operator">&gt;</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
               <span class="token comment">//模拟服务执行时间过长的情况</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token string">&quot;OK&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token comment">//创建线程池作为服务方</span>
        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token comment">//模拟10个客户端调用服务</span>
        <span class="token class-name">ExecutorService</span> clients <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            clients<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
                <span class="token comment">//同步调用</span>
                    <span class="token comment">//将请求提交给线程池执行，Callable 和 Runnable在某种意义上，也是Command对象</span>
                    <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>callableService<span class="token operator">::</span><span class="token function">call</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">//在指定的时间内获取结果，如果超时，调用方可以直接返回</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                        <span class="token class-name">String</span> result <span class="token operator">=</span> future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token comment">//客户端等待时间之后，快速返回</span>
                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;当前客户端：&quot;</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;调用服务完成，得到结果：&quot;</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TimeoutException</span> timeoutException<span class="token punctuation">)</span><span class="token punctuation">{</span>
                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;服务调用超时，返回处理&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>

                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们将服务方的线程池设置为：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ThreadPoolExecutor</span> executorService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span>
<span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>DiscardPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 提交请求过多时，可以丢弃请求，避免死等阻塞的情况。</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>线程池隔离模式的弊端</strong></p><blockquote><p>线程池隔离模式，会根据服务划分出独立的线程池，系统资源的线程并发数是有限的，当线程数过多，系统话费大量的 CPU 时间来做线程上下文切换的无用操作，反而降低系统性能；如果线程池隔离的过多，会导致真正用于接收用户请求的线程就相应地减少，系统吞吐量反而下降；<br><strong>在实践上，应当对像远程方法调用，网络资源请求这种服务时间不太可控的场景下使用线程池隔离模式处理</strong><br> 如下图所示，是线程池隔离模式的三种场景：</p></blockquote><figure><img src="https:////upload-images.jianshu.io/upload_images/14126519-8e16e7f8072475eb.png?imageMogr2/auto-orient/strip|imageView2/2/w/640/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="信号量隔离" tabindex="-1"><a class="header-anchor" href="#信号量隔离" aria-hidden="true">#</a> 信号量隔离</h3><p>由于基于线程池隔离的模式占用系统线程池资源，Hystrix 还提供了另外一个隔离技术：基于信号量的隔离。</p><p>基于信号量的隔离方式非常地简单，其核心就是使用共用变量</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>semaphore
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>进行原子操作，控制线程的并发量，当并发量达到一定量级时，服务禁止调用。如下图所示：信号量本身不会消耗多余的线程资源，所以就非常轻量。</p><figure><img src="https:////upload-images.jianshu.io/upload_images/14126519-9af3442e03df941e.png?imageMogr2/auto-orient/strip|imageView2/2/w/640/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>基于信号量隔离的利弊</p><blockquote><p>利：基于信号量的隔离，利用 JVM 的原子性 CAS 操作，避免了资源锁的竞争，省去了线程池开销，效率非常高；<br> 弊：本质上基于信号量的隔离是同步行为，所以无法做到超时熔断，所以服务方自身要控制住执行时间，避免超时。<br> 应用场景：<strong>业务服务上，有并发上限限制时，可以考虑此方式</strong> &gt; <code>Alibaba Sentinel</code>开源框架，就是基于信号量的熔断和断路器框架。</p></blockquote><h2 id="五、hystrix-应用" tabindex="-1"><a class="header-anchor" href="#五、hystrix-应用" aria-hidden="true">#</a> 五、Hystrix 应用</h2><h3 id="spring-cloud-hystrix" tabindex="-1"><a class="header-anchor" href="#spring-cloud-hystrix" aria-hidden="true">#</a> Spring Cloud + Hystrix</h3>`,105),u=n("strong",null,"Hystrix 配置无法动态调节生效",-1),d={href:"https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2FNetflix%2Farchaius",target:"_blank",rel:"noopener noreferrer"},m=n("li",null,[n("strong",null,"线程池和 Command 之间的配置比较复杂"),s(",在 Spring Cloud 在做 feigin-hystrix 集成的时候，还有些 BUG，对 command 的默认配置没有处理好，导致所有 command 占用公共的 command 线程池，没有细粒度控制，还需要做框架适配调整")],-1),k=e(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code>public interface SetterFactory {

  /**
   * Returns a hystrix setter appropriate for the given target and method
   */
  HystrixCommand.Setter create(Target<span class="token php language-php"><span class="token delimiter important">&lt;?</span><span class="token operator">&gt;</span> target<span class="token punctuation">,</span> Method method<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token doc-comment comment">/**
   * Default behavior is to derive the group key from <span class="token punctuation">{</span><span class="token keyword">@link</span> Target#name()<span class="token punctuation">}</span> and the command key from
   * <span class="token punctuation">{</span><span class="token keyword">@link</span> Feign#configKey(Class, Method)<span class="token punctuation">}</span>.
   */</span>
  <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">Default</span> <span class="token keyword">implements</span> <span class="token class-name">SetterFactory</span> <span class="token punctuation">{</span>

    @Override
    <span class="token keyword">public</span> HystrixCommand<span class="token operator">.</span>Setter <span class="token function">create</span><span class="token punctuation">(</span>Target<span class="token operator">&lt;</span><span class="token delimiter important">?&gt;</span></span> target, Method method) {
      String groupKey = target.name();
      String commandKey = Feign.configKey(target.type(), method);
      return HystrixCommand.Setter
          .withGroupKey(HystrixCommandGroupKey.Factory.asKey(groupKey))
          .andCommandKey(HystrixCommandKey.Factory.asKey(commandKey));
          //没有处理好default配置项的加载
    }
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="hystrix-配置" tabindex="-1"><a class="header-anchor" href="#hystrix-配置" aria-hidden="true">#</a> Hystrix 配置</h2>`,2),g={href:"https://github.com/Netflix/Hystrix/wiki/Configuration",target:"_blank",rel:"noopener noreferrer"},h=n("h3",{id:"执行配置",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#执行配置","aria-hidden":"true"},"#"),s(" 执行配置")],-1),b={href:"http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommand.html#run()",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"HystrixCommand.run()",-1),f=n("thead",null,[n("tr",null,[n("th",null,"配置项"),n("th",null,"说明"),n("th",null,"默认值")])],-1),x={href:"https://github.com/Netflix/Hystrix/wiki/Configuration#execution.isolation.strategy",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"execution.isolation.strategy",-1),y=n("td",null,"线程隔离（THREAD）或信号量隔离（SEMAPHORE）",-1),w=n("td",null,"THREAD",-1),H={href:"https://github.com/Netflix/Hystrix/wiki/Configuration#execution.isolation.thread.timeoutInMilliseconds",target:"_blank",rel:"noopener noreferrer"},C=n("code",null,"execution.isolation.thread.timeoutInMilliseconds",-1),S=n("td",null,"方法执行超时时间",-1),O=n("td",null,"1000(ms)",-1),T={href:"https://github.com/Netflix/Hystrix/wiki/Configuration#execution.isolation.semaphore.maxConcurrentRequests",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"execution.isolation.semaphore.maxConcurrentRequests",-1),j=n("td",null,"信号量隔离最大并发数",-1),E=n("td",null,"10",-1),M=n("h3",{id:"断路配置",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#断路配置","aria-hidden":"true"},"#"),s(" 断路配置")],-1),N={href:"http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixCircuitBreaker.html",target:"_blank",rel:"noopener noreferrer"},z=n("code",null,"HystrixCircuitBreaker",-1),F=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"配置项"),n("th",{style:{"text-align":"left"}},"说明"),n("th",{style:{"text-align":"left"}},"默认值")])],-1),B={style:{"text-align":"left"}},P={href:"https://github.com/Netflix/Hystrix/wiki/Configuration#circuitBreaker.enabled",target:"_blank",rel:"noopener noreferrer"},V=n("code",null,"circuitBreaker.enabled",-1),K=n("td",{style:{"text-align":"left"}},"是否开启断路器",-1),I=n("td",{style:{"text-align":"left"}},"true",-1),D={style:{"text-align":"left"}},R={href:"https://github.com/Netflix/Hystrix/wiki/Configuration#circuitBreaker.requestVolumeThreshold",target:"_blank",rel:"noopener noreferrer"},A=n("code",null,"circuitBreaker.requestVolumeThreshold",-1),L=n("td",{style:{"text-align":"left"}},"断路器启用请求数阈值",-1),Q=n("td",{style:{"text-align":"left"}},"20",-1),J={style:{"text-align":"left"}},U={href:"https://github.com/Netflix/Hystrix/wiki/Configuration#circuitBreaker.sleepWindowInMilliseconds",target:"_blank",rel:"noopener noreferrer"},G=n("code",null,"circuitBreaker.sleepWindowInMilliseconds",-1),W=n("td",{style:{"text-align":"left"}},"断路器启用后的休眠时间",-1),X=n("td",{style:{"text-align":"left"}},"5000(ms)",-1),Y={style:{"text-align":"left"}},Z={href:"https://github.com/Netflix/Hystrix/wiki/Configuration#circuitBreaker.errorThresholdPercentage",target:"_blank",rel:"noopener noreferrer"},$=n("code",null,"circuitBreaker.errorThresholdPercentage",-1),nn=n("td",{style:{"text-align":"left"}},"断路器启用失败率阈值",-1),sn=n("td",{style:{"text-align":"left"}},"50(%)",-1),an={style:{"text-align":"left"}},tn={href:"https://github.com/Netflix/Hystrix/wiki/Configuration#circuitBreaker.forceOpen",target:"_blank",rel:"noopener noreferrer"},en=n("code",null,"circuitBreaker.forceOpen",-1),on=n("td",{style:{"text-align":"left"}},"是否强制将断路器设置成开启状态",-1),ln=n("td",{style:{"text-align":"left"}},"false",-1),cn={style:{"text-align":"left"}},pn={href:"https://github.com/Netflix/Hystrix/wiki/Configuration#circuitBreaker.forceClosed",target:"_blank",rel:"noopener noreferrer"},rn=n("code",null,"circuitBreaker.forceClosed",-1),un=n("td",{style:{"text-align":"left"}},"是否强制将断路器设置成关闭状态",-1),dn=n("td",{style:{"text-align":"left"}},"false",-1),mn=n("h3",{id:"指标配置",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#指标配置","aria-hidden":"true"},"#"),s(" 指标配置")],-1),kn=n("p",null,"以下配置用于从 HystrixCommand 和 HystrixObservableCommand 执行中捕获相关指标。",-1),gn=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"配置项"),n("th",{style:{"text-align":"left"}},"说明"),n("th",{style:{"text-align":"left"}},"默认值")])],-1),hn={style:{"text-align":"left"}},bn={href:"https://github.com/Netflix/Hystrix/wiki/Configuration#metrics.rollingStats.timeInMilliseconds",target:"_blank",rel:"noopener noreferrer"},vn=n("code",null,"metrics.rollingStats.timeInMilliseconds",-1),fn=n("td",{style:{"text-align":"left"}},"时间窗的长度",-1),xn=n("td",{style:{"text-align":"left"}},"10000(ms)",-1),_n={style:{"text-align":"left"}},yn={href:"https://github.com/Netflix/Hystrix/wiki/Configuration#metrics.rollingStats.numBuckets",target:"_blank",rel:"noopener noreferrer"},wn=n("code",null,"metrics.rollingStats.numBuckets",-1),Hn=n("td",{style:{"text-align":"left"}},[s("桶的数量，需要保证"),n("code",null,"timeInMilliseconds % numBuckets =0")],-1),Cn=n("td",{style:{"text-align":"left"}},"10",-1),Sn={style:{"text-align":"left"}},On={href:"https://github.com/Netflix/Hystrix/wiki/Configuration#metrics.rollingPercentile.enabled",target:"_blank",rel:"noopener noreferrer"},Tn=n("code",null,"metrics.rollingPercentile.enabled",-1),qn=n("td",{style:{"text-align":"left"}},"是否统计运行延迟的占比",-1),jn=n("td",{style:{"text-align":"left"}},"true",-1),En={style:{"text-align":"left"}},Mn={href:"https://github.com/Netflix/Hystrix/wiki/Configuration#metrics.rollingPercentile.timeInMilliseconds",target:"_blank",rel:"noopener noreferrer"},Nn=n("code",null,"metrics.rollingPercentile.timeInMilliseconds",-1),zn=n("td",{style:{"text-align":"left"}},[n("strong",null,"运行延迟占比"),s("统计的时间窗")],-1),Fn=n("td",{style:{"text-align":"left"}},"60000(ms)",-1),Bn={style:{"text-align":"left"}},Pn={href:"https://github.com/Netflix/Hystrix/wiki/Configuration#metrics.rollingPercentile.numBuckets",target:"_blank",rel:"noopener noreferrer"},Vn=n("code",null,"metrics.rollingPercentile.numBuckets",-1),Kn=n("td",{style:{"text-align":"left"}},[n("strong",null,"运行延迟占比"),s("统计的桶数")],-1),In=n("td",{style:{"text-align":"left"}},"6",-1),Dn={style:{"text-align":"left"}},Rn={href:"https://github.com/Netflix/Hystrix/wiki/Configuration#metrics.rollingPercentile.bucketSize",target:"_blank",rel:"noopener noreferrer"},An=n("code",null,"metrics.rollingPercentile.bucketSize",-1),Ln=n("td",{style:{"text-align":"left"}},"百分比统计桶的容量，桶内最多保存的运行时间统计",-1),Qn=n("td",{style:{"text-align":"left"}},"100",-1),Jn={style:{"text-align":"left"}},Un={href:"https://github.com/Netflix/Hystrix/wiki/Configuration#metrics.healthSnapshot.intervalInMilliseconds",target:"_blank",rel:"noopener noreferrer"},Gn=n("code",null,"metrics.healthSnapshot.intervalInMilliseconds",-1),Wn=n("td",{style:{"text-align":"left"}},"统计快照刷新间隔",-1),Xn=n("td",{style:{"text-align":"left"}},"500 (ms)",-1),Yn=n("h3",{id:"线程池配置",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#线程池配置","aria-hidden":"true"},"#"),s(" 线程池配置")],-1),Zn=n("p",null,"以下配置用于控制 Hystrix Command 执行所使用的线程池。",-1),$n=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"配置项"),n("th",{style:{"text-align":"left"}},"说明"),n("th",{style:{"text-align":"left"}},"默认值")])],-1),ns={style:{"text-align":"left"}},ss={href:"https://github.com/Netflix/Hystrix/wiki/Configuration#coreSize",target:"_blank",rel:"noopener noreferrer"},as=n("code",null,"coreSize",-1),ts=n("td",{style:{"text-align":"left"}},"线程池核心线程数",-1),es=n("td",{style:{"text-align":"left"}},"10",-1),os={style:{"text-align":"left"}},is={href:"https://github.com/Netflix/Hystrix/wiki/Configuration#maximumSize",target:"_blank",rel:"noopener noreferrer"},ls=n("code",null,"maximumSize",-1),cs=n("td",{style:{"text-align":"left"}},"线程池最大线程数",-1),ps=n("td",{style:{"text-align":"left"}},"10",-1),rs={style:{"text-align":"left"}},us={href:"https://github.com/Netflix/Hystrix/wiki/Configuration#maxQueueSize",target:"_blank",rel:"noopener noreferrer"},ds=n("code",null,"maxQueueSize",-1),ms=n("td",{style:{"text-align":"left"}},"最大 LinkedBlockingQueue 的大小，-1 表示用 SynchronousQueue",-1),ks=n("td",{style:{"text-align":"left"}},"-1",-1),gs={style:{"text-align":"left"}},hs={href:"https://github.com/Netflix/Hystrix/wiki/Configuration#queueSizeRejectionThreshold",target:"_blank",rel:"noopener noreferrer"},bs=n("code",null,"queueSizeRejectionThreshold",-1),vs=n("td",{style:{"text-align":"left"}},"队列大小阈值，超过则拒绝",-1),fs=n("td",{style:{"text-align":"left"}},"5",-1),xs={style:{"text-align":"left"}},_s={href:"https://github.com/Netflix/Hystrix/wiki/Configuration#allowMaximumSizeToDivergeFromCoreSize",target:"_blank",rel:"noopener noreferrer"},ys=n("code",null,"allowMaximumSizeToDivergeFromCoreSize",-1),ws=n("td",{style:{"text-align":"left"}},"此属性允许 maximumSize 的配置生效。该值可以等于或大于 coreSize。设置 coreSize <maximumSize 使得线程池可以维持 maximumSize 并发性，但是会在相对空闲时将线程回收。（取决于 keepAliveTimeInMinutes）",-1),Hs=n("td",{style:{"text-align":"left"}},"false",-1),Cs=n("h2",{id:"六、其他限流技术",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#六、其他限流技术","aria-hidden":"true"},"#"),s(" 六、其他限流技术")],-1),Ss=n("strong",null,"resilience4j",-1),Os=n("br",null,null,-1),Ts={href:"https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fresilience4j%2Fresilience4j",target:"_blank",rel:"noopener noreferrer"},qs=n("code",null,"函数式接口",-1),js=n("code",null,"lamda表达式",-1),Es=n("code",null,"方法引用",-1),Ms=n("code",null,"断路",-1),Ns=n("code",null,"限流",-1),zs=n("code",null,"重试",-1),Fs=n("code",null,"舱壁",-1),Bs=n("br",null,null,-1),Ps=e(`<li><p>Alibaba Sentinel</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Sentinel
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>是 阿里巴巴开源的轻量级的流量控制、熔断降级 Java 库，该库的核心是使用的是信号量隔离的方式做流量控制和熔断，其优点是其集成性和易用性，几乎能和当前主流的 Spring Cloud, dubbo ,grpc ,nacos, zookeeper 做集成，如下图所示：</p><figure><img src="https:////upload-images.jianshu.io/upload_images/14126519-70fd779fc1f3b9b3.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>sentinel-features-overview-en.png</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Sentinel
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>的目标生态圈：</p><figure><img src="https:////upload-images.jianshu.io/upload_images/14126519-84833e6225a05df0.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sentinel
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>一个强大的功能，就是它有一个流控管理控制台，你可以实时地监控每个服务的流控情况，并且可以实时编辑各种流控、熔断规则，有效地保证了服务保护的及时性。下图是内部试用的 sentinel 控制台：</p><p><img src="https:////upload-images.jianshu.io/upload_images/14126519-bb4aa4ba3a1de64c.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" loading="lazy">另外，</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sentinel
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>还可以和</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ctrip apollo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>分布式配置系统进行集成，将流控规降级等各种规则先配置在 apollo 中，然后服务启动自动加载流控规则。</p></li>`,1),Vs=n("h2",{id:"参考资料",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考资料","aria-hidden":"true"},"#"),s(" 参考资料")],-1),Ks={href:"https://github.com/Netflix/Hystrix",target:"_blank",rel:"noopener noreferrer"},Is={href:"https://www.jianshu.com/p/684b04b6c454",target:"_blank",rel:"noopener noreferrer"},Ds={href:"https://juejin.im/post/5c009ff6f265da614b11b84d",target:"_blank",rel:"noopener noreferrer"};function Rs(As,Ls){const a=i("ExternalLinkIcon");return l(),c("div",null,[r,n("ul",null,[n("li",null,[u,s("。Hystrix 框架本身是使用的"),n("a",d,[s("Archaius"),t(a)]),s("框架完成的配置加载和刷新，但是集成自 Spring Cloud 下，无法有效地根据实时监控结果，动态调整熔断和系统参数")]),m]),k,n("blockquote",null,[n("p",null,[s("详细配置可以参考 "),n("a",g,[s("Hystrix 官方配置手册"),t(a)]),s("，这里仅介绍比较核心的配置")])]),h,n("p",null,[s("以下配置用于控制 "),n("a",b,[v,t(a)]),s(" 如何执行。")]),n("table",null,[f,n("tbody",null,[n("tr",null,[n("td",null,[n("a",x,[_,t(a)])]),y,w]),n("tr",null,[n("td",null,[n("a",H,[C,t(a)])]),S,O]),n("tr",null,[n("td",null,[n("a",T,[q,t(a)])]),j,E])])]),M,n("p",null,[s("以下配置用于控制 "),n("a",N,[z,t(a)]),s(" 的断路处理。")]),n("table",null,[F,n("tbody",null,[n("tr",null,[n("td",B,[n("a",P,[V,t(a)])]),K,I]),n("tr",null,[n("td",D,[n("a",R,[A,t(a)])]),L,Q]),n("tr",null,[n("td",J,[n("a",U,[G,t(a)])]),W,X]),n("tr",null,[n("td",Y,[n("a",Z,[$,t(a)])]),nn,sn]),n("tr",null,[n("td",an,[n("a",tn,[en,t(a)])]),on,ln]),n("tr",null,[n("td",cn,[n("a",pn,[rn,t(a)])]),un,dn])])]),mn,kn,n("table",null,[gn,n("tbody",null,[n("tr",null,[n("td",hn,[n("a",bn,[vn,t(a)])]),fn,xn]),n("tr",null,[n("td",_n,[n("a",yn,[wn,t(a)])]),Hn,Cn]),n("tr",null,[n("td",Sn,[n("a",On,[Tn,t(a)])]),qn,jn]),n("tr",null,[n("td",En,[n("a",Mn,[Nn,t(a)])]),zn,Fn]),n("tr",null,[n("td",Bn,[n("a",Pn,[Vn,t(a)])]),Kn,In]),n("tr",null,[n("td",Dn,[n("a",Rn,[An,t(a)])]),Ln,Qn]),n("tr",null,[n("td",Jn,[n("a",Un,[Gn,t(a)])]),Wn,Xn])])]),Yn,Zn,n("table",null,[$n,n("tbody",null,[n("tr",null,[n("td",ns,[n("a",ss,[as,t(a)])]),ts,es]),n("tr",null,[n("td",os,[n("a",is,[ls,t(a)])]),cs,ps]),n("tr",null,[n("td",rs,[n("a",us,[ds,t(a)])]),ms,ks]),n("tr",null,[n("td",gs,[n("a",hs,[bs,t(a)])]),vs,fs]),n("tr",null,[n("td",xs,[n("a",_s,[ys,t(a)])]),ws,Hs])])]),Cs,n("ul",null,[n("li",null,[n("p",null,[Ss,Os,s(" Hystrix 虽然官方宣布不再维护，其推荐另外一个框架："),n("a",Ts,[s("resilience4j"),t(a)]),s(", 这个框架是是为 Java 8 和 函数式编程设计的一个轻量级的容错框架，该框架充分利用函数式编程的概念，为"),qs,s("、"),js,s("、"),Es,s("高阶函数进行包装，(本质上是装饰者模式的概念)，通过包装实现"),Ms,s("、"),Ns,s("、"),zs,s("、"),Fs,s("功能。"),Bs,s(" 这个框架整体而言比较轻量，没有控制台，不太好做系统级监控；")])]),Ps]),Vs,n("ul",null,[n("li",null,[n("a",Ks,[s("Hystrix Github"),t(a)])]),n("li",null,[n("a",Is,[s("Spring Cloud Hystrix 设计原理"),t(a)])]),n("li",null,[n("a",Ds,[s("Hystrix 都停更了，我为什么还要学？"),t(a)])])])])}const Us=o(p,[["render",Rs],["__file","01.Hystrix.html.vue"]]);export{Us as default};
