const t=JSON.parse('{"key":"v-2bba0d12","path":"/03.%E8%AE%BE%E8%AE%A1/02.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/00.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%BF%B0.html","title":"设计模式概述","lang":"zh-CN","frontmatter":{"title":"设计模式概述","date":"2015-01-27T16:50:00.000Z","order":0,"category":["设计","设计模式"],"tag":["设计","设计模式"],"description":"设计模式概述 设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。 创建型模式 创建型模式简介 创建型模式抽象了实例化的过程。它将系统与它的对象创建、结合、表示的方式分离。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/03.%E8%AE%BE%E8%AE%A1/02.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/00.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%BF%B0.html"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"设计模式概述"}],["meta",{"property":"og:description","content":"设计模式概述 设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。 创建型模式 创建型模式简介 创建型模式抽象了实例化的过程。它将系统与它的对象创建、结合、表示的方式分离。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-24T23:58:37.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"设计"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2015-01-27T16:50:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-24T23:58:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式概述\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2015-01-27T16:50:00.000Z\\",\\"dateModified\\":\\"2024-01-24T23:58:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io\\"}]}"]]},"headers":[{"level":2,"title":"创建型模式","slug":"创建型模式","link":"#创建型模式","children":[{"level":3,"title":"创建型模式简介","slug":"创建型模式简介","link":"#创建型模式简介","children":[]},{"level":3,"title":"创建型模式应用","slug":"创建型模式应用","link":"#创建型模式应用","children":[]},{"level":3,"title":"创建型模式代表","slug":"创建型模式代表","link":"#创建型模式代表","children":[]},{"level":3,"title":"结构型模式","slug":"结构型模式","link":"#结构型模式","children":[]},{"level":3,"title":"行为型模式","slug":"行为型模式","link":"#行为型模式","children":[]}]},{"level":2,"title":"📚 资料","slug":"📚-资料","link":"#📚-资料","children":[]},{"level":2,"title":"🚪 传送","slug":"🚪-传送","link":"#🚪-传送","children":[]}],"git":{"createdTime":1694447058000,"updatedTime":1706140717000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":3}]},"readingTime":{"minutes":4.24,"words":1271},"filePathRelative":"03.设计/02.设计模式/00.设计模式概述.md","localizedDate":"2015年1月27日","excerpt":"<h1> 设计模式概述</h1>\\n<blockquote>\\n<p>设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p>\\n</blockquote>\\n<h2> 创建型模式</h2>\\n<h3> 创建型模式简介</h3>\\n<p><strong>创建型模式</strong>抽象了<strong>实例化</strong>的过程。它将<strong>系统</strong>与它的<strong>对象</strong>创建、结合、表示的方式<strong>分离</strong>。</p>","autoDesc":true}');export{t as data};
