import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as l,c as r,a as n,b as s,d as t,e}from"./app-dc48b2dc.js";const c={},i=n("h1",{id:"mongodb-建模",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#mongodb-建模","aria-hidden":"true"},"#"),s(" MongoDB 建模")],-1),u=n("p",null,"MongoDB 的数据模式是一种灵活模式，关系型数据库要求你在插入数据之前必须先定义好一个表的模式结构，而 MongoDB 的集合则并不限制 document 结构。这种灵活性让对象和数据库文档之间的映射变得很容易。即使数据记录之间有很大的变化，每个文档也可以很好的映射到各条不同的记录。 当然在实际使用中，同一个集合中的文档往往都有一个比较类似的结构。",-1),d=n("p",null,"数据模型设计中最具挑战性的是在应用程序需求，数据库引擎性能要求和数据读写模式之间做权衡考量。当设计数据模型的时候，一定要考虑应用程序对数据的使用模式（如查询，更新和处理）以及数据本身的天然结构。",-1),k=n("h2",{id:"mongodb-数据建模入门",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#mongodb-数据建模入门","aria-hidden":"true"},"#"),s(" MongoDB 数据建模入门")],-1),m={href:"https://docs.mongodb.com/guides/server/introduction/#what-you-ll-need",target:"_blank",rel:"noopener noreferrer"},h=e(`<h3 id="一-定义数据集" tabindex="-1"><a class="header-anchor" href="#一-定义数据集" aria-hidden="true">#</a> （一）定义数据集</h3><p>当需要建立数据存储时，首先应该思考以下问题：需要存储哪些数据？这些字段之间如何关联？</p><p>这是一个数据建模的过程。目标是<strong>将业务需求抽象为逻辑模型</strong>。</p><p>假设这样一个场景：我们需要建立数据库以跟踪物料及其数量，大小，标签和等级。</p><p>如果是存储在 RDBMS，可能以下的数据表：</p><table><thead><tr><th style="text-align:left;">name</th><th style="text-align:left;">quantity</th><th style="text-align:left;">size</th><th style="text-align:left;">status</th><th style="text-align:left;">tags</th><th style="text-align:left;">rating</th></tr></thead><tbody><tr><td style="text-align:left;">journal</td><td style="text-align:left;">25</td><td style="text-align:left;">14x21,cm</td><td style="text-align:left;">A</td><td style="text-align:left;">brown, lined</td><td style="text-align:left;">9</td></tr><tr><td style="text-align:left;">notebook</td><td style="text-align:left;">50</td><td style="text-align:left;">8.5x11,in</td><td style="text-align:left;">A</td><td style="text-align:left;">college-ruled,perforated</td><td style="text-align:left;">8</td></tr><tr><td style="text-align:left;">paper</td><td style="text-align:left;">100</td><td style="text-align:left;">8.5x11,in</td><td style="text-align:left;">D</td><td style="text-align:left;">watercolor</td><td style="text-align:left;">10</td></tr><tr><td style="text-align:left;">planner</td><td style="text-align:left;">75</td><td style="text-align:left;">22.85x30,cm</td><td style="text-align:left;">D</td><td style="text-align:left;">2019</td><td style="text-align:left;">10</td></tr><tr><td style="text-align:left;">postcard</td><td style="text-align:left;">45</td><td style="text-align:left;">10x,cm</td><td style="text-align:left;">D</td><td style="text-align:left;">double-sided,white</td><td style="text-align:left;">2</td></tr></tbody></table><h3 id="二-思考-json-结构" tabindex="-1"><a class="header-anchor" href="#二-思考-json-结构" aria-hidden="true">#</a> （二）思考 JSON 结构</h3><p>从上例中可以看出，表似乎是存储数据的好地方，但该数据集中的字段需要多个值，如果在单个列中建模，则不容易搜索或显示（对于 例如–大小和标签）。</p><p>在 SQL 数据库中，您可以通过创建关系表来解决此问题。</p><p>在 MongoDB 中，数据存储为文档（document）。 这些文档以 JSON（JavaScript 对象表示法）格式存储在 MongoDB 中。 JSON 文档支持嵌入式字段，因此相关数据和数据列表可以与文档一起存储，而不是与外部表一起存储。</p><p>JSON 格式为键/值对。 在 JSON 文档中，字段名和值用冒号分隔，字段名和值对用逗号分隔，并且字段集封装在“大括号”（<code>{}</code>）中。</p><p>如果要开始对上面的行之一进行建模，例如此行：</p><table><thead><tr><th style="text-align:left;">name</th><th style="text-align:left;">quantity</th><th style="text-align:left;">size</th><th style="text-align:left;">status</th><th style="text-align:left;">tags</th><th style="text-align:left;">rating</th></tr></thead><tbody><tr><td style="text-align:left;">notebook</td><td style="text-align:left;">50</td><td style="text-align:left;">8.5x11,in</td><td style="text-align:left;">A</td><td style="text-align:left;">college-ruled,perforated</td><td style="text-align:left;">8</td></tr></tbody></table><p>您可以从 name 和 quantity 字段开始。 在 JSON 中，这些字段如下所示：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span> <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;notebook&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;qty&quot;</span><span class="token operator">:</span> <span class="token number">50</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="三-确定哪些字段作为嵌入式数据" tabindex="-1"><a class="header-anchor" href="#三-确定哪些字段作为嵌入式数据" aria-hidden="true">#</a> （三）确定哪些字段作为嵌入式数据</h3><p>接下来，需要确定哪些字段可能需要多个值。可以考虑将这些字段作为嵌入式文档或嵌入式文档中的 列表/数组 对象。</p><p>例如，在上面的示例中，size 可能包含三个字段：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span> <span class="token property">&quot;h&quot;</span><span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token property">&quot;w&quot;</span><span class="token operator">:</span> <span class="token number">8.5</span><span class="token punctuation">,</span> <span class="token property">&quot;uom&quot;</span><span class="token operator">:</span> <span class="token string">&quot;in&quot;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>And some items have multiple ratings, so <code>ratings</code> might be represented as a list of documents containing the field <code>scores</code>:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token property">&quot;score&quot;</span><span class="token operator">:</span> <span class="token number">8</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token property">&quot;score&quot;</span><span class="token operator">:</span> <span class="token number">9</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>And you might need to handle multiple tags per item. So you might store them in a list too.</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">[</span><span class="token string">&quot;college-ruled&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;perforated&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Finally, a JSON document that stores an inventory item might look like this:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;notebook&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;qty&quot;</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span>
  <span class="token property">&quot;rating&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token property">&quot;score&quot;</span><span class="token operator">:</span> <span class="token number">8</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token property">&quot;score&quot;</span><span class="token operator">:</span> <span class="token number">9</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;size&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;height&quot;</span><span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token property">&quot;width&quot;</span><span class="token operator">:</span> <span class="token number">8.5</span><span class="token punctuation">,</span> <span class="token property">&quot;unit&quot;</span><span class="token operator">:</span> <span class="token string">&quot;in&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;status&quot;</span><span class="token operator">:</span> <span class="token string">&quot;A&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;tags&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;college-ruled&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;perforated&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This looks very different from the tabular data structure you started with in Step 1.</p><h2 id="数据模型简介" tabindex="-1"><a class="header-anchor" href="#数据模型简介" aria-hidden="true">#</a> 数据模型简介</h2><p>数据建模中的关键挑战是平衡应用程序的需求、数据库引擎的性能以及数据检索模式。 在设计数据模型时，始终需要考虑数据的应用程序使用情况（即数据的查询，更新和处理）以及数据本身的固有结构。</p><h3 id="灵活的-schema" tabindex="-1"><a class="header-anchor" href="#灵活的-schema" aria-hidden="true">#</a> 灵活的 Schema</h3><p>在关系型数据库中，必须在插入数据之前确定并声明表的结构。而 MongoDB 的 collection 默认情况下不需要其文档具有相同的架构。也就是说：</p><p>同一个 collection 中的 document 不需要具有相同的 field 集，并且 field 的数据类型可以在集合中的不同文档之间有所不同。</p><p>要更改 collection 中的 document 结构，例如添加新 field，删除现有 field 或将 field 值更改为新类型，只需要将文档更新为新结构即可。</p><p>这种灵活性有助于将 document 映射到实体或对象。每个 document 都可以匹配所表示实体的数据字段，即使该文档与集合中的其他文档有很大的不同。但是，实际上，集合中的文档具有相似的结构，并且您可以在更新和插入操作期间对 collection 强制执行 document 校验规则。</p><h3 id="document-结构" tabindex="-1"><a class="header-anchor" href="#document-结构" aria-hidden="true">#</a> Document 结构</h3><h4 id="嵌入式数据模型" tabindex="-1"><a class="header-anchor" href="#嵌入式数据模型" aria-hidden="true">#</a> 嵌入式数据模型</h4><p>嵌入式 document 通过将相关数据存储在单个 document 结构中来捕获数据之间的关系。 MongoDB document 可以将 document 结构嵌入到另一个 document 中的字段或数组中。这些非规范化的数据模型允许应用程序在单个数据库操作中检索和操纵相关数据。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20200910193231.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>对于 MongoDB 中的很多场景，非规范化数据模型都是最佳的。</p>`,38),g=n("p",null,"嵌入式 document 有大小限制：必须小于 16 MB。",-1),v={href:"https://docs.mongodb.com/manual/core/gridfs/",target:"_blank",rel:"noopener noreferrer"},b=e('<h4 id="引用式数据模型" tabindex="-1"><a class="header-anchor" href="#引用式数据模型" aria-hidden="true">#</a> 引用式数据模型</h4><p>引用通过包含从一个 document 到另一个 document 的链接或引用来存储数据之间的关系。 应用程序可以解析这些引用以访问相关数据。 广义上讲，这些是规范化的数据模型。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20200910193234.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>通常，在以下场景使用引用式的数据模型：</p><ul><li>嵌入时会导致数据重复，但无法提供足够的读取性能优势，无法胜过重复的含义。</li><li>代表更复杂的多对多关系。</li><li>为大规模分层数据集建模。</li></ul><p>为了 join collection，MongoDB 支持聚合 stage：</p>',6),y={href:"https://docs.mongodb.com/manual/reference/operator/aggregation/lookup/#pipe._S_lookup",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"$lookup",-1),_={href:"https://docs.mongodb.com/manual/reference/operator/aggregation/graphLookup/#pipe._S_graphLookup",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"$graphLookup",-1),x=n("p",null,"MongoDB 还提供了引用来支持跨集合 join 数据：",-1),j={href:"https://docs.mongodb.com/manual/tutorial/model-referenced-one-to-many-relationships-between-documents/#data-modeling-publisher-and-books",target:"_blank",rel:"noopener noreferrer"},M={href:"https://docs.mongodb.com/manual/applications/data-models-tree-structures/",target:"_blank",rel:"noopener noreferrer"},S=n("h3",{id:"原子写操作",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#原子写操作","aria-hidden":"true"},"#"),s(" 原子写操作")],-1),D=n("h4",{id:"单-document-的原子性",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#单-document-的原子性","aria-hidden":"true"},"#"),s(" 单 document 的原子性")],-1),B={href:"https://docs.mongodb.com/manual/reference/method/db.collection.updateMany/#db.collection.updateMany",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"db.collection.updateMany()",-1),$=e('<h4 id="多-document-事务" tabindex="-1"><a class="header-anchor" href="#多-document-事务" aria-hidden="true">#</a> 多 document 事务</h4><p>对于需要对多个 document（在单个或多个集合中）进行读写原子性的情况，MongoDB 支持多 document 事务。</p><ul><li>在版本 4.0 中，MongoDB 在副本集上支持多 document 事务。</li><li>在版本 4.2 中，MongoDB 引入了分布式事务，它增加了对分片群集上多 document 事务的支持，并合并了对副本集上多 document 事务的现有支持。</li></ul><blockquote><p>在大多数情况下，多 document 事务会比单 document 的写入产生更高的性能消耗，并且多 document 事务的可用性不能替代高效的结构设计。 在许多情况下，非规范化数据模型（嵌入式 document 和数组）仍是最佳选择。 也就是说，合理的数据建模，将最大程度地减少对多 document 事务的需求。</p></blockquote><h3 id="数据使用和性能" tabindex="-1"><a class="header-anchor" href="#数据使用和性能" aria-hidden="true">#</a> 数据使用和性能</h3><p>在设计数据模型时，请考虑应用程序将如何使用您的数据库。 例如，如果您的应用程序仅使用最近插入的 document，请考虑使用上限集合。 或者，如果您的应用程序主要是对 collection 的读取操作，则添加索引以提高性能。</p><h2 id="schema-校验" tabindex="-1"><a class="header-anchor" href="#schema-校验" aria-hidden="true">#</a> Schema 校验</h2><h3 id="指定校验规则" tabindex="-1"><a class="header-anchor" href="#指定校验规则" aria-hidden="true">#</a> 指定校验规则</h3>',8),T={href:"https://docs.mongodb.com/manual/reference/method/db.createCollection/#db.createCollection",target:"_blank",rel:"noopener noreferrer"},A=n("code",null,"db.createCollection()",-1),N=n("code",null,"validator",-1),L=n("code",null,"validator",-1),O={href:"https://docs.mongodb.com/manual/reference/command/collMod/#dbcmd.collMod",target:"_blank",rel:"noopener noreferrer"},J=n("code",null,"collMod",-1),C=n("p",null,"MongoDB 还提供以下相关选项：",-1),z=n("ul",null,[n("li",null,[n("code",null,"validationLevel"),s(" 选项（用于确定 MongoDB 在更新过程中，对现有 document 应用校验规则的严格程度）")]),n("li",null,[n("code",null,"validationAction"),s(" 选项（用于确定 MongoDB 发现违反校验规则的 document 时，是选择报错并拒绝，还是接受数据但在日志中告警）。")])],-1),E=n("h3",{id:"json-schema",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#json-schema","aria-hidden":"true"},"#"),s(" JSON Schema")],-1),I=n("p",null,"从 3.6 版本开始，MongoDB 开始支持 JSON Schema 校验。",-1),R={href:"https://docs.mongodb.com/manual/reference/operator/query/jsonSchema/#op._S_jsonSchema",target:"_blank",rel:"noopener noreferrer"},V=n("code",null,"$jsonSchema",-1),U=e(`<p>【示例】</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>db<span class="token punctuation">.</span><span class="token function">createCollection</span><span class="token punctuation">(</span><span class="token string">&#39;students&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">validator</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">$jsonSchema</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">bsonType</span><span class="token operator">:</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;year&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;major&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;address&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">properties</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">bsonType</span><span class="token operator">:</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">description</span><span class="token operator">:</span> <span class="token string">&#39;must be a string and is required&#39;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">year</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">bsonType</span><span class="token operator">:</span> <span class="token string">&#39;int&#39;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">minimum</span><span class="token operator">:</span> <span class="token number">2017</span><span class="token punctuation">,</span>
          <span class="token literal-property property">maximum</span><span class="token operator">:</span> <span class="token number">3017</span><span class="token punctuation">,</span>
          <span class="token literal-property property">description</span><span class="token operator">:</span> <span class="token string">&#39;must be an integer in [ 2017, 3017 ] and is required&#39;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">major</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token keyword">enum</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;Math&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;English&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Computer Science&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;History&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token literal-property property">description</span><span class="token operator">:</span> <span class="token string">&#39;can only be one of the enum values and is required&#39;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">gpa</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">bsonType</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;double&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token literal-property property">description</span><span class="token operator">:</span> <span class="token string">&#39;must be a double if the field exists&#39;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">bsonType</span><span class="token operator">:</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;city&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token literal-property property">properties</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">street</span><span class="token operator">:</span> <span class="token punctuation">{</span>
              <span class="token literal-property property">bsonType</span><span class="token operator">:</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">,</span>
              <span class="token literal-property property">description</span><span class="token operator">:</span> <span class="token string">&#39;must be a string if the field exists&#39;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token punctuation">{</span>
              <span class="token literal-property property">bsonType</span><span class="token operator">:</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">,</span>
              <span class="token literal-property property">description</span><span class="token operator">:</span> <span class="token string">&#39;must be a string and is required&#39;</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="其它查询表达式" tabindex="-1"><a class="header-anchor" href="#其它查询表达式" aria-hidden="true">#</a> 其它查询表达式</h3>`,3),G={href:"https://docs.mongodb.com/manual/reference/operator/query/jsonSchema/#op._S_jsonSchema",target:"_blank",rel:"noopener noreferrer"},W=n("code",null,"$jsonSchema",-1),F={href:"https://docs.mongodb.com/manual/reference/operator/query/near/#op._S_near",target:"_blank",rel:"noopener noreferrer"},H=n("code",null,"$near",-1),Q={href:"https://docs.mongodb.com/manual/reference/operator/query/nearSphere/#op._S_nearSphere",target:"_blank",rel:"noopener noreferrer"},K=n("code",null,"$nearSphere",-1),P={href:"https://docs.mongodb.com/manual/reference/operator/query/text/#op._S_text",target:"_blank",rel:"noopener noreferrer"},X=n("code",null,"$text",-1),Y={href:"https://docs.mongodb.com/manual/reference/operator/query/where/#op._S_where",target:"_blank",rel:"noopener noreferrer"},Z=n("code",null,"$where",-1),nn={href:"https://docs.mongodb.com/manual/reference/operator/aggregation/function/#exp._S_function",target:"_blank",rel:"noopener noreferrer"},sn=n("code",null,"$function",-1),an={href:"https://docs.mongodb.com/manual/reference/operator/query/expr/#op._S_expr",target:"_blank",rel:"noopener noreferrer"},tn=n("code",null,"$expr",-1),en=e(`<p>【示例】查询表达式中指定校验规则</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>db<span class="token punctuation">.</span><span class="token function">createCollection</span><span class="token punctuation">(</span><span class="token string">&#39;contacts&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">validator</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">$or</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">phone</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">$type</span><span class="token operator">:</span> <span class="token string">&#39;string&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">$regex</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">@mongodb\\.com$</span><span class="token regex-delimiter">/</span></span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token punctuation">{</span> $<span class="token keyword">in</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;Unknown&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Incomplete&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="行为" tabindex="-1"><a class="header-anchor" href="#行为" aria-hidden="true">#</a> 行为</h3><p>校验发生在更新和插入期间。添加校验规则到 collection 时，不会对现有的 document 进行校验，除非发生修改操作。</p><h4 id="现有的-document" tabindex="-1"><a class="header-anchor" href="#现有的-document" aria-hidden="true">#</a> 现有的 document</h4><p><code>validationLevel</code> 选项确定 MongoDB 进行规则校验时执行的操作：</p><ul><li>如果 <code>validationLevel</code> 是 strict（严格级别。这是 MongoDB 默认级别），则 MongoDB 将校验规则应用于所有插入和更新。</li><li>如果 <code>validationLevel</code> 是 moderate（中等级别），则 MongoDB 只对已满足校验条件的现有文档的插入和更新操作进行校验；对不符合校验标准的现有文档的更新操作不进行校验。</li></ul><p>【示例】</p><p>下面是一个正常的插入操作：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>db<span class="token punctuation">.</span>contacts<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">_id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Anne&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">phone</span><span class="token operator">:</span> <span class="token string">&#39;+1 555 123 456&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token string">&#39;London&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token string">&#39;Complete&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">_id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Ivan&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token string">&#39;Vancouver&#39;</span> <span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 collection 上配置一个校验规则：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>db<span class="token punctuation">.</span><span class="token function">runCommand</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">collMod</span><span class="token operator">:</span> <span class="token string">&#39;contacts&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">validator</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">$jsonSchema</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">bsonType</span><span class="token operator">:</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;phone&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">properties</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">phone</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">bsonType</span><span class="token operator">:</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">description</span><span class="token operator">:</span> <span class="token string">&#39;must be a string and is required&#39;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">bsonType</span><span class="token operator">:</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">description</span><span class="token operator">:</span> <span class="token string">&#39;must be a string and is required&#39;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">validationLevel</span><span class="token operator">:</span> <span class="token string">&#39;moderate&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>则 <code>contacts</code> collection 现在添加了含中等级别（moderate） validationLevel 的 <code>validator</code>：</p><ul><li><p>如果尝试更新 <code>_id</code>为 1 的文档，则 MongoDB 将应用校验规则，因为现有文档符合条件。</p></li><li><p>相反，MongoDB 不会将校验 <code>_id</code> 为 2 的文档，因为它不符合校验规则。</p></li></ul><p>如果要完全禁用校验，可以将 <code>validationLevel</code> 置为 <code>off</code>。</p><h4 id="接受或拒绝无效的-document" tabindex="-1"><a class="header-anchor" href="#接受或拒绝无效的-document" aria-hidden="true">#</a> 接受或拒绝无效的 document</h4><ul><li>如果 validationAction 是 Error（默认），则 MongoDB 拒绝任何违反校验规则的插入或更新。</li><li>如果 validationAction 是 Warn，MongoDB 会记录所有的违规，但允许进行插入或更新。</li></ul><p>【示例】</p><p>创建集合时，配置 <code>validationAction</code> 为 warn。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>db<span class="token punctuation">.</span><span class="token function">createCollection</span><span class="token punctuation">(</span><span class="token string">&#39;contacts2&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">validator</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">$jsonSchema</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">bsonType</span><span class="token operator">:</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;phone&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">properties</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">phone</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">bsonType</span><span class="token operator">:</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">description</span><span class="token operator">:</span> <span class="token string">&#39;must be a string and is required&#39;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">bsonType</span><span class="token operator">:</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token string">&#39;@mongodb.com$&#39;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">description</span><span class="token operator">:</span>
            <span class="token string">&#39;must be a string and match the regular expression pattern&#39;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token keyword">enum</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;Unknown&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Incomplete&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token literal-property property">description</span><span class="token operator">:</span> <span class="token string">&#39;can only be one of the enum values&#39;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">validationAction</span><span class="token operator">:</span> <span class="token string">&#39;warn&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>尝试插入一条违规记录</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&gt;</span> db<span class="token punctuation">.</span>contacts2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Amanda&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token string">&quot;Updated&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span>
<span class="token function">WriteResult</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string-property property">&quot;nInserted&quot;</span> <span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>MongoDB 允许这条操作执行，但是服务器会记录下告警信息。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{&quot;t&quot;:{&quot;$date&quot;:&quot;2020-09-11T16:35:57.754+08:00&quot;},&quot;s&quot;:&quot;W&quot;,  &quot;c&quot;:&quot;STORAGE&quot;,  &quot;id&quot;:20294,   &quot;ctx&quot;:&quot;conn14&quot;,&quot;msg&quot;:&quot;Document would fail validation&quot;,&quot;attr&quot;:{&quot;namespace&quot;:&quot;test.contacts2&quot;,&quot;document&quot;:{&quot;_id&quot;:{&quot;$oid&quot;:&quot;5f5b36ed8ea53d62a0b51c4e&quot;},&quot;name&quot;:&quot;Amanda&quot;,&quot;status&quot;:&quot;Updated&quot;}}}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="限制" tabindex="-1"><a class="header-anchor" href="#限制" aria-hidden="true">#</a> 限制</h4><p>不能在 <code>admin</code>、<code>local</code>、<code>config</code> 这几个特殊的数据库中指定校验规则。</p><p>不能在 <code>system.*</code> collection 中指定校验。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,28),on=n("strong",null,"官方",-1),pn={href:"https://www.mongodb.com/",target:"_blank",rel:"noopener noreferrer"},ln={href:"https://github.com/mongodb/mongo",target:"_blank",rel:"noopener noreferrer"},rn={href:"https://university.mongodb.com/",target:"_blank",rel:"noopener noreferrer"},cn=n("strong",null,"教程",-1),un={href:"https://www.runoob.com/mongodb/mongodb-tutorial.html",target:"_blank",rel:"noopener noreferrer"},dn={href:"https://time.geekbang.org/course/intro/100040001",target:"_blank",rel:"noopener noreferrer"};function kn(mn,hn){const a=p("ExternalLinkIcon");return l(),r("div",null,[i,u,d,k,n("blockquote",null,[n("p",null,[s("参考："),n("a",m,[s("https://docs.mongodb.com/guides/server/introduction/#what-you-ll-need"),t(a)])])]),h,n("blockquote",null,[g,n("p",null,[s("如果是较大的二进制数据，可以考虑 "),n("a",v,[s("GridFS"),t(a)]),s("。")])]),b,n("ul",null,[n("li",null,[n("a",y,[f,t(a)]),s("（MongoDB 3.2 开始支持）")]),n("li",null,[n("a",_,[q,t(a)]),s("（MongoDB 3.4 开始支持）")])]),x,n("ul",null,[n("li",null,[s("引用数据模型示例，参考："),n("a",j,[s("Model One-to-Many Relationships with Document References"),t(a)]),s(".")]),n("li",null,[s("更多树形模型，参考："),n("a",M,[s("Model Tree Structures"),t(a)]),s(".")])]),S,D,n("p",null,[s("在 MongoDB 中，针对单个 document 的写操作是原子性的，即使该 document 中嵌入了多个子 document。 具有嵌入数据的非规范化数据模型将所有相关数据合并在一个 document 中，而不是在多个 document 和 collection 中进行规范化。 该数据模型有助于原子操作。 当单个写入操作（例如 "),n("a",B,[w,t(a)]),s("）修改多个 document 时，每个 document 的独立修改是原子的，但整个操作不是原子的。")]),$,n("p",null,[s("如果创建新 collection 时要指定校验规则，需要在使用 "),n("a",T,[A,t(a)]),s(" 时指定 "),N,s(" 选项。")]),n("p",null,[s("如果要将 document 校验添加到现有 collection 中，需要使用带有 "),L,s(" 选项的 "),n("a",O,[J,t(a)]),s(" 命令。")]),C,z,E,I,n("p",null,[s("可以通过在 validator 表达式中使用 "),n("a",R,[V,t(a)]),s(" 操作来指定 JSON Schema 校验。")]),U,n("p",null,[s("除了使用 "),n("a",G,[W,t(a)]),s(" 查询运算符的 JSON Schema 校验外，MongoDB 还支持其它查询运算符的校验，但以下情况除外：")]),n("ul",null,[n("li",null,[n("a",F,[H,t(a)]),s(",")]),n("li",null,[n("a",Q,[K,t(a)]),s(",")]),n("li",null,[n("a",P,[X,t(a)]),s(",")]),n("li",null,[n("a",Y,[Z,t(a)]),s(", and")]),n("li",null,[s("带有 "),n("a",nn,[sn,t(a)]),s(" 表达式的 "),n("a",an,[tn,t(a)])])]),en,n("ul",null,[n("li",null,[on,n("ul",null,[n("li",null,[n("a",pn,[s("MongoDB 官网"),t(a)])]),n("li",null,[n("a",ln,[s("MongoDB Github"),t(a)])]),n("li",null,[n("a",rn,[s("MongoDB 官方免费教程"),t(a)])])])]),n("li",null,[cn,n("ul",null,[n("li",null,[n("a",un,[s("MongoDB 教程"),t(a)])]),n("li",null,[n("a",dn,[s("MongoDB 高手课"),t(a)])])])])])])}const bn=o(c,[["render",kn],["__file","05.MongoDB建模.html.vue"]]);export{bn as default};
