const e=JSON.parse('{"key":"v-4b279044","path":"/pages/529fad/","title":"Java 容器之 Stream","lang":"zh-CN","frontmatter":{"title":"Java 容器之 Stream","date":"2020-12-05T18:30:22.000Z","category":["Java","JavaSE","容器"],"tag":["Java","JavaSE","容器"],"permalink":"/pages/529fad/","description":"Java 容器之 Stream Stream 简介 在 Java8 中，Collection 新增了两个流方法，分别是 stream() 和 parallelStream()。 Stream 相当于高级版的 Iterator，他可以通过 Lambda 表达式对集合进行各种非常便利、高效的聚合操作（Aggregate Operation），或者大批量数据操作 (Bulk Data Operation)。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/pages/529fad/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"Java 容器之 Stream"}],["meta",{"property":"og:description","content":"Java 容器之 Stream Stream 简介 在 Java8 中，Collection 新增了两个流方法，分别是 stream() 和 parallelStream()。 Stream 相当于高级版的 Iterator，他可以通过 Lambda 表达式对集合进行各种非常便利、高效的聚合操作（Aggregate Operation），或者大批量数据操作 (Bulk Data Operation)。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-10T10:35:58.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"JavaSE"}],["meta",{"property":"article:tag","content":"容器"}],["meta",{"property":"article:published_time","content":"2020-12-05T18:30:22.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-10T10:35:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 容器之 Stream\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-12-05T18:30:22.000Z\\",\\"dateModified\\":\\"2023-09-10T10:35:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io\\"}]}"]]},"headers":[{"level":2,"title":"Stream 简介","slug":"stream-简介","link":"#stream-简介","children":[]},{"level":2,"title":"Stream 操作分类","slug":"stream-操作分类","link":"#stream-操作分类","children":[]},{"level":2,"title":"Stream 源码实现","slug":"stream-源码实现","link":"#stream-源码实现","children":[]},{"level":2,"title":"Stream 并行处理","slug":"stream-并行处理","link":"#stream-并行处理","children":[]},{"level":2,"title":"4. 参考资料","slug":"_4-参考资料","link":"#_4-参考资料","children":[]}],"git":{"createdTime":1694342158000,"updatedTime":1694342158000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":1}]},"readingTime":{"minutes":2.1,"words":629},"filePathRelative":"01.Java/01.JavaSE/03.容器/06.Java容器之Stream.md","localizedDate":"2020年12月5日","excerpt":"<h1> Java 容器之 Stream</h1>\\n<h2> Stream 简介</h2>\\n<p>在 Java8 中，<code>Collection</code> 新增了两个流方法，分别是 <code>stream()</code> 和 <code>parallelStream()</code>。</p>\\n<p><code>Stream</code> 相当于高级版的 <code>Iterator</code>，他可以通过 Lambda 表达式对集合进行各种非常便利、高效的聚合操作（Aggregate Operation），或者大批量数据操作 (Bulk Data Operation)。</p>","autoDesc":true}');export{e as data};
