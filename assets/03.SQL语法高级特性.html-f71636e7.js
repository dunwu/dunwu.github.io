import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a as n,b as a,d as e,e as d}from"./app-a0e98cac.js";const p={},i=d(`<h1 id="sql-语法高级特性" tabindex="-1"><a class="header-anchor" href="#sql-语法高级特性" aria-hidden="true">#</a> SQL 语法高级特性</h1><blockquote><p>本文针对关系型数据库的基本语法。限于篇幅，本文侧重说明用法，不会展开讲解特性、原理。</p><p>本文语法主要针对 Mysql，但大部分的语法对其他关系型数据库也适用。</p></blockquote><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202310011053288.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="连接和组合" tabindex="-1"><a class="header-anchor" href="#连接和组合" aria-hidden="true">#</a> 连接和组合</h2><h3 id="连接-join" tabindex="-1"><a class="header-anchor" href="#连接-join" aria-hidden="true">#</a> 连接（JOIN）</h3><blockquote><p>连接用于连接多个表，使用 <code>JOIN</code> 关键字，并且条件语句使用 <code>ON</code> 而不是 <code>WHERE</code>。</p></blockquote><p>如果一个 <code>JOIN</code> 至少有一个公共字段并且它们之间存在关系，则该 <code>JOIN</code> 可以在两个或多个表上工作。</p><p><code>JOIN</code> 保持基表（结构和数据）不变。<strong>连接可以替换子查询，并且比子查询的效率一般会更快</strong>。</p><p><code>JOIN</code> 有两种连接类型：内连接和外连接。</p><div align="center"><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/database/mysql/sql-join.png" alt="sql-join"></div><h4 id="内连接-inner-join" tabindex="-1"><a class="header-anchor" href="#内连接-inner-join" aria-hidden="true">#</a> 内连接（INNER JOIN）</h4><p>内连接又称等值连接，<strong>使用 <code>INNER JOIN</code> 关键字</strong>。在没有条件语句的情况下<strong>返回笛卡尔积</strong>。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> vend_name<span class="token punctuation">,</span> prod_name<span class="token punctuation">,</span> prod_price
<span class="token keyword">FROM</span> vendors <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> products
<span class="token keyword">ON</span> vendors<span class="token punctuation">.</span>vend_id <span class="token operator">=</span> products<span class="token punctuation">.</span>vend_id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="自连接" tabindex="-1"><a class="header-anchor" href="#自连接" aria-hidden="true">#</a> 自连接（<code>=</code>）</h5><p>自连接可以看成内连接的一种，只是<strong>连接的表是自身</strong>而已。<strong>自然连接是把同名列通过 <code>=</code> 连接起来</strong>的，同名列可以有多个。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> c1<span class="token punctuation">.</span>cust_id<span class="token punctuation">,</span> c1<span class="token punctuation">.</span>cust_name<span class="token punctuation">,</span> c1<span class="token punctuation">.</span>cust_contact
<span class="token keyword">FROM</span> customers c1<span class="token punctuation">,</span> customers c2
<span class="token keyword">WHERE</span> c1<span class="token punctuation">.</span>cust_name <span class="token operator">=</span> c2<span class="token punctuation">.</span>cust_name
<span class="token operator">AND</span> c2<span class="token punctuation">.</span>cust_contact <span class="token operator">=</span> <span class="token string">&#39;Jim Jones&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="自然连接-natural-join" tabindex="-1"><a class="header-anchor" href="#自然连接-natural-join" aria-hidden="true">#</a> 自然连接（NATURAL JOIN）</h5><p>内连接提供连接的列，而自然连接<strong>自动连接所有同名列</strong>。自然连接使用 <code>NATURAL JOIN</code> 关键字。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> Products
<span class="token keyword">NATURAL</span> <span class="token keyword">JOIN</span> Customers<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="外连接-outer-join" tabindex="-1"><a class="header-anchor" href="#外连接-outer-join" aria-hidden="true">#</a> 外连接（OUTER JOIN）</h4><p>外连接返回一个表中的所有行，并且仅返回来自此表中满足连接条件的那些行，即两个表中的列是相等的。外连接分为左外连接、右外连接、全外连接（Mysql 不支持）。</p><h5 id="左连接-left-join" tabindex="-1"><a class="header-anchor" href="#左连接-left-join" aria-hidden="true">#</a> 左连接（LEFT JOIN）</h5><p>左外连接就是保留左表没有关联的行。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> customers<span class="token punctuation">.</span>cust_id<span class="token punctuation">,</span> orders<span class="token punctuation">.</span>order_num
<span class="token keyword">FROM</span> customers <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> orders
<span class="token keyword">ON</span> customers<span class="token punctuation">.</span>cust_id <span class="token operator">=</span> orders<span class="token punctuation">.</span>cust_id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="右连接-right-join" tabindex="-1"><a class="header-anchor" href="#右连接-right-join" aria-hidden="true">#</a> 右连接（RIGHT JOIN）</h5><p>右外连接就是保留右表没有关联的行。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> customers<span class="token punctuation">.</span>cust_id<span class="token punctuation">,</span> orders<span class="token punctuation">.</span>order_num
<span class="token keyword">FROM</span> customers <span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> orders
<span class="token keyword">ON</span> customers<span class="token punctuation">.</span>cust_id <span class="token operator">=</span> orders<span class="token punctuation">.</span>cust_id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="组合-union" tabindex="-1"><a class="header-anchor" href="#组合-union" aria-hidden="true">#</a> 组合（UNION）</h3><blockquote><p><code>UNION</code> 运算符<strong>将两个或更多查询的结果组合起来，并生成一个结果集</strong>，其中包含来自 <code>UNION</code> 中参与查询的提取行。</p></blockquote><p><code>UNION</code> 基本规则：</p><ul><li>所有查询的列数和列顺序必须相同。</li><li>每个查询中涉及表的列的数据类型必须相同或兼容。</li><li>通常返回的列名取自第一个查询。</li></ul><p>默认会去除相同行，如果需要保留相同行，使用 <code>UNION ALL</code>。</p><p>只能包含一个 <code>ORDER BY</code> 子句，并且必须位于语句的最后。</p><p>应用场景：</p><ul><li>在一个查询中从不同的表返回结构数据。</li><li>对一个表执行多个查询，按一个查询返回数据。</li></ul><p>组合查询示例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> cust_name<span class="token punctuation">,</span> cust_contact<span class="token punctuation">,</span> cust_email
<span class="token keyword">FROM</span> customers
<span class="token keyword">WHERE</span> cust_state <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">&#39;IL&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;IN&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;MI&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">UNION</span>
<span class="token keyword">SELECT</span> cust_name<span class="token punctuation">,</span> cust_contact<span class="token punctuation">,</span> cust_email
<span class="token keyword">FROM</span> customers
<span class="token keyword">WHERE</span> cust_name <span class="token operator">=</span> <span class="token string">&#39;Fun4All&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="join-vs-union" tabindex="-1"><a class="header-anchor" href="#join-vs-union" aria-hidden="true">#</a> JOIN vs UNION</h3><ul><li><code>JOIN</code> 中连接表的列可能不同，但在 <code>UNION</code> 中，所有查询的列数和列顺序必须相同。</li><li><code>UNION</code> 将查询之后的行放在一起（垂直放置），但 <code>JOIN</code> 将查询之后的列放在一起（水平放置），即它构成一个笛卡尔积。</li></ul><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h2><blockquote><p>🔔 注意：不同数据库的函数往往各不相同，因此不可移植。本节主要以 Mysql 的函数为例。</p></blockquote><h3 id="字符串函数" tabindex="-1"><a class="header-anchor" href="#字符串函数" aria-hidden="true">#</a> 字符串函数</h3><table><thead><tr><th style="text-align:center;">函数</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>CONCAT()</code></td><td style="text-align:center;">合并字符串</td></tr><tr><td style="text-align:center;"><code>LEFT()</code>、<code>RIGHT()</code></td><td style="text-align:center;">左边或者右边的字符</td></tr><tr><td style="text-align:center;"><code>LOWER()</code>、<code>UPPER()</code></td><td style="text-align:center;">转换为小写或者大写</td></tr><tr><td style="text-align:center;"><code>LTRIM()</code>、<code>RTIM()</code></td><td style="text-align:center;">去除左边或者右边的空格</td></tr><tr><td style="text-align:center;"><code>LENGTH()</code></td><td style="text-align:center;">长度</td></tr><tr><td style="text-align:center;"><code>SOUNDEX()</code></td><td style="text-align:center;">转换为语音值</td></tr></tbody></table><p>其中， <strong>SOUNDEX()</strong> 可以将一个字符串转换为描述其语音表示的字母数字模式。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> mytable
<span class="token keyword">WHERE</span> SOUNDEX<span class="token punctuation">(</span>col1<span class="token punctuation">)</span> <span class="token operator">=</span> SOUNDEX<span class="token punctuation">(</span><span class="token string">&#39;apple&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="时间函数" tabindex="-1"><a class="header-anchor" href="#时间函数" aria-hidden="true">#</a> 时间函数</h3><ul><li>日期格式：<code>YYYY-MM-DD</code></li><li>时间格式：<code>HH:MM:SS</code></li></ul><table><thead><tr><th style="text-align:center;">函 数</th><th style="text-align:center;">说 明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ADDDATE()</code></td><td style="text-align:center;">增加一个日期（天、周等）</td></tr><tr><td style="text-align:center;"><code>ADDTIME()</code></td><td style="text-align:center;">增加一个时间（时、分等）</td></tr><tr><td style="text-align:center;"><code>CURRENT_DATE()</code></td><td style="text-align:center;">返回当前日期</td></tr><tr><td style="text-align:center;"><code>CURRENT_TIME()</code></td><td style="text-align:center;">返回当前时间</td></tr><tr><td style="text-align:center;"><code>DATE()</code></td><td style="text-align:center;">返回日期时间的日期部分</td></tr><tr><td style="text-align:center;"><code>DATEDIFF()</code></td><td style="text-align:center;">计算两个日期之差</td></tr><tr><td style="text-align:center;"><code>DATE_ADD()</code></td><td style="text-align:center;">高度灵活的日期运算函数</td></tr><tr><td style="text-align:center;"><code>DATE_FORMAT()</code></td><td style="text-align:center;">返回一个格式化的日期或时间串</td></tr><tr><td style="text-align:center;"><code>DAY()</code></td><td style="text-align:center;">返回一个日期的天数部分</td></tr><tr><td style="text-align:center;"><code>DAYOFWEEK()</code></td><td style="text-align:center;">对于一个日期，返回对应的星期几</td></tr><tr><td style="text-align:center;"><code>HOUR()</code></td><td style="text-align:center;">返回一个时间的小时部分</td></tr><tr><td style="text-align:center;"><code>MINUTE()</code></td><td style="text-align:center;">返回一个时间的分钟部分</td></tr><tr><td style="text-align:center;"><code>MONTH()</code></td><td style="text-align:center;">返回一个日期的月份部分</td></tr><tr><td style="text-align:center;"><code>NOW()</code></td><td style="text-align:center;">返回当前日期和时间</td></tr><tr><td style="text-align:center;"><code>SECOND()</code></td><td style="text-align:center;">返回一个时间的秒部分</td></tr><tr><td style="text-align:center;"><code>TIME()</code></td><td style="text-align:center;">返回一个日期时间的时间部分</td></tr><tr><td style="text-align:center;"><code>YEAR()</code></td><td style="text-align:center;">返回一个日期的年份部分</td></tr></tbody></table><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">2018</span><span class="token operator">-</span><span class="token number">4</span><span class="token operator">-</span><span class="token number">14</span> <span class="token number">20</span>:<span class="token number">25</span>:<span class="token number">11</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数学函数" tabindex="-1"><a class="header-anchor" href="#数学函数" aria-hidden="true">#</a> 数学函数</h3><p>常见 Mysql 数学函数：</p><table><thead><tr><th style="text-align:center;">函数</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ABS()</code></td><td style="text-align:center;">取绝对值</td></tr><tr><td style="text-align:center;"><code>MOD()</code></td><td style="text-align:center;">取余</td></tr><tr><td style="text-align:center;"><code>ROUND()</code></td><td style="text-align:center;">四舍五入</td></tr><tr><td style="text-align:center;"><code>...</code></td><td style="text-align:center;"></td></tr></tbody></table><h3 id="聚合函数" tabindex="-1"><a class="header-anchor" href="#聚合函数" aria-hidden="true">#</a> 聚合函数</h3><table><thead><tr><th style="text-align:center;">函 数</th><th style="text-align:center;">说 明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>AVG()</code></td><td style="text-align:center;">返回某列的平均值</td></tr><tr><td style="text-align:center;"><code>COUNT()</code></td><td style="text-align:center;">返回某列的行数</td></tr><tr><td style="text-align:center;"><code>MAX()</code></td><td style="text-align:center;">返回某列的最大值</td></tr><tr><td style="text-align:center;"><code>MIN()</code></td><td style="text-align:center;">返回某列的最小值</td></tr><tr><td style="text-align:center;"><code>SUM()</code></td><td style="text-align:center;">返回某列值之和</td></tr></tbody></table><p><code>AVG()</code> 会忽略 NULL 行。</p><p>使用 DISTINCT 可以让汇总函数值汇总不同的值。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> col1<span class="token punctuation">)</span> <span class="token keyword">AS</span> avg_col
<span class="token keyword">FROM</span> mytable
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="转换函数" tabindex="-1"><a class="header-anchor" href="#转换函数" aria-hidden="true">#</a> 转换函数</h3><table><thead><tr><th style="text-align:center;">函 数</th><th style="text-align:center;">说 明</th><th>示例</th></tr></thead><tbody><tr><td style="text-align:center;"><code>CAST()</code></td><td style="text-align:center;">转换数据类型</td><td><code>SELECT CAST(&quot;2017-08-29&quot; AS DATE); -&gt; 2017-08-29</code></td></tr></tbody></table><h2 id="分组" tabindex="-1"><a class="header-anchor" href="#分组" aria-hidden="true">#</a> 分组</h2><h3 id="group-by" tabindex="-1"><a class="header-anchor" href="#group-by" aria-hidden="true">#</a> GROUP BY</h3><blockquote><p><code>GROUP BY</code> 子句将记录分组到汇总行中，<code>GROUP BY</code> 为每个组返回一个记录。</p></blockquote><p><code>GROUP BY</code> 可以按一列或多列进行分组。</p><p><code>GROUP BY</code> 通常还涉及聚合函数：COUNT，MAX，SUM，AVG 等。</p><p><code>GROUP BY</code> 按分组字段进行排序后，<code>ORDER BY</code> 可以以汇总字段来进行排序。</p><p>分组示例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> cust_name<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>cust_address<span class="token punctuation">)</span> <span class="token keyword">AS</span> addr_num
<span class="token keyword">FROM</span> Customers <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> cust_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>分组后排序示例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> cust_name<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>cust_address<span class="token punctuation">)</span> <span class="token keyword">AS</span> addr_num
<span class="token keyword">FROM</span> Customers <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> cust_name
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> cust_name <span class="token keyword">DESC</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="having" tabindex="-1"><a class="header-anchor" href="#having" aria-hidden="true">#</a> HAVING</h3><blockquote><p><code>HAVING</code> 用于对汇总的 <code>GROUP BY</code> 结果进行过滤。<code>HAVING</code> 要求存在一个 <code>GROUP BY</code> 子句。</p></blockquote><p><code>WHERE</code> 和 <code>HAVING</code> 可以在相同的查询中。</p><p><code>HAVING</code> vs <code>WHERE</code>：</p><ul><li><code>WHERE</code> 和 <code>HAVING</code> 都是用于过滤。</li><li><code>HAVING</code> 适用于汇总的组记录；而 <code>WHERE</code> 适用于单个记录。</li></ul><p>使用 <code>WHERE</code> 和 <code>HAVING</code> 过滤数据示例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> cust_name<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> num
<span class="token keyword">FROM</span> Customers
<span class="token keyword">WHERE</span> cust_email <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> cust_name
<span class="token keyword">HAVING</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>（以下为 DDL 语句用法）</strong></p><h2 id="事务" tabindex="-1"><a class="header-anchor" href="#事务" aria-hidden="true">#</a> 事务</h2><p>不能回退 <code>SELECT</code> 语句，回退 <code>SELECT</code> 语句也没意义；也不能回退 <code>CREATE</code> 和 <code>DROP</code> 语句。</p><p><strong>MySQL 默认采用隐式提交策略（<code>autocommit</code>）</strong>，每执行一条语句就把这条语句当成一个事务然后进行提交。当出现 <code>START TRANSACTION</code> 语句时，会关闭隐式提交；当 <code>COMMIT</code> 或 <code>ROLLBACK</code> 语句执行后，事务会自动关闭，重新恢复隐式提交。</p><p>通过 <code>set autocommit=0</code> 可以取消自动提交，直到 <code>set autocommit=1</code> 才会提交；<code>autocommit</code> 标记是针对每个连接而不是针对服务器的。</p><p>事务处理指令：</p><ul><li><code>START TRANSACTION</code> - 指令用于标记事务的起始点。</li><li><code>SAVEPOINT</code> - 指令用于创建保留点。</li><li><code>ROLLBACK TO</code> - 指令用于回滚到指定的保留点；如果没有设置保留点，则回退到 <code>START TRANSACTION</code> 语句处。</li><li><code>COMMIT</code> - 提交事务。</li><li><code>RELEASE SAVEPOINT</code>：删除某个保存点。</li><li><code>SET TRANSACTION</code>：设置事务的隔离级别。</li></ul><p>事务处理示例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 开始事务</span>
<span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span>

<span class="token comment">-- 插入操作 A</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">\`</span>user<span class="token punctuation">\`</span></span>
<span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;root1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;root1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;xxxx@163.com&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 创建保留点 updateA</span>
<span class="token keyword">SAVEPOINT</span> updateA<span class="token punctuation">;</span>

<span class="token comment">-- 插入操作 B</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">\`</span>user<span class="token punctuation">\`</span></span>
<span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;root2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;root2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;xxxx@163.com&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 回滚到保留点 updateA</span>
<span class="token keyword">ROLLBACK</span> <span class="token keyword">TO</span> updateA<span class="token punctuation">;</span>

<span class="token comment">-- 提交事务，只有操作 A 生效</span>
<span class="token keyword">COMMIT</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="acid" tabindex="-1"><a class="header-anchor" href="#acid" aria-hidden="true">#</a> ACID</h3><h3 id="事务隔离级别" tabindex="-1"><a class="header-anchor" href="#事务隔离级别" aria-hidden="true">#</a> 事务隔离级别</h3><hr><p><strong>（以下为 DCL 语句用法）</strong></p><h2 id="权限控制" tabindex="-1"><a class="header-anchor" href="#权限控制" aria-hidden="true">#</a> 权限控制</h2><p><code>GRANT</code> 和 <code>REVOKE</code> 可在几个层次上控制访问权限：</p><ul><li>整个服务器，使用 <code>GRANT ALL</code> 和 <code>REVOKE ALL</code>；</li><li>整个数据库，使用 ON database.*；</li><li>特定的表，使用 ON database.table；</li><li>特定的列；</li><li>特定的存储过程。</li></ul><p>新创建的账户没有任何权限。</p><p>账户用 <code>username@host</code> 的形式定义，<code>username@%</code> 使用的是默认主机名。</p><p>MySQL 的账户信息保存在 mysql 这个数据库中。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">USE</span> mysql<span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> <span class="token keyword">user</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建账户" tabindex="-1"><a class="header-anchor" href="#创建账户" aria-hidden="true">#</a> 创建账户</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> myuser IDENTIFIED <span class="token keyword">BY</span> <span class="token string">&#39;mypassword&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="修改账户名" tabindex="-1"><a class="header-anchor" href="#修改账户名" aria-hidden="true">#</a> 修改账户名</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">UPDATE</span> <span class="token keyword">user</span> <span class="token keyword">SET</span> <span class="token keyword">user</span><span class="token operator">=</span><span class="token string">&#39;newuser&#39;</span> <span class="token keyword">WHERE</span> <span class="token keyword">user</span><span class="token operator">=</span><span class="token string">&#39;myuser&#39;</span><span class="token punctuation">;</span>
FLUSH <span class="token keyword">PRIVILEGES</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="删除账户" tabindex="-1"><a class="header-anchor" href="#删除账户" aria-hidden="true">#</a> 删除账户</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">USER</span> myuser<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="查看权限" tabindex="-1"><a class="header-anchor" href="#查看权限" aria-hidden="true">#</a> 查看权限</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SHOW</span> GRANTS <span class="token keyword">FOR</span> myuser<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="授予权限" tabindex="-1"><a class="header-anchor" href="#授予权限" aria-hidden="true">#</a> 授予权限</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">GRANT</span> <span class="token keyword">SELECT</span><span class="token punctuation">,</span> <span class="token keyword">INSERT</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> myuser<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="删除权限" tabindex="-1"><a class="header-anchor" href="#删除权限" aria-hidden="true">#</a> 删除权限</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">REVOKE</span> <span class="token keyword">SELECT</span><span class="token punctuation">,</span> <span class="token keyword">INSERT</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">FROM</span> myuser<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="更改密码" tabindex="-1"><a class="header-anchor" href="#更改密码" aria-hidden="true">#</a> 更改密码</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SET</span> PASSWORD <span class="token keyword">FOR</span> myuser <span class="token operator">=</span> <span class="token string">&#39;mypass&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="存储过程" tabindex="-1"><a class="header-anchor" href="#存储过程" aria-hidden="true">#</a> 存储过程</h2><p>存储过程的英文是 Stored Procedure。它可以视为一组 SQL 语句的批处理。一旦存储过程被创建出来，使用它就像使用函数一样简单，我们直接通过调用存储过程名即可。</p><p>定义存储过程的语法格式：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> 存储过程名称 <span class="token punctuation">(</span><span class="token punctuation">[</span>参数列表<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span>
    需要执行的语句
<span class="token keyword">END</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>存储过程定义语句类型：</p><ul><li><code>CREATE PROCEDURE</code> 用于创建存储过程</li><li><code>DROP PROCEDURE</code> 用于删除存储过程</li><li><code>ALTER PROCEDURE</code> 用于修改存储过程</li></ul><h3 id="使用存储过程" tabindex="-1"><a class="header-anchor" href="#使用存储过程" aria-hidden="true">#</a> 使用存储过程</h3><p>创建存储过程的要点：</p><ul><li><code>DELIMITER</code> 用于定义语句的结束符</li><li>存储过程的 3 种参数类型： <ul><li><code>IN</code>：存储过程的入参</li><li><code>OUT</code>：存储过程的出参</li><li><code>INPUT</code>：既是存储过程的入参，也是存储过程的出参</li></ul></li><li>流控制语句： <ul><li><code>BEGIN…END</code>：<code>BEGIN…END</code> 中间包含了多个语句，每个语句都以（<code>;</code>）号为结束符。</li><li><code>DECLARE</code>：<code>DECLARE</code> 用来声明变量，使用的位置在于 <code>BEGIN…END</code> 语句中间，而且需要在其他语句使用之前进行变量的声明。</li><li><code>SET</code>：赋值语句，用于对变量进行赋值。</li><li><code>SELECT…INTO</code>：把从数据表中查询的结果存放到变量中，也就是为变量赋值。每次只能给一个变量赋值，不支持集合的操作。</li><li><code>IF…THEN…ENDIF</code>：条件判断语句，可以在 <code>IF…THEN…ENDIF</code> 中使用 <code>ELSE</code> 和 <code>ELSEIF</code> 来进行条件判断。</li><li><code>CASE</code>：<code>CASE</code> 语句用于多条件的分支判断。</li></ul></li></ul><p>创建存储过程示例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">PROCEDURE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">\`</span>proc_adder<span class="token punctuation">\`</span></span><span class="token punctuation">;</span>
<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">DEFINER</span><span class="token operator">=</span><span class="token identifier"><span class="token punctuation">\`</span>root<span class="token punctuation">\`</span></span><span class="token variable">@\`localhost\`</span> <span class="token keyword">PROCEDURE</span> <span class="token identifier"><span class="token punctuation">\`</span>proc_adder<span class="token punctuation">\`</span></span><span class="token punctuation">(</span><span class="token operator">IN</span> a <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token operator">IN</span> b <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">OUT</span> sum <span class="token keyword">int</span><span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span>
    <span class="token keyword">DECLARE</span> c <span class="token keyword">int</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> a <span class="token operator">is</span> <span class="token boolean">null</span> <span class="token keyword">then</span> <span class="token keyword">set</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> b <span class="token operator">is</span> <span class="token boolean">null</span> <span class="token keyword">then</span> <span class="token keyword">set</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>

    <span class="token keyword">set</span> sum  <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token keyword">END</span>
<span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用存储过程示例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">set</span> <span class="token variable">@b</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">call</span> proc_adder<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token variable">@b</span><span class="token punctuation">,</span><span class="token variable">@s</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token variable">@s</span> <span class="token keyword">as</span> sum<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="存储过程的利弊" tabindex="-1"><a class="header-anchor" href="#存储过程的利弊" aria-hidden="true">#</a> 存储过程的利弊</h3><p>存储过程的优点：</p><ul><li><strong>执行效率高</strong>：一次编译多次使用。</li><li><strong>安全性强</strong>：在设定存储过程的时候可以设置对用户的使用权限，这样就和视图一样具有较强的安全性。</li><li><strong>可复用</strong>：将代码封装，可以提高代码复用。</li><li><strong>性能好</strong><ul><li>由于是预先编译，因此具有很高的性能。</li><li>一个存储过程替代大量 T_SQL 语句 ，可以降低网络通信量，提高通信速率。</li></ul></li></ul><p>存储过程的缺点：</p><ul><li><strong>可移植性差</strong>：存储过程不能跨数据库移植。由于不同数据库的存储过程语法几乎都不一样，十分难以维护（不通用）。</li><li><strong>调试困难</strong>：只有少数 DBMS 支持存储过程的调试。对于复杂的存储过程来说，开发和维护都不容易。</li><li><strong>版本管理困难</strong>：比如数据表索引发生变化了，可能会导致存储过程失效。我们在开发软件的时候往往需要进行版本管理，但是存储过程本身没有版本控制，版本迭代更新的时候很麻烦。</li><li><strong>不适合高并发的场景</strong>：高并发的场景需要减少数据库的压力，有时数据库会采用分库分表的方式，而且对可扩展性要求很高，在这种情况下，存储过程会变得难以维护，增加数据库的压力，显然就不适用了。</li></ul><blockquote><p><em>综上，存储过程的优缺点都非常突出，是否使用一定要慎重，需要根据具体应用场景来权衡</em>。</p></blockquote><h3 id="触发器" tabindex="-1"><a class="header-anchor" href="#触发器" aria-hidden="true">#</a> 触发器</h3><blockquote><p>触发器可以视为一种特殊的存储过程。</p><p>触发器是一种与表操作有关的数据库对象，当触发器所在表上出现指定事件时，将调用该对象，即表的操作事件触发表上的触发器的执行。</p></blockquote><h4 id="触发器特性" tabindex="-1"><a class="header-anchor" href="#触发器特性" aria-hidden="true">#</a> 触发器特性</h4><p>可以使用触发器来进行审计跟踪，把修改记录到另外一张表中。</p><p>MySQL 不允许在触发器中使用 <code>CALL</code> 语句 ，也就是不能调用存储过程。</p><p><strong><code>BEGIN</code> 和 <code>END</code></strong></p><p>当触发器的触发条件满足时，将会执行 <code>BEGIN</code> 和 <code>END</code> 之间的触发器执行动作。</p><blockquote><p>🔔 注意：在 MySQL 中，分号 <code>;</code> 是语句结束的标识符，遇到分号表示该段语句已经结束，MySQL 可以开始执行了。因此，解释器遇到触发器执行动作中的分号后就开始执行，然后会报错，因为没有找到和 BEGIN 匹配的 END。</p><p>这时就会用到 <code>DELIMITER</code> 命令（<code>DELIMITER</code> 是定界符，分隔符的意思）。它是一条命令，不需要语句结束标识，语法为：<code>DELIMITER new_delemiter</code>。<code>new_delemiter</code> 可以设为 1 个或多个长度的符号，默认的是分号 <code>;</code>，我们可以把它修改为其他符号，如 <code>$</code> - <code>DELIMITER $</code> 。在这之后的语句，以分号结束，解释器不会有什么反应，只有遇到了 <code>$</code>，才认为是语句结束。注意，使用完之后，我们还应该记得把它给修改回来。</p></blockquote><p><strong><code>NEW</code> 和 <code>OLD</code></strong></p><ul><li>MySQL 中定义了 <code>NEW</code> 和 <code>OLD</code> 关键字，用来表示触发器的所在表中，触发了触发器的那一行数据。</li><li>在 <code>INSERT</code> 型触发器中，<code>NEW</code> 用来表示将要（<code>BEFORE</code>）或已经（<code>AFTER</code>）插入的新数据；</li><li>在 <code>UPDATE</code> 型触发器中，<code>OLD</code> 用来表示将要或已经被修改的原数据，<code>NEW</code> 用来表示将要或已经修改为的新数据；</li><li>在 <code>DELETE</code> 型触发器中，<code>OLD</code> 用来表示将要或已经被删除的原数据；</li><li>使用方法： <code>NEW.columnName</code> （columnName 为相应数据表某一列名）</li></ul><h4 id="触发器指令" tabindex="-1"><a class="header-anchor" href="#触发器指令" aria-hidden="true">#</a> 触发器指令</h4><blockquote><p>提示：为了理解触发器的要点，有必要先了解一下创建触发器的指令。</p></blockquote><p><code>CREATE TRIGGER</code> 指令用于创建触发器。</p><p>语法：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> trigger_name
trigger_time
trigger_event
<span class="token keyword">ON</span> table_name
<span class="token keyword">FOR EACH ROW</span>
<span class="token keyword">BEGIN</span>
  trigger_statements
<span class="token keyword">END</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：</p><ul><li>trigger_name：触发器名</li><li>trigger_time: 触发器的触发时机。取值为 <code>BEFORE</code> 或 <code>AFTER</code>。</li><li>trigger_event: 触发器的监听事件。取值为 <code>INSERT</code>、<code>UPDATE</code> 或 <code>DELETE</code>。</li><li>table_name: 触发器的监听目标。指定在哪张表上建立触发器。</li><li>FOR EACH ROW: 行级监视，Mysql 固定写法，其他 DBMS 不同。</li><li>trigger_statements: 触发器执行动作。是一条或多条 SQL 语句的列表，列表内的每条语句都必须用分号 <code>;</code> 来结尾。</li></ul><p>创建触发器示例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DELIMITER</span> $
<span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> <span class="token identifier"><span class="token punctuation">\`</span>trigger_insert_user<span class="token punctuation">\`</span></span>
<span class="token keyword">AFTER</span> <span class="token keyword">INSERT</span> <span class="token keyword">ON</span> <span class="token identifier"><span class="token punctuation">\`</span>user<span class="token punctuation">\`</span></span>
<span class="token keyword">FOR EACH ROW</span>
<span class="token keyword">BEGIN</span>
    <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">\`</span>user_history<span class="token punctuation">\`</span></span><span class="token punctuation">(</span>user_id<span class="token punctuation">,</span> operate_type<span class="token punctuation">,</span> operate_time<span class="token punctuation">)</span>
    <span class="token keyword">VALUES</span> <span class="token punctuation">(</span>NEW<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token string">&#39;add a user&#39;</span><span class="token punctuation">,</span>  <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">END</span> $
<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看触发器示例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SHOW</span> TRIGGERS<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>删除触发器示例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">TRIGGER</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> trigger_insert_user<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="游标" tabindex="-1"><a class="header-anchor" href="#游标" aria-hidden="true">#</a> 游标</h2><blockquote><p>游标（CURSOR）是一个存储在 DBMS 服务器上的数据库查询，它不是一条 <code>SELECT</code> 语句，而是被该语句检索出来的结果集。在存储过程中使用游标可以对一个结果集进行移动遍历。</p></blockquote><p>游标主要用于交互式应用，其中用户需要对数据集中的任意行进行浏览和修改。</p><p>使用游标的步骤：</p><ol><li><strong>定义游标</strong>：通过 <code>DECLARE cursor_name CURSOR FOR &lt;语句&gt;</code> 定义游标。这个过程没有实际检索出数据。</li><li><strong>打开游标</strong>：通过 <code>OPEN cursor_name</code> 打开游标。</li><li><strong>取出数据</strong>：通过 <code>FETCH cursor_name INTO var_name ...</code> 获取数据。</li><li><strong>关闭游标</strong>：通过 <code>CLOSE cursor_name</code> 关闭游标。</li><li><strong>释放游标</strong>：通过 <code>DEALLOCATE PREPARE</code> 释放游标。</li></ol><p>游标使用示例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DELIMITER</span> $
<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> getTotal<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span>
    <span class="token keyword">DECLARE</span> total <span class="token keyword">INT</span><span class="token punctuation">;</span>
    <span class="token comment">-- 创建接收游标数据的变量</span>
    <span class="token keyword">DECLARE</span> sid <span class="token keyword">INT</span><span class="token punctuation">;</span>
    <span class="token keyword">DECLARE</span> sname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">-- 创建总数变量</span>
    <span class="token keyword">DECLARE</span> sage <span class="token keyword">INT</span><span class="token punctuation">;</span>
    <span class="token comment">-- 创建结束标志变量</span>
    <span class="token keyword">DECLARE</span> done <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token comment">-- 创建游标</span>
    <span class="token keyword">DECLARE</span> cur <span class="token keyword">CURSOR</span> <span class="token keyword">FOR</span> <span class="token keyword">SELECT</span> id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age <span class="token keyword">from</span> cursor_table <span class="token keyword">where</span> age<span class="token operator">&gt;</span><span class="token number">30</span><span class="token punctuation">;</span>
    <span class="token comment">-- 指定游标循环结束时的返回值</span>
    <span class="token keyword">DECLARE</span> <span class="token keyword">CONTINUE</span> <span class="token keyword">HANDLER</span> <span class="token keyword">FOR</span> <span class="token operator">NOT</span> FOUND <span class="token keyword">SET</span> done <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">SET</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">OPEN</span> cur<span class="token punctuation">;</span>
    <span class="token keyword">FETCH</span> cur <span class="token keyword">INTO</span> sid<span class="token punctuation">,</span> sname<span class="token punctuation">,</span> sage<span class="token punctuation">;</span>
    <span class="token keyword">WHILE</span><span class="token punctuation">(</span><span class="token operator">NOT</span> done<span class="token punctuation">)</span>
    <span class="token keyword">DO</span>
        <span class="token keyword">SET</span> total <span class="token operator">=</span> total <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">FETCH</span> cur <span class="token keyword">INTO</span> sid<span class="token punctuation">,</span> sname<span class="token punctuation">,</span> sage<span class="token punctuation">;</span>
    <span class="token keyword">END</span> <span class="token keyword">WHILE</span><span class="token punctuation">;</span>

    <span class="token keyword">CLOSE</span> cur<span class="token punctuation">;</span>
    <span class="token keyword">SELECT</span> total<span class="token punctuation">;</span>
<span class="token keyword">END</span> $
<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span>

<span class="token comment">-- 调用存储过程</span>
<span class="token keyword">call</span> getTotal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,161),r={href:"https://book.douban.com/subject/35167240/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://draveness.me/mysql-transaction",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.cnblogs.com/CraryPrimitiveMan/p/4206942.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://zh.wikipedia.org/wiki/SQL",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.sitesbay.com/sql/index",target:"_blank",rel:"noopener noreferrer"},h={href:"https://www.w3resource.com/sql/subqueries/understanding-sql-subqueries.php",target:"_blank",rel:"noopener noreferrer"},b={href:"https://stackoverflow.com/questions/6294778/mysql-quick-breakdown-of-the-types-of-joins",target:"_blank",rel:"noopener noreferrer"},y={href:"https://www.w3resource.com/sql/sql-union.php",target:"_blank",rel:"noopener noreferrer"},g={href:"https://www.w3resource.com/sql/database-security/create-users.php",target:"_blank",rel:"noopener noreferrer"},E={href:"https://www.cnblogs.com/chenpi/p/5136483.html",target:"_blank",rel:"noopener noreferrer"};function w(N,R){const s=o("ExternalLinkIcon");return c(),l("div",null,[i,n("ul",null,[n("li",null,[n("a",r,[a("《SQL 必知必会》"),e(s)])]),n("li",null,[n("a",u,[a("『浅入深出』MySQL 中事务的实现"),e(s)])]),n("li",null,[n("a",k,[a("MySQL 的学习--触发器"),e(s)])]),n("li",null,[n("a",v,[a("维基百科词条 - SQL"),e(s)])]),n("li",null,[n("a",m,[a("https://www.sitesbay.com/sql/index"),e(s)])]),n("li",null,[n("a",h,[a("SQL Subqueries"),e(s)])]),n("li",null,[n("a",b,[a("Quick breakdown of the types of joins"),e(s)])]),n("li",null,[n("a",y,[a("SQL UNION"),e(s)])]),n("li",null,[n("a",g,[a("SQL database security"),e(s)])]),n("li",null,[n("a",E,[a("Mysql 中的存储过程"),e(s)])])])])}const x=t(p,[["render",w],["__file","03.SQL语法高级特性.html.vue"]]);export{x as default};
