import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as l,c as r,a,b as n,d as s,e as t}from"./app-9db88853.js";const d={},c=t('<h1 id="jvm-命令行工具" tabindex="-1"><a class="header-anchor" href="#jvm-命令行工具" aria-hidden="true">#</a> JVM 命令行工具</h1><blockquote><p>Java 程序员免不了故障排查工作，所以经常需要使用一些 JVM 工具。</p><p>JDK 自带了一些实用的命令行工具来监控、分析 JVM 信息，掌握它们，非常有助于 TroubleShooting。</p></blockquote><p>以下是较常用的 JDK 命令行工具：</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>jps</code></td><td>JVM 进程状态工具。显示系统内的所有 JVM 进程。</td></tr><tr><td><code>jstat</code></td><td>JVM 统计监控工具。监控虚拟机运行时状态信息，它可以显示出 JVM 进程中的类装载、内存、GC、JIT 编译等运行数据。</td></tr><tr><td><code>jmap</code></td><td>JVM 堆内存分析工具。用于打印 JVM 进程对象直方图、类加载统计。并且可以生成堆转储快照（一般称为 heapdump 或 dump 文件）。</td></tr><tr><td><code>jstack</code></td><td>JVM 栈查看工具。用于打印 JVM 进程的线程和锁的情况。并且可以生成线程快照（一般称为 threaddump 或 javacore 文件）。</td></tr><tr><td><code>jhat</code></td><td>用来分析 jmap 生成的 dump 文件。</td></tr><tr><td><code>jinfo</code></td><td>JVM 信息查看工具。用于实时查看和调整 JVM 进程参数。</td></tr><tr><td><code>jcmd</code></td><td>JVM 命令行调试 工具。用于向 JVM 进程发送调试命令。</td></tr></tbody></table><h2 id="jps" tabindex="-1"><a class="header-anchor" href="#jps" aria-hidden="true">#</a> jps</h2>',5),p={href:"https://docs.oracle.com/en/java/javase/11/tools/jps.html#GUID-6EB65B96-F9DD-4356-B825-6146E9EEC81E",target:"_blank",rel:"noopener noreferrer"},u=t(`<h3 id="jps-命令用法" tabindex="-1"><a class="header-anchor" href="#jps-命令用法" aria-hidden="true">#</a> jps 命令用法</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>jps <span class="token punctuation">[</span>option<span class="token punctuation">]</span> <span class="token punctuation">[</span>hostid<span class="token punctuation">]</span>
jps <span class="token punctuation">[</span>-help<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不指定 hostid 就默认为当前主机或服务器。</p><p>常用参数：</p><ul><li><code>option</code> - 选项参数 <ul><li><code>-m</code> - 输出 JVM 启动时传递给 main() 的参数。</li><li><code>-l</code> - 输出主类的全名，如果进程执行的是 jar 包，输出 jar 路径。</li><li><code>-v</code> - 显示传递给 JVM 的参数。</li><li><code>-q</code> - 仅输出本地 JVM 进程 ID。</li><li><code>-V</code> - 仅输出本地 JVM 标识符。</li></ul></li><li><code>hostid</code> - RMI 注册表中注册的主机名。如果不指定 hostid 就默认为当前主机或服务器。</li></ul><p>其中 <code>option</code>、<code>hostid</code> 参数也可以不写。</p><h3 id="jps-使用示例" tabindex="-1"><a class="header-anchor" href="#jps-使用示例" aria-hidden="true">#</a> jps 使用示例</h3><p>【示例】列出本地 Java 进程</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ jps
<span class="token number">18027</span> Java2Demo.JAR
<span class="token number">18032</span> jps
<span class="token number">18005</span> jstat
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【示例】列出本地 Java 进程 ID</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ jps <span class="token parameter variable">-q</span>
<span class="token number">8841</span>
<span class="token number">1292</span>
<span class="token number">5398</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【示例】列出本地 Java 进程 ID，并输出主类的全名，如果进程执行的是 jar 包，输出 jar 路径</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ jps <span class="token parameter variable">-l</span> remote.domain
<span class="token number">3002</span> /opt/jdk1.7.0/demo/jfc/Java2D/Java2Demo.JAR
<span class="token number">2857</span> sun.tools.jstatd.jstatd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jstat" tabindex="-1"><a class="header-anchor" href="#jstat" aria-hidden="true">#</a> jstat</h2>`,14),m={href:"https://docs.oracle.com/en/java/javase/11/tools/jstat.html",target:"_blank",rel:"noopener noreferrer"},v=t(`<h3 id="jstat-命令用法" tabindex="-1"><a class="header-anchor" href="#jstat-命令用法" aria-hidden="true">#</a> jstat 命令用法</h3><p>命令格式：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>jstat <span class="token punctuation">[</span>option<span class="token punctuation">]</span> VMID <span class="token punctuation">[</span>interval<span class="token punctuation">]</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>常用参数：</p><ul><li><code>option</code> - 选项参数，用于指定用户需要查询的虚拟机信息 <ul><li><code>-class</code> - 监视类装载、卸载数量、总空间以及类装载所耗费的时间</li><li><code>-compiler</code>：显示 JIT 编译的相关信息；</li><li><code>-gc</code>：监视 Java 堆状况，包括 Eden 区、两个 survivor 区、老年代、永久代等区的容量、已用空间、GC 时间合计等信息。</li><li><code>-gccapacity</code>：显示各个代的容量以及使用情况；</li><li><code>-gcmetacapacity</code>：显示 Metaspace 的大小；</li><li><code>-gcnew</code>：显示新生代信息；</li><li><code>-gcnewcapacity</code>：显示新生代大小和使用情况；</li><li><code>-gcold</code>：显示老年代和永久代的信息；</li><li><code>-gcoldcapacity</code>：显示老年代的大小；</li><li><code>-gcutil</code>：显示垃圾回收统计信息；</li><li><code>-gccause</code>：显示垃圾回收的相关信息（通 -gcutil），同时显示最后一次或当前正在发生的垃圾回收的诱因；</li><li><code>-printcompilation</code>：输出 JIT 编译的方法信息。</li></ul></li><li><code>VMID</code> - 如果是本地虚拟机进程，则 VMID 与 LVMID 是一致的；如果是远程虚拟机进程，那 VMID 的格式应当是：<code>[protocol:][//]lvmid[@hostname[:port]/servername]</code></li><li><code>interval</code> - 查询间隔</li><li><code>count</code> - 查询次数</li></ul>`,5),b={href:"https://www.cnblogs.com/yjd_hycf_space/p/7755633.html",target:"_blank",rel:"noopener noreferrer"},h=t(`<h3 id="jstat-使用示例" tabindex="-1"><a class="header-anchor" href="#jstat-使用示例" aria-hidden="true">#</a> jstat 使用示例</h3><h4 id="类加载统计" tabindex="-1"><a class="header-anchor" href="#类加载统计" aria-hidden="true">#</a> 类加载统计</h4><p>使用 <code>jstat -class pid</code> 命令可以查看编译统计信息。</p><p>【参数】</p><ul><li>Loaded - 加载 class 的数量</li><li>Bytes - 所占用空间大小</li><li>Unloaded - 未加载数量</li><li>Bytes - 未加载占用空间</li><li>Time - 时间</li></ul><p>【示例】查看类加载信息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ jstat <span class="token parameter variable">-class</span> <span class="token number">7129</span>
Loaded  Bytes  Unloaded  Bytes     Time
 <span class="token number">26749</span> <span class="token number">50405.3</span>      <span class="token number">873</span>  <span class="token number">1216.8</span>      <span class="token number">19.75</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="编译统计" tabindex="-1"><a class="header-anchor" href="#编译统计" aria-hidden="true">#</a> 编译统计</h4><p>使用 <code>jstat -compiler pid</code> 命令可以查看编译统计信息。</p><p>【示例】</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ jstat <span class="token parameter variable">-compiler</span> <span class="token number">7129</span>
Compiled Failed Invalid   Time   FailedType FailedMethod
   <span class="token number">42030</span>      <span class="token number">2</span>       <span class="token number">0</span>   <span class="token number">302.53</span>          <span class="token number">1</span> org/apache/felix/framework/BundleWiringImpl<span class="token variable">$BundleClassLoader</span> findClass
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【参数】</p><ul><li>Compiled - 编译数量</li><li>Failed - 失败数量</li><li>Invalid - 不可用数量</li><li>Time - 时间</li><li>FailedType - 失败类型</li><li>FailedMethod - 失败的方法</li></ul><h4 id="gc-统计" tabindex="-1"><a class="header-anchor" href="#gc-统计" aria-hidden="true">#</a> GC 统计</h4><p>使用 <code>jstat -gc pid time</code> 命令可以查看 GC 统计信息。</p><p>【示例】以 250 毫秒的间隔进行 7 个采样，并显示-gcutil 选项指定的输出。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ jstat <span class="token parameter variable">-gcutil</span> <span class="token number">21891</span> <span class="token number">250</span> <span class="token number">7</span>
  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT
  <span class="token number">0.00</span>  <span class="token number">97.02</span>  <span class="token number">70.31</span>  <span class="token number">66.80</span>  <span class="token number">95.52</span>  <span class="token number">89.14</span>      <span class="token number">7</span>    <span class="token number">0.300</span>     <span class="token number">0</span>    <span class="token number">0.000</span>    <span class="token number">0.300</span>
  <span class="token number">0.00</span>  <span class="token number">97.02</span>  <span class="token number">86.23</span>  <span class="token number">66.80</span>  <span class="token number">95.52</span>  <span class="token number">89.14</span>      <span class="token number">7</span>    <span class="token number">0.300</span>     <span class="token number">0</span>    <span class="token number">0.000</span>    <span class="token number">0.300</span>
  <span class="token number">0.00</span>  <span class="token number">97.02</span>  <span class="token number">96.53</span>  <span class="token number">66.80</span>  <span class="token number">95.52</span>  <span class="token number">89.14</span>      <span class="token number">7</span>    <span class="token number">0.300</span>     <span class="token number">0</span>    <span class="token number">0.000</span>    <span class="token number">0.300</span>
 <span class="token number">91.03</span>   <span class="token number">0.00</span>   <span class="token number">1.98</span>  <span class="token number">68.19</span>  <span class="token number">95.89</span>  <span class="token number">91.24</span>      <span class="token number">8</span>    <span class="token number">0.378</span>     <span class="token number">0</span>    <span class="token number">0.000</span>    <span class="token number">0.378</span>
 <span class="token number">91.03</span>   <span class="token number">0.00</span>  <span class="token number">15.82</span>  <span class="token number">68.19</span>  <span class="token number">95.89</span>  <span class="token number">91.24</span>      <span class="token number">8</span>    <span class="token number">0.378</span>     <span class="token number">0</span>    <span class="token number">0.000</span>    <span class="token number">0.378</span>
 <span class="token number">91.03</span>   <span class="token number">0.00</span>  <span class="token number">17.80</span>  <span class="token number">68.19</span>  <span class="token number">95.89</span>  <span class="token number">91.24</span>      <span class="token number">8</span>    <span class="token number">0.378</span>     <span class="token number">0</span>    <span class="token number">0.000</span>    <span class="token number">0.378</span>
 <span class="token number">91.03</span>   <span class="token number">0.00</span>  <span class="token number">17.80</span>  <span class="token number">68.19</span>  <span class="token number">95.89</span>  <span class="token number">91.24</span>      <span class="token number">8</span>    <span class="token number">0.378</span>     <span class="token number">0</span>    <span class="token number">0.000</span>    <span class="token number">0.378</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【示例】以 1 秒的间隔进行 4 个采样，并显示-gc 选项指定的输出。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ jstat <span class="token parameter variable">-gc</span> <span class="token number">25196</span> 1s <span class="token number">4</span>
 S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT
<span class="token number">20928.0</span> <span class="token number">20928.0</span>  <span class="token number">0.0</span>    <span class="token number">0.0</span>   <span class="token number">167936.0</span>  <span class="token number">8880.5</span>   <span class="token number">838912.0</span>   <span class="token number">80291.2</span>   <span class="token number">106668.0</span> <span class="token number">100032.1</span> <span class="token number">12772.0</span> <span class="token number">11602.2</span>    <span class="token number">760</span>   <span class="token number">14.332</span>  <span class="token number">580</span>   <span class="token number">656.218</span>  <span class="token number">670.550</span>
<span class="token number">20928.0</span> <span class="token number">20928.0</span>  <span class="token number">0.0</span>    <span class="token number">0.0</span>   <span class="token number">167936.0</span>  <span class="token number">8880.5</span>   <span class="token number">838912.0</span>   <span class="token number">80291.2</span>   <span class="token number">106668.0</span> <span class="token number">100032.1</span> <span class="token number">12772.0</span> <span class="token number">11602.2</span>    <span class="token number">760</span>   <span class="token number">14.332</span>  <span class="token number">580</span>   <span class="token number">656.218</span>  <span class="token number">670.550</span>
<span class="token number">20928.0</span> <span class="token number">20928.0</span>  <span class="token number">0.0</span>    <span class="token number">0.0</span>   <span class="token number">167936.0</span>  <span class="token number">8880.5</span>   <span class="token number">838912.0</span>   <span class="token number">80291.2</span>   <span class="token number">106668.0</span> <span class="token number">100032.1</span> <span class="token number">12772.0</span> <span class="token number">11602.2</span>    <span class="token number">760</span>   <span class="token number">14.332</span>  <span class="token number">580</span>   <span class="token number">656.218</span>  <span class="token number">670.550</span>
<span class="token number">20928.0</span> <span class="token number">20928.0</span>  <span class="token number">0.0</span>    <span class="token number">0.0</span>   <span class="token number">167936.0</span>  <span class="token number">8880.5</span>   <span class="token number">838912.0</span>   <span class="token number">80291.2</span>   <span class="token number">106668.0</span> <span class="token number">100032.1</span> <span class="token number">12772.0</span> <span class="token number">11602.2</span>    <span class="token number">760</span>   <span class="token number">14.332</span>  <span class="token number">580</span>   <span class="token number">656.218</span>  <span class="token number">670.550</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数说明：</p><ul><li><code>S0C</code>：年轻代中 To Survivor 的容量（单位 KB）；</li><li><code>S1C</code>：年轻代中 From Survivor 的容量（单位 KB）；</li><li><code>S0U</code>：年轻代中 To Survivor 目前已使用空间（单位 KB）；</li><li><code>S1U</code>：年轻代中 From Survivor 目前已使用空间（单位 KB）；</li><li><code>EC</code>：年轻代中 Eden 的容量（单位 KB）；</li><li><code>EU</code>：年轻代中 Eden 目前已使用空间（单位 KB）；</li><li><code>OC</code>：Old 代的容量（单位 KB）；</li><li><code>OU</code>：Old 代目前已使用空间（单位 KB）；</li><li><code>MC</code>：Metaspace 的容量（单位 KB）；</li><li><code>MU</code>：Metaspace 目前已使用空间（单位 KB）；</li><li><code>YGC</code>：从应用程序启动到采样时年轻代中 gc 次数；</li><li><code>YGCT</code>：从应用程序启动到采样时年轻代中 gc 所用时间 (s)；</li><li><code>FGC</code>：从应用程序启动到采样时 old 代（全 gc）gc 次数；</li><li><code>FGCT</code>：从应用程序启动到采样时 old 代（全 gc）gc 所用时间 (s)；</li><li><code>GCT</code>：从应用程序启动到采样时 gc 用的总时间 (s)。</li></ul>`,21),k={href:"http://docs.oracle.com/javase/8/docs/technotes/tools/unix/jstat.html",target:"_blank",rel:"noopener noreferrer"},g=a("h2",{id:"jmap",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#jmap","aria-hidden":"true"},"#"),n(" jmap")],-1),f={href:"https://docs.oracle.com/en/java/javase/11/tools/jmap.html",target:"_blank",rel:"noopener noreferrer"},j=a("code",null,"finalize",-1),x=a("p",null,[n("如果不使用这个命令，还可以使用 "),a("code",null,"-XX:+HeapDumpOnOutOfMemoryError"),n(" 参数来让虚拟机出现 OOM 的时候，自动生成 dump 文件。")],-1),T=t(`<h3 id="jmap-命令用法" tabindex="-1"><a class="header-anchor" href="#jmap-命令用法" aria-hidden="true">#</a> jmap 命令用法</h3><p>命令格式：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>jmap [option] pid
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>option</code> 选项参数：</p><ul><li><code>-dump</code> - 生成堆转储快照。<code>-dump:live</code> 只保存堆中的存活对象。</li><li><code>-finalizerinfo</code> - 显示在 F-Queue 队列等待执行 <code>finalizer</code> 方法的对象</li><li><code>-heap</code> - 显示 Java 堆详细信息。</li><li><code>-histo</code> - 显示堆中对象的统计信息，包括类、实例数量、合计容量。<code>-histo:live</code> 只统计堆中的存活对象。</li><li><code>-permstat</code> - to print permanent generation statistics</li><li><code>-F</code> - 当-dump 没有响应时，强制生成 dump 快照</li></ul><h3 id="jstat-使用示例-1" tabindex="-1"><a class="header-anchor" href="#jstat-使用示例-1" aria-hidden="true">#</a> jstat 使用示例</h3><h4 id="生成-heapdump-快照" tabindex="-1"><a class="header-anchor" href="#生成-heapdump-快照" aria-hidden="true">#</a> 生成 heapdump 快照</h4><p>dump 堆到文件，format 指定输出格式，live 指明是活着的对象，file 指定文件名</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ jmap -dump:live,format<span class="token operator">=</span>b,file<span class="token operator">=</span>dump.hprof <span class="token number">28920</span>
Dumping heap to /home/xxx/dump.hprof <span class="token punctuation">..</span>.
Heap dump <span class="token function">file</span> created
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>dump.hprof 这个后缀是为了后续可以直接用 MAT(Memory Anlysis Tool)等工具打开。</p><h4 id="查看实例数最多的类" tabindex="-1"><a class="header-anchor" href="#查看实例数最多的类" aria-hidden="true">#</a> 查看实例数最多的类</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ jmap <span class="token parameter variable">-histo</span> <span class="token number">29527</span> <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-n</span> <span class="token number">6</span>

 num     <span class="token comment">#instances         #bytes  class name</span>
----------------------------------------------
   <span class="token number">1</span>:      <span class="token number">13673280</span>     <span class="token number">1438961864</span>  <span class="token punctuation">[</span>C
   <span class="token number">2</span>:       <span class="token number">1207166</span>      <span class="token number">411277184</span>  <span class="token punctuation">[</span>I
   <span class="token number">3</span>:       <span class="token number">7382322</span>      <span class="token number">347307096</span>  <span class="token punctuation">[</span>Ljava.lang.Object<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="查看指定进程的堆信息" tabindex="-1"><a class="header-anchor" href="#查看指定进程的堆信息" aria-hidden="true">#</a> 查看指定进程的堆信息</h4><p>注意：使用 CMS GC 情况下，<code>jmap -heap PID</code> 的执行有可能会导致 java 进程挂起。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ jmap <span class="token parameter variable">-heap</span> <span class="token number">12379</span>
Attaching to process ID <span class="token number">12379</span>, please wait<span class="token punctuation">..</span>.
Debugger attached successfully.
Server compiler detected.
JVM version is <span class="token number">17.0</span>-b16

using thread-local object allocation.
Parallel GC with <span class="token number">6</span> thread<span class="token punctuation">(</span>s<span class="token punctuation">)</span>

Heap Configuration:
   MinHeapFreeRatio <span class="token operator">=</span> <span class="token number">40</span>
   MaxHeapFreeRatio <span class="token operator">=</span> <span class="token number">70</span>
   MaxHeapSize      <span class="token operator">=</span> <span class="token number">83886080</span> <span class="token punctuation">(</span><span class="token number">80</span>.0MB<span class="token punctuation">)</span>
   NewSize          <span class="token operator">=</span> <span class="token number">1310720</span> <span class="token punctuation">(</span><span class="token number">1</span>.25MB<span class="token punctuation">)</span>
   MaxNewSize       <span class="token operator">=</span> <span class="token number">17592186044415</span> MB
   OldSize          <span class="token operator">=</span> <span class="token number">5439488</span> <span class="token punctuation">(</span><span class="token number">5</span>.1875MB<span class="token punctuation">)</span>
   NewRatio         <span class="token operator">=</span> <span class="token number">2</span>
   SurvivorRatio    <span class="token operator">=</span> <span class="token number">8</span>
   PermSize         <span class="token operator">=</span> <span class="token number">20971520</span> <span class="token punctuation">(</span><span class="token number">20</span>.0MB<span class="token punctuation">)</span>
   MaxPermSize      <span class="token operator">=</span> <span class="token number">88080384</span> <span class="token punctuation">(</span><span class="token number">84</span>.0MB<span class="token punctuation">)</span>

Heap Usage:
PS Young Generation
Eden Space:
   capacity <span class="token operator">=</span> <span class="token number">9306112</span> <span class="token punctuation">(</span><span class="token number">8</span>.875MB<span class="token punctuation">)</span>
   used     <span class="token operator">=</span> <span class="token number">5375360</span> <span class="token punctuation">(</span><span class="token number">5</span>.1263427734375MB<span class="token punctuation">)</span>
   <span class="token function">free</span>     <span class="token operator">=</span> <span class="token number">3930752</span> <span class="token punctuation">(</span><span class="token number">3</span>.7486572265625MB<span class="token punctuation">)</span>
   <span class="token number">57.761608714788736</span>% used
From Space:
   capacity <span class="token operator">=</span> <span class="token number">9306112</span> <span class="token punctuation">(</span><span class="token number">8</span>.875MB<span class="token punctuation">)</span>
   used     <span class="token operator">=</span> <span class="token number">3425240</span> <span class="token punctuation">(</span><span class="token number">3</span>.2665634155273438MB<span class="token punctuation">)</span>
   <span class="token function">free</span>     <span class="token operator">=</span> <span class="token number">5880872</span> <span class="token punctuation">(</span><span class="token number">5</span>.608436584472656MB<span class="token punctuation">)</span>
   <span class="token number">36.80634834397007</span>% used
To Space:
   capacity <span class="token operator">=</span> <span class="token number">9306112</span> <span class="token punctuation">(</span><span class="token number">8</span>.875MB<span class="token punctuation">)</span>
   used     <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">(</span><span class="token number">0</span>.0MB<span class="token punctuation">)</span>
   <span class="token function">free</span>     <span class="token operator">=</span> <span class="token number">9306112</span> <span class="token punctuation">(</span><span class="token number">8</span>.875MB<span class="token punctuation">)</span>
   <span class="token number">0.0</span>% used
PS Old Generation
   capacity <span class="token operator">=</span> <span class="token number">55967744</span> <span class="token punctuation">(</span><span class="token number">53</span>.375MB<span class="token punctuation">)</span>
   used     <span class="token operator">=</span> <span class="token number">48354640</span> <span class="token punctuation">(</span><span class="token number">46</span>.11457824707031MB<span class="token punctuation">)</span>
   <span class="token function">free</span>     <span class="token operator">=</span> <span class="token number">7613104</span> <span class="token punctuation">(</span><span class="token number">7</span>.2604217529296875MB<span class="token punctuation">)</span>
   <span class="token number">86.39733629427693</span>% used
PS Perm Generation
   capacity <span class="token operator">=</span> <span class="token number">62062592</span> <span class="token punctuation">(</span><span class="token number">59</span>.1875MB<span class="token punctuation">)</span>
   used     <span class="token operator">=</span> <span class="token number">60243112</span> <span class="token punctuation">(</span><span class="token number">57</span>.452308654785156MB<span class="token punctuation">)</span>
   <span class="token function">free</span>     <span class="token operator">=</span> <span class="token number">1819480</span> <span class="token punctuation">(</span><span class="token number">1</span>.7351913452148438MB<span class="token punctuation">)</span>
   <span class="token number">97.06831451706046</span>% used
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jstack" tabindex="-1"><a class="header-anchor" href="#jstack" aria-hidden="true">#</a> jstack</h2>`,16),M={href:"https://docs.oracle.com/en/java/javase/11/tools/jstack.html",target:"_blank",rel:"noopener noreferrer"},S=a("p",null,[a("strong",null,"线程快照是当前虚拟机内每一条线程正在执行的方法堆栈的集合，生成线程快照的主要目的是定位线程出现长时间停顿的原因，如线程间死锁、死循环、请求外部资源导致的长时间等待等"),n("。")],-1),q=t(`<p><code>jstack</code> 通常会结合 <code>top -Hp pid</code> 或 <code>pidstat -p pid -t</code> 一起查看具体线程的状态，也经常用来排查一些死锁的异常。</p><p>线程出现停顿的时候通过 jstack 来查看各个线程的调用堆栈，就可以知道没有响应的线程到底在后台做什么事情，或者等待什么资源。 如果 java 程序崩溃生成 core 文件，jstack 工具可以用来获得 core 文件的 java stack 和 native stack 的信息，从而可以轻松地知道 java 程序是如何崩溃和在程序何处发生问题。另外，jstack 工具还可以附属到正在运行的 java 程序中，看到当时运行的 java 程序的 java stack 和 native stack 的信息, 如果现在运行的 java 程序呈现 hung 的状态，jstack 是非常有用的。</p><h3 id="jstack-命令用法" tabindex="-1"><a class="header-anchor" href="#jstack-命令用法" aria-hidden="true">#</a> jstack 命令用法</h3><p>命令格式：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>jstack <span class="token punctuation">[</span>option<span class="token punctuation">]</span> pid
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>option</code> 选项参数</p><ul><li><code>-F</code> - 当正常输出请求不被响应时，强制输出线程堆栈</li><li><code>-l</code> - 除堆栈外，显示关于锁的附加信息</li><li><code>-m</code> - 打印 java 和 jni 框架的所有栈信息</li></ul><h3 id="thread-dump-文件" tabindex="-1"><a class="header-anchor" href="#thread-dump-文件" aria-hidden="true">#</a> thread dump 文件</h3><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20200730112431.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>一个 Thread Dump 文件大致可以分为五个部分。</p><h4 id="第一部分-full-thread-dump-identifier" tabindex="-1"><a class="header-anchor" href="#第一部分-full-thread-dump-identifier" aria-hidden="true">#</a> 第一部分：Full thread dump identifier</h4><p>这一部分是内容最开始的部分，展示了快照文件的生成时间和 JVM 的版本信息。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2017-10-19 10:46:44
Full thread dump Java HotSpot(TM) 64-Bit Server VM (24.79-b02 mixed mode):
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="第二部分-java-ee-middleware-third-party-custom-application-threads" tabindex="-1"><a class="header-anchor" href="#第二部分-java-ee-middleware-third-party-custom-application-threads" aria-hidden="true">#</a> 第二部分：Java EE middleware, third party &amp; custom application Threads</h4><p>这是整个文件的核心部分，里面展示了 JavaEE 容器（如 tomcat、resin 等）、自己的程序中所使用的线程信息。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot;resin-22129&quot; daemon prio=10 tid=0x00007fbe5c34e000 nid=0x4cb1 waiting on condition [0x00007fbe4ff7c000]
   java.lang.Thread.State: WAITING (parking)
    at sun.misc.Unsafe.park(Native Method)
    at java.util.concurrent.locks.LockSupport.park(LockSupport.java:315)
    at com.caucho.env.thread2.ResinThread2.park(ResinThread2.java:196)
    at com.caucho.env.thread2.ResinThread2.runTasks(ResinThread2.java:147)
    at com.caucho.env.thread2.ResinThread2.run(ResinThread2.java:118)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数说明：</p><ul><li><code>&quot;resin-22129&quot;</code> **线程名称：**如果使用 java.lang.Thread 类生成一个线程的时候，线程名称为 Thread-(数字) 的形式，这里是 resin 生成的线程；</li><li><code>daemon</code> **线程类型：**线程分为守护线程 (daemon) 和非守护线程 (non-daemon) 两种，通常都是守护线程；</li><li><code>prio=10</code> **线程优先级：**默认为 5，数字越大优先级越高；</li><li><code>tid=0x00007fbe5c34e000</code> **JVM 线程的 id：**JVM 内部线程的唯一标识，通过 java.lang.Thread.getId()获取，通常用自增的方式实现；</li><li><code>nid=0x4cb1</code> **系统线程 id：**对应的系统线程 id（Native Thread ID)，可以通过 top 命令进行查看，现场 id 是十六进制的形式；</li><li><code>waiting on condition</code> **系统线程状态：**这里是系统的线程状态；</li><li><code>[0x00007fbe4ff7c000]</code> **起始栈地址：**线程堆栈调用的其实内存地址；</li><li><code>java.lang.Thread.State: WAITING (parking)</code> **JVM 线程状态：**这里标明了线程在代码级别的状态。</li><li>**线程调用栈信息：**下面就是当前线程调用的详细栈信息，用于代码的分析。堆栈信息应该从下向上解读，因为程序调用的顺序是从下向上的。</li></ul><h4 id="第三部分-hotspot-vm-thread" tabindex="-1"><a class="header-anchor" href="#第三部分-hotspot-vm-thread" aria-hidden="true">#</a> 第三部分：HotSpot VM Thread</h4><p>这一部分展示了 JVM 内部线程的信息，用于执行内部的原生操作。下面常见的集中内置线程：</p><h5 id="attach-listener" tabindex="-1"><a class="header-anchor" href="#attach-listener" aria-hidden="true">#</a> &quot;Attach Listener&quot;</h5><p>该线程负责接收外部命令，执行该命令并把结果返回给调用者，此种类型的线程通常在桌面程序中出现。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot;Attach Listener&quot; daemon prio=5 tid=0x00007fc6b6800800 nid=0x3b07 waiting on condition [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="destroyjavavm" tabindex="-1"><a class="header-anchor" href="#destroyjavavm" aria-hidden="true">#</a> &quot;DestroyJavaVM&quot;</h5><p>执行 <code>main()</code> 的线程在执行完之后调用 JNI 中的 <code>jni_DestroyJavaVM()</code> 方法会唤起 <code>DestroyJavaVM</code> 线程，处于等待状态，等待其它线程（java 线程和 native 线程）退出时通知它卸载 JVM。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot;DestroyJavaVM&quot; prio=5 tid=0x00007fc6b3001000 nid=0x1903 waiting on condition [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="service-thread" tabindex="-1"><a class="header-anchor" href="#service-thread" aria-hidden="true">#</a> &quot;Service Thread&quot;</h5><p>用于启动服务的线程</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot;Service Thread&quot; daemon prio=10 tid=0x00007fbea81b3000 nid=0x5f2 runnable [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="compilerthread" tabindex="-1"><a class="header-anchor" href="#compilerthread" aria-hidden="true">#</a> &quot;CompilerThread&quot;</h5><p>用来调用 JITing，实时编译装卸类。通常 JVM 会启动多个线程来处理这部分工作，线程名称后面的数字也会累加，比如 CompilerThread1。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot;C2 CompilerThread1&quot; daemon prio=10 tid=0x00007fbea814b000 nid=0x5f1 waiting on condition [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE

&quot;C2 CompilerThread0&quot; daemon prio=10 tid=0x00007fbea8142000 nid=0x5f0 waiting on condition [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="signal-dispatcher" tabindex="-1"><a class="header-anchor" href="#signal-dispatcher" aria-hidden="true">#</a> &quot;Signal Dispatcher&quot;</h5><p>Attach Listener 线程的职责是接收外部 jvm 命令，当命令接收成功后，会交给 signal dispather 线程去进行分发到各个不同的模块处理命令，并且返回处理结果。<br> signal dispather 线程也是在第一次接收外部 jvm 命令时，进行初始化工作。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot;Signal Dispatcher&quot; daemon prio=10 tid=0x00007fbea81bf800 nid=0x5ef runnable [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="finalizer" tabindex="-1"><a class="header-anchor" href="#finalizer" aria-hidden="true">#</a> &quot;Finalizer&quot;</h5><p>这个线程也是在 main 线程之后创建的，其优先级为 10，主要用于在垃圾收集前，调用对象的 <code>finalize()</code> 方法；关于 Finalizer 线程的几点：</p><ul><li>只有当开始一轮垃圾收集时，才会开始调用 finalize()方法；因此并不是所有对象的 finalize()方法都会被执行；</li><li>该线程也是 daemon 线程，因此如果虚拟机中没有其他非 daemon 线程，不管该线程有没有执行完 finalize()方法，JVM 也会退出；</li><li>JVM 在垃圾收集时会将失去引用的对象包装成 Finalizer 对象（Reference 的实现），并放入 ReferenceQueue，由 Finalizer 线程来处理；最后将该 Finalizer 对象的引用置为 null，由垃圾收集器来回收；</li></ul><p>JVM 为什么要单独用一个线程来执行 <code>finalize()</code> 方法呢？</p><p>如果 JVM 的垃圾收集线程自己来做，很有可能由于在 finalize()方法中误操作导致 GC 线程停止或不可控，这对 GC 线程来说是一种灾难。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot;Finalizer&quot; daemon prio=10 tid=0x00007fbea80da000 nid=0x5eb in Object.wait() [0x00007fbeac044000]
   java.lang.Thread.State: WAITING (on object monitor)
    at java.lang.Object.wait(Native Method)
    at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:135)
    - locked &lt;0x00000006d173c1a8&gt; (a java.lang.ref.ReferenceQueue$Lock)
    at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:151)
    at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:209)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="reference-handler" tabindex="-1"><a class="header-anchor" href="#reference-handler" aria-hidden="true">#</a> &quot;Reference Handler&quot;</h5><p>JVM 在创建 main 线程后就创建 Reference Handler 线程，其优先级最高，为 10，它主要用于处理引用对象本身（软引用、弱引用、虚引用）的垃圾回收问题 。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot;Reference Handler&quot; daemon prio=10 tid=0x00007fbea80d8000 nid=0x5ea in Object.wait() [0x00007fbeac085000]
   java.lang.Thread.State: WAITING (on object monitor)
    at java.lang.Object.wait(Native Method)
    at java.lang.Object.wait(Object.java:503)
    at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:133)
    - locked &lt;0x00000006d173c1f0&gt; (a java.lang.ref.Reference$Lock)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="vm-thread" tabindex="-1"><a class="header-anchor" href="#vm-thread" aria-hidden="true">#</a> &quot;VM Thread&quot;</h5><p>JVM 中线程的母体，根据 HotSpot 源码中关于 vmThread.hpp 里面的注释，它是一个单例的对象（最原始的线程）会产生或触发所有其他的线程，这个单例的 VM 线程是会被其他线程所使用来做一些 VM 操作（如清扫垃圾等）。<br> 在 VM Thread 的结构体里有一个 VMOperationQueue 列队，所有的 VM 线程操作(vm_operation)都会被保存到这个列队当中，VMThread 本身就是一个线程，它的线程负责执行一个自轮询的 loop 函数(具体可以参考：VMThread.cpp 里面的 void VMThread::loop()) ，该 loop 函数从 VMOperationQueue 列队中按照优先级取出当前需要执行的操作对象(VM_Operation)，并且调用 VM_Operation-&gt;evaluate 函数去执行该操作类型本身的业务逻辑。<br> VM 操作类型被定义在 vm_operations.hpp 文件内，列举几个：ThreadStop、ThreadDump、PrintThreads、GenCollectFull、GenCollectFullConcurrent、CMS_Initial_Mark、CMS_Final_Remark….. 有兴趣的同学，可以自己去查看源文件。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot;VM Thread&quot; prio=10 tid=0x00007fbea80d3800 nid=0x5e9 runnable
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="第四部分-hotspot-gc-thread" tabindex="-1"><a class="header-anchor" href="#第四部分-hotspot-gc-thread" aria-hidden="true">#</a> 第四部分：HotSpot GC Thread</h4><p>JVM 中用于进行资源回收的线程，包括以下几种类型的线程：</p><h5 id="vm-periodic-task-thread" tabindex="-1"><a class="header-anchor" href="#vm-periodic-task-thread" aria-hidden="true">#</a> &quot;VM Periodic Task Thread&quot;</h5><p>该线程是 JVM 周期性任务调度的线程，它由 WatcherThread 创建，是一个单例对象。该线程在 JVM 内使用得比较频繁，比如：定期的内存监控、JVM 运行状况监控。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot;VM Periodic Task Thread&quot; prio=10 tid=0x00007fbea82ae800 nid=0x5fa waiting on condition
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以使用 jstat 命令查看 GC 的情况，比如查看某个进程没有存活必要的引用可以使用命令 <code>jstat -gcutil 250 7</code> 参数中 pid 是进程 id，后面的 250 和 7 表示每 250 毫秒打印一次，总共打印 7 次。<br> 这对于防止因为应用代码中直接使用 native 库或者第三方的一些监控工具的内存泄漏有非常大的帮助。</p><h5 id="gc-task-thread-0-parallelgc" tabindex="-1"><a class="header-anchor" href="#gc-task-thread-0-parallelgc" aria-hidden="true">#</a> &quot;GC task thread#0 (ParallelGC)&quot;</h5><p>垃圾回收线程，该线程会负责进行垃圾回收。通常 JVM 会启动多个线程来处理这个工作，线程名称中#后面的数字也会累加。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot;GC task thread#0 (ParallelGC)&quot; prio=5 tid=0x00007fc6b480d000 nid=0x2503 runnable

&quot;GC task thread#1 (ParallelGC)&quot; prio=5 tid=0x00007fc6b2812000 nid=0x2703 runnable

&quot;GC task thread#2 (ParallelGC)&quot; prio=5 tid=0x00007fc6b2812800 nid=0x2903 runnable

&quot;GC task thread#3 (ParallelGC)&quot; prio=5 tid=0x00007fc6b2813000 nid=0x2b03 runnable
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果在 JVM 中增加了 <code>-XX:+UseConcMarkSweepGC</code> 参数将会启用 CMS （Concurrent Mark-Sweep）GC Thread 方式，以下是该模式下的线程类型：</p><h5 id="gang-worker-0-parallel-gc-threads" tabindex="-1"><a class="header-anchor" href="#gang-worker-0-parallel-gc-threads" aria-hidden="true">#</a> &quot;Gang worker#0 (Parallel GC Threads)&quot;</h5><p>原来垃圾回收线程 GC task thread#0 (ParallelGC) 被替换为 Gang worker#0 (Parallel GC Threads)。Gang worker 是 JVM 用于年轻代垃圾回收(minor gc)的线程。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot;Gang worker#0 (Parallel GC Threads)&quot; prio=10 tid=0x00007fbea801b800 nid=0x5e4 runnable

&quot;Gang worker#1 (Parallel GC Threads)&quot; prio=10 tid=0x00007fbea801d800 nid=0x5e7 runnable
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="concurrent-mark-sweep-gc-thread" tabindex="-1"><a class="header-anchor" href="#concurrent-mark-sweep-gc-thread" aria-hidden="true">#</a> &quot;Concurrent Mark-Sweep GC Thread&quot;</h5><p>并发标记清除垃圾回收器（就是通常所说的 CMS GC）线程， 该线程主要针对于年老代垃圾回收。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot;Concurrent Mark-Sweep GC Thread&quot; prio=10 tid=0x00007fbea8073800 nid=0x5e8 runnable
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="surrogate-locker-thread-concurrent-gc" tabindex="-1"><a class="header-anchor" href="#surrogate-locker-thread-concurrent-gc" aria-hidden="true">#</a> &quot;Surrogate Locker Thread (Concurrent GC)&quot;</h5><p>此线程主要配合 CMS 垃圾回收器来使用，是一个守护线程，主要负责处理 GC 过程中 Java 层的 Reference（指软引用、弱引用等等）与 jvm 内部层面的对象状态同步。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot;Surrogate Locker Thread (Concurrent GC)&quot; daemon prio=10 tid=0x00007fbea8158800 nid=0x5ee waiting on condition [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里以 WeakHashMap 为例进行说明，首先是一个关键点：</p><ul><li>WeakHashMap 和 HashMap 一样，内部有一个 Entry[]数组;</li><li>WeakHashMap 的 Entry 比较特殊，它的继承体系结构为 Entry-&gt;WeakReference-&gt;Reference;</li><li>Reference 里面有一个全局锁对象：Lock，它也被称为 pending_lock，注意：它是静态对象；</li><li>Reference 里面有一个静态变量：pending；</li><li>Reference 里面有一个静态内部类：ReferenceHandler 的线程，它在 static 块里面被初始化并且启动，启动完成后处于 wait 状态，它在一个 Lock 同步锁模块中等待；</li><li>WeakHashMap 里面还实例化了一个 ReferenceQueue 列队</li></ul><p>假设，WeakHashMap 对象里面已经保存了很多对象的引用，JVM 在进行 CMS GC 的时候会创建一个 ConcurrentMarkSweepThread（简称 CMST）线程去进行 GC。ConcurrentMarkSweepThread 线程被创建的同时会创建一个 SurrogateLockerThread（简称 SLT）线程并且启动它，SLT 启动之后，处于等待阶段。<br> CMST 开始 GC 时，会发一个消息给 SLT 让它去获取 Java 层 Reference 对象的全局锁：Lock。直到 CMS GC 完毕之后，JVM 会将 WeakHashMap 中所有被回收的对象所属的 WeakReference 容器对象放入到 Reference 的 pending 属性当中（每次 GC 完毕之后，pending 属性基本上都不会为 null 了），然后通知 SLT 释放并且 notify 全局锁:Lock。此时激活了 ReferenceHandler 线程的 run 方法，使其脱离 wait 状态，开始工作了。<br> ReferenceHandler 这个线程会将 pending 中的所有 WeakReference 对象都移动到它们各自的列队当中，比如当前这个 WeakReference 属于某个 WeakHashMap 对象，那么它就会被放入相应的 ReferenceQueue 列队里面（该列队是链表结构）。 当我们下次从 WeakHashMap 对象里面 get、put 数据或者调用 size 方法的时候，WeakHashMap 就会将 ReferenceQueue 列队中的 WeakReference 依依 poll 出来去和 Entry[]数据做比较，如果发现相同的，则说明这个 Entry 所保存的对象已经被 GC 掉了，那么将 Entry[]内的 Entry 对象剔除掉。</p><h4 id="第五部分-jni-global-references-count" tabindex="-1"><a class="header-anchor" href="#第五部分-jni-global-references-count" aria-hidden="true">#</a> 第五部分：JNI global references count</h4><p>这一部分主要回收那些在 native 代码上被引用，但在 java 代码中却没有存活必要的引用，对于防止因为应用代码中直接使用 native 库或第三方的一些监控工具的内存泄漏有非常大的帮助。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>JNI global references: 830
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下一篇文章将要讲述一个直接找出 CPU 100% 线程的例子。</p><h3 id="系统线程状态" tabindex="-1"><a class="header-anchor" href="#系统线程状态" aria-hidden="true">#</a> 系统线程状态</h3><p>系统线程有如下状态：</p><h4 id="deadlock" tabindex="-1"><a class="header-anchor" href="#deadlock" aria-hidden="true">#</a> deadlock</h4><p>死锁线程，一般指多个线程调用期间进入了相互资源占用，导致一直等待无法释放的情况。</p><p>【示例】deadlock 示例</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot;DEADLOCK_TEST-1&quot; daemon prio=6 tid=0x000000000690f800 nid=0x1820 waiting for monitor entry [0x000000000805f000]
   java.lang.Thread.State: BLOCKED (on object monitor)
                at com.nbp.theplatform.threaddump.ThreadDeadLockState$DeadlockThread.goMonitorDeadlock(ThreadDeadLockState.java:197)
                - waiting to lock &lt;0x00000007d58f5e60&gt; (a com.nbp.theplatform.threaddump.ThreadDeadLockState$Monitor)
                at com.nbp.theplatform.threaddump.ThreadDeadLockState$DeadlockThread.monitorOurLock(ThreadDeadLockState.java:182)
                - locked &lt;0x00000007d58f5e48&gt; (a com.nbp.theplatform.threaddump.ThreadDeadLockState$Monitor)
                at com.nbp.theplatform.threaddump.ThreadDeadLockState$DeadlockThread.run(ThreadDeadLockState.java:135)

   Locked ownable synchronizers:
                - None

&quot;DEADLOCK_TEST-2&quot; daemon prio=6 tid=0x0000000006858800 nid=0x17b8 waiting for monitor entry [0x000000000815f000]
   java.lang.Thread.State: BLOCKED (on object monitor)
                at com.nbp.theplatform.threaddump.ThreadDeadLockState$DeadlockThread.goMonitorDeadlock(ThreadDeadLockState.java:197)
                - waiting to lock &lt;0x00000007d58f5e78&gt; (a com.nbp.theplatform.threaddump.ThreadDeadLockState$Monitor)
                at com.nbp.theplatform.threaddump.ThreadDeadLockState$DeadlockThread.monitorOurLock(ThreadDeadLockState.java:182)
                - locked &lt;0x00000007d58f5e60&gt; (a com.nbp.theplatform.threaddump.ThreadDeadLockState$Monitor)
                at com.nbp.theplatform.threaddump.ThreadDeadLockState$DeadlockThread.run(ThreadDeadLockState.java:135)

   Locked ownable synchronizers:
                - None

&quot;DEADLOCK_TEST-3&quot; daemon prio=6 tid=0x0000000006859000 nid=0x25dc waiting for monitor entry [0x000000000825f000]
   java.lang.Thread.State: BLOCKED (on object monitor)
                at com.nbp.theplatform.threaddump.ThreadDeadLockState$DeadlockThread.goMonitorDeadlock(ThreadDeadLockState.java:197)
                - waiting to lock &lt;0x00000007d58f5e48&gt; (a com.nbp.theplatform.threaddump.ThreadDeadLockState$Monitor)
                at com.nbp.theplatform.threaddump.ThreadDeadLockState$DeadlockThread.monitorOurLock(ThreadDeadLockState.java:182)
                - locked &lt;0x00000007d58f5e78&gt; (a com.nbp.theplatform.threaddump.ThreadDeadLockState$Monitor)
                at com.nbp.theplatform.threaddump.ThreadDeadLockState$DeadlockThread.run(ThreadDeadLockState.java:135)

   Locked ownable synchronizers:
                - None
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="runnable" tabindex="-1"><a class="header-anchor" href="#runnable" aria-hidden="true">#</a> runnable</h4><p>一般指该线程正在执行状态中，该线程占用了资源，正在处理某个操作，如通过 SQL 语句查询数据库、对某个文件进行写入等。</p><h4 id="blocked" tabindex="-1"><a class="header-anchor" href="#blocked" aria-hidden="true">#</a> blocked</h4><p>线程正处于阻塞状态，指当前线程执行过程中，所需要的资源长时间等待却一直未能获取到，被容器的线程管理器标识为阻塞状态，可以理解为等待资源超时的线程。</p><p>【示例】blocked 示例</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot;BLOCKED_TEST pool-1-thread-2&quot; prio=6 tid=0x0000000007673800 nid=0x260c waiting for monitor entry [0x0000000008abf000]
   java.lang.Thread.State: BLOCKED (on object monitor)
                at com.nbp.theplatform.threaddump.ThreadBlockedState.monitorLock(ThreadBlockedState.java:43)
                - waiting to lock &lt;0x0000000780a000b0&gt; (a com.nbp.theplatform.threaddump.ThreadBlockedState)
                at com.nbp.theplatform.threaddump.ThreadBlockedState$2.run(ThreadBlockedState.java:26)
                at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
                at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
                at java.lang.Thread.run(Thread.java:662)
   Locked ownable synchronizers:
                - &lt;0x0000000780b0c6a0&gt; (a java.util.concurrent.locks.ReentrantLock$NonfairSync)
&quot;BLOCKED_TEST pool-1-thread-3&quot; prio=6 tid=0x00000000074f5800 nid=0x1994 waiting for monitor entry [0x0000000008bbf000]
   java.lang.Thread.State: BLOCKED (on object monitor)
                at com.nbp.theplatform.threaddump.ThreadBlockedState.monitorLock(ThreadBlockedState.java:42)
                - waiting to lock &lt;0x0000000780a000b0&gt; (a com.nbp.theplatform.threaddump.ThreadBlockedState)
                at com.nbp.theplatform.threaddump.ThreadBlockedState$3.run(ThreadBlockedState.java:34)
                at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886
                at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
                at java.lang.Thread.run(Thread.java:662)
   Locked ownable synchronizers:
                - &lt;0x0000000780b0e1b8&gt; (a java.util.concurrent.locks.ReentrantLock$NonfairSync)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="waiting-on-condition" tabindex="-1"><a class="header-anchor" href="#waiting-on-condition" aria-hidden="true">#</a> waiting on condition</h4><p>线程正处于等待资源或等待某个条件的发生，具体的原因需要结合下面堆栈信息进行分析。</p><p>（1）如果堆栈信息明确是应用代码，则证明该线程正在等待资源，一般是大量读取某种资源且该资源采用了资源锁的情况下，线程进入等待状态，等待资源的读取，或者正在等待其他线程的执行等。</p><p>（2）如果发现有大量的线程都正处于这种状态，并且堆栈信息中得知正等待网络读写，这是因为网络阻塞导致线程无法执行，很有可能是一个网络瓶颈的征兆：</p><ul><li><p>网络非常繁忙，几乎消耗了所有的带宽，仍然有大量数据等待网络读写；</p></li><li><p>网络可能是空闲的，但由于路由或防火墙等原因，导致包无法正常到达；</p></li></ul><p>所以一定要结合系统的一些性能观察工具进行综合分析，比如 netstat 统计单位时间的发送包的数量，看是否很明显超过了所在网络带宽的限制；观察 CPU 的利用率，看系统态的 CPU 时间是否明显大于用户态的 CPU 时间。这些都指向由于网络带宽所限导致的网络瓶颈。</p><p>（3）还有一种常见的情况是该线程在 sleep，等待 sleep 的时间到了，将被唤醒。</p><p>【示例】等待状态样例</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> &quot;IoWaitThread&quot; prio=6 tid=0x0000000007334800 nid=0x2b3c waiting on condition [0x000000000893f000]
   java.lang.Thread.State: WAITING (parking)
                at sun.misc.Unsafe.park(Native Method)
                - parking to wait for  &lt;0x00000007d5c45850&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
                at java.util.concurrent.locks.LockSupport.park(LockSupport.java:156)
                at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1987)
                at java.util.concurrent.LinkedBlockingDeque.takeFirst(LinkedBlockingDeque.java:440)
                at java.util.concurrent.LinkedBlockingDeque.take(LinkedBlockingDeque.java:629)
                at com.nbp.theplatform.threaddump.ThreadIoWaitState$IoWaitHandler2.run(ThreadIoWaitState.java:89)
                at java.lang.Thread.run(Thread.java:662)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="waiting-for-monitor-entry-或-in-object-wait" tabindex="-1"><a class="header-anchor" href="#waiting-for-monitor-entry-或-in-object-wait" aria-hidden="true">#</a> waiting for monitor entry 或 in Object.wait()</h4><p>Moniter 是 Java 中用以实现线程之间的互斥与协作的主要手段，它可以看成是对象或者 class 的锁，每个对象都有，也仅有一个 Monitor。</p><figure><img src="https://www.javatang.com/wp-content/uploads/2017/10/java-monitor.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>从上图可以看出，每个 Monitor 在某个时刻只能被一个线程拥有，该线程就是 &quot;Active Thread&quot;，而其他线程都是 &quot;Waiting Thread&quot;，分别在两个队列 &quot;Entry Set&quot;和&quot;Waint Set&quot;里面等待。其中在 &quot;Entry Set&quot; 中等待的线程状态是 <code>waiting for monitor entry</code>，在 &quot;Wait Set&quot; 中等待的线程状态是 <code>in Object.wait()</code>。</p><p>（1）&quot;Entry Set&quot;里面的线程。</p><p>我们称被 <code>synchronized</code> 保护起来的代码段为临界区，对应的代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">synchronized</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当一个线程申请进入临界区时，它就进入了 &quot;Entry Set&quot; 队列中，这时候有两种可能性：</p><ul><li>该 Monitor 不被其他线程拥有，&quot;Entry Set&quot;里面也没有其他等待的线程。本线程即成为相应类或者对象的 Monitor 的 Owner，执行临界区里面的代码；此时在 Thread Dump 中显示线程处于 &quot;Runnable&quot; 状态。</li><li>该 Monitor 被其他线程拥有，本线程在 &quot;Entry Set&quot; 队列中等待。此时在 Thread Dump 中显示线程处于 &quot;waiting for monity entry&quot; 状态。</li></ul><p>临界区的设置是为了保证其内部的代码执行的原子性和完整性，但因为临界区在任何时间只允许线程串行通过，这和我们使用多线程的初衷是相反的。如果在多线程程序中大量使用 synchronized，或者不适当的使用它，会造成大量线程在临界区的入口等待，造成系统的性能大幅下降。如果在 Thread Dump 中发现这个情况，应该审视源码并对其进行改进。</p><p>（2）&quot;Wait Set&quot;里面的线程</p><p>当线程获得了 Monitor，进入了临界区之后，如果发现线程继续运行的条件没有满足，它则调用对象（通常是被 synchronized 的对象）的 wait()方法，放弃 Monitor，进入 &quot;Wait Set&quot;队列。只有当别的线程在该对象上调用了 notify()或者 notifyAll()方法，&quot;Wait Set&quot;队列中的线程才得到机会去竞争，但是只有一个线程获得对象的 Monitor，恢复到运行态。&quot;Wait Set&quot;中的线程在 Thread Dump 中显示的状态为 in Object.wait()。通常来说，当 CPU 很忙的时候关注 Runnable 状态的线程，反之则关注 waiting for monitor entry 状态的线程。</p><h3 id="jstack-使用示例" tabindex="-1"><a class="header-anchor" href="#jstack-使用示例" aria-hidden="true">#</a> jstack 使用示例</h3><h4 id="找出某-java-进程中最耗费-cpu-的-java-线程" tabindex="-1"><a class="header-anchor" href="#找出某-java-进程中最耗费-cpu-的-java-线程" aria-hidden="true">#</a> 找出某 Java 进程中最耗费 CPU 的 Java 线程</h4><p>（1）找出 Java 进程</p><p>假设应用名称为 myapp：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ jps <span class="token operator">|</span> <span class="token function">grep</span> myapp
<span class="token number">29527</span> myapp.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>得到进程 ID 为 21711</p><p>（2）找出该进程内最耗费 CPU 的线程，可以使用 <code>ps -Lfp pid</code> 或者 <code>ps -mp pid -o THREAD, tid, time</code> 或者 <code>top -Hp pid</code></p><p><img src="http://static.oschina.net/uploads/space/2014/0128/170402_A57i_111708.png" alt="img" loading="lazy"><br> TIME 列就是各个 Java 线程耗费的 CPU 时间，CPU 时间最长的是线程 ID 为 21742 的线程，用</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">printf</span> <span class="token string">&quot;%x<span class="token entity" title="\\n">\\n</span>&quot;</span> <span class="token number">21742</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>得到 21742 的十六进制值为 54ee，下面会用到。</p><p>（3）使用 jstack 打印线程堆栈信息</p><p>下一步终于轮到 jstack 上场了，它用来输出进程 21711 的堆栈信息，然后根据线程 ID 的十六进制值 grep，如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ jstack <span class="token number">21711</span> <span class="token operator">|</span> <span class="token function">grep</span> 54ee
<span class="token string">&quot;PollIntervalRetrySchedulerThread&quot;</span> <span class="token assign-left variable">prio</span><span class="token operator">=</span><span class="token number">10</span> <span class="token assign-left variable">tid</span><span class="token operator">=</span>0x00007f950043e000 <span class="token assign-left variable">nid</span><span class="token operator">=</span>0x54ee <span class="token keyword">in</span> Object.wait<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span>0x00007f94c6eda000<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到 CPU 消耗在 <code>PollIntervalRetrySchedulerThread</code> 这个类的 <code>Object.wait()</code>。</p><blockquote><p>注：上面的例子中，默认只显示了一行信息，但很多时候我们希望查看更详细的调用栈。可以通过指定 <code>-A &lt;num&gt;</code> 的方式来显示行数。例如：<code>jstack -l &lt;pid&gt; | grep &lt;thread-hex-id&gt; -A 10</code></p></blockquote><p>（4）分析代码</p><p>我找了下我的代码，定位到下面的代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Idle wait</span>
<span class="token function">getLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Thread [&quot;</span> <span class="token operator">+</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;] is idle waiting...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
schedulerThreadState <span class="token operator">=</span> <span class="token class-name">PollTaskSchedulerThreadState<span class="token punctuation">.</span>IdleWaiting</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> now <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> waitTime <span class="token operator">=</span> now <span class="token operator">+</span> <span class="token function">getIdleWaitTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> timeUntilContinue <span class="token operator">=</span> waitTime <span class="token operator">-</span> now<span class="token punctuation">;</span>
<span class="token keyword">synchronized</span><span class="token punctuation">(</span>sigLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">try</span> <span class="token punctuation">{</span>
    	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>halted<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    		sigLock<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>timeUntilContinue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    	<span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
	<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ignore<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它是轮询任务的空闲等待代码，上面的 <code>sigLock.wait(timeUntilContinue)</code> 就对应了前面的 <code>Object.wait()</code>。</p><h4 id="生成-threaddump-文件" tabindex="-1"><a class="header-anchor" href="#生成-threaddump-文件" aria-hidden="true">#</a> 生成 threaddump 文件</h4><p>可以使用 <code>jstack -l &lt;pid&gt; &gt; &lt;file-path&gt;</code> 命令生成 threaddump 文件</p><p>【示例】生成进程 ID 为 8841 的 Java 进程的 threaddump 文件。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>jstack -l 8841 &gt; /home/threaddump.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="jinfo" tabindex="-1"><a class="header-anchor" href="#jinfo" aria-hidden="true">#</a> jinfo</h2>`,130),C={href:"https://docs.oracle.com/en/java/javase/11/tools/jinfo.html",target:"_blank",rel:"noopener noreferrer"},_=a("code",null,"-X",-1),w=a("code",null,"-XX",-1),y=a("code",null,"System.getProperty",-1),J=a("code",null,"-D",-1),D=t(`<p>之前的 <code>jps -v</code> 口令只能查看到显示指定的参数，如果想要查看未被显示指定的参数的值就要使用 jinfo 口令。</p><p>jinfo 命令格式：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>jinfo <span class="token punctuation">[</span>option<span class="token punctuation">]</span> pid
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>option</code> 选项参数：</p><ul><li><code>-flag</code> - 输出指定 args 参数的值</li><li><code>-sysprops</code> - 输出系统属性，等同于 <code>System.getProperties()</code></li></ul><p>【示例】jinfo 使用示例</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ jinfo <span class="token parameter variable">-sysprops</span> <span class="token number">29527</span>
Attaching to process ID <span class="token number">29527</span>, please wait<span class="token punctuation">..</span>.
Debugger attached successfully.
Server compiler detected.
JVM version is <span class="token number">25.222</span>-b10
<span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jhat" tabindex="-1"><a class="header-anchor" href="#jhat" aria-hidden="true">#</a> jhat</h2><blockquote><p><strong>jhat(JVM Heap Analysis Tool)，是虚拟机堆转储快照分析工具</strong>。jhat 与 jmap 搭配使用，用来分析 jmap 生成的 dump 文件。jhat 内置了一个微型的 HTTP/HTML 服务器，生成 dump 的分析结果后，可以在浏览器中查看。</p><p>注意：一般不会直接在服务器上进行分析，因为 jhat 是一个耗时并且耗费硬件资源的过程，一般把服务器生成的 dump 文件，用 jvisualvm 、Eclipse Memory Analyzer、IBM HeapAnalyzer 等工具来分析。</p></blockquote><p>命令格式：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>jhat <span class="token punctuation">[</span>dumpfile<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,12),L={href:"https://book.douban.com/subject/34907497/",target:"_blank",rel:"noopener noreferrer"},V={href:"https://time.geekbang.org/column/intro/100028001",target:"_blank",rel:"noopener noreferrer"},B={href:"https://my.oschina.net/feichexia/blog/196575",target:"_blank",rel:"noopener noreferrer"},G={href:"https://docs.oracle.com/javase/8/docs/technotes/guides/management/jconsole.html",target:"_blank",rel:"noopener noreferrer"},E={href:"https://www.cnblogs.com/kongzhongqijing/articles/3621441.html",target:"_blank",rel:"noopener noreferrer"},R={href:"https://www.cnblogs.com/yjd_hycf_space/p/7755633.html",target:"_blank",rel:"noopener noreferrer"},I={href:"https://blog.csdn.net/wanghuiqi2008/article/details/50724676",target:"_blank",rel:"noopener noreferrer"},z={href:"https://www.javatang.com/archives/2017/10/19/33151873.html",target:"_blank",rel:"noopener noreferrer"};function O(P,$){const e=o("ExternalLinkIcon");return l(),r("div",null,[c,a("blockquote",null,[a("p",null,[a("strong",null,[a("a",p,[n("jps(JVM Process Status Tool)"),s(e)]),n(" 是虚拟机进程状态工具")]),n("。它可以显示指定系统内所有的 HotSpot 虚拟机进程状态信息。jps 通过 RMI 协议查询开启了 RMI 服务的远程虚拟机进程状态。")])]),u,a("blockquote",null,[a("p",null,[a("strong",null,[a("a",m,[n("jstat(JVM statistics Monitoring)"),s(e)]),n("，是虚拟机统计信息监视工具")]),n("。jstat 用于监视虚拟机运行时状态信息，它可以显示出虚拟机进程中的类装载、内存、垃圾收集、JIT 编译等运行数据。")])]),v,a("blockquote",null,[a("p",null,[n("【参考】更详细说明可以参考："),a("a",b,[n("jstat 命令查看 jvm 的 GC 情况"),s(e)])])]),h,a("blockquote",null,[a("p",null,[n("注：更详细的参数含义可以参考官方文档："),a("a",k,[n("http://docs.oracle.com/javase/8/docs/technotes/tools/unix/jstat.html"),s(e)])])]),g,a("blockquote",null,[a("p",null,[a("strong",null,[a("a",f,[n("jmap(JVM Memory Map)"),s(e)]),n(" 是 Java 内存映像工具")]),n("。jmap 用于生成堆转储快照（一般称为 heapdump 或 dump 文件）。jmap 不仅能生成 dump 文件，还可以查询 "),j,n(" 执行队列、Java 堆和永久代的详细信息，如当前使用率、当前使用的是哪种收集器等。")]),x]),T,a("blockquote",null,[a("p",null,[a("strong",null,[a("a",M,[n("jstack(Stack Trace for java)"),s(e)]),n(" 是 Java 堆栈跟踪工具")]),n("。jstack 用来打印目标 Java 进程中各个线程的栈轨迹，以及这些线程所持有的锁，并可以生成 java 虚拟机当前时刻的线程快照（一般称为 threaddump 或 javacore 文件）。")]),S]),q,a("blockquote",null,[a("p",null,[a("strong",null,[a("a",C,[n("jinfo(JVM Configuration info)"),s(e)]),n("，是 Java 配置信息工具")]),n("。jinfo 用于实时查看和调整虚拟机运行参数。如传递给 Java 虚拟机的"),_,n("（即输出中的 jvm_args）、"),w,n("参数（即输出中的 VM Flags），以及可在 Java 层面通过"),y,n("获取的"),J,n("参数（即输出中的 System Properties）。")])]),D,a("ul",null,[a("li",null,[a("a",L,[n("《深入理解 Java 虚拟机》"),s(e)])]),a("li",null,[a("a",V,[n("《Java 性能调优实战》"),s(e)])]),a("li",null,[a("a",B,[n("JVM 性能调优监控工具 jps、jstack、jmap、jhat、jstat、hprof 使用详解"),s(e)])]),a("li",null,[a("a",G,[n("jconsole 官方文档"),s(e)])]),a("li",null,[a("a",E,[n("jconsole 工具使用"),s(e)])]),a("li",null,[a("a",R,[n("jstat 命令查看 jvm 的 GC 情况"),s(e)])]),a("li",null,[a("a",I,[n("利用内存分析工具（Memory Analyzer Tool，MAT）分析 java 项目内存泄露"),s(e)])]),a("li",null,[a("a",z,[n("JVM 故障分析及性能优化系列之一：使用 jstack 定位线程堆栈信息"),s(e)])])])])}const U=i(d,[["render",O],["__file","11.JVM命令行工具.html.vue"]]);export{U as default};
