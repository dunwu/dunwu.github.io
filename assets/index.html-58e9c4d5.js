const e=JSON.parse('{"key":"v-05f3b4ef","path":"/pages/f9209d/","title":"分布式面试总结","lang":"zh-CN","frontmatter":{"title":"分布式面试总结","date":"2018-07-10T16:02:00.000Z","category":["分布式","分布式综合"],"tag":["分布式","分布式综合","面试"],"permalink":"/pages/f9209d/","description":"分布式面试总结 分布式缓存 Redis 有什么数据类型？分别用于什么场景 数据类型 可以存储的值 操作 STRING 字符串、整数或者浮点数 对整个字符串或者字符串的其中一部分执行操作 对整数和浮点数执行自增或者自减操作 LIST 列表 从两端压入或者弹出元素 读取单个或者多个元素 进行修剪，只保留一个范围内的元素 SET 无序集合 添加、获取、移除单个元素 检查一个元素是否存在于集合中 计算交集、并集、差集 从集合里面随机获取元素 HASH 包含键值对的无序散列表 添加、获取、移除单个键值对 获取所有键值对 检查某个键是否存在 ZSET 有序集合 添加、获取、删除元素 根据分值范围或者成员来获取元素 计算一个键的排名","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/pages/f9209d/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"分布式面试总结"}],["meta",{"property":"og:description","content":"分布式面试总结 分布式缓存 Redis 有什么数据类型？分别用于什么场景 数据类型 可以存储的值 操作 STRING 字符串、整数或者浮点数 对整个字符串或者字符串的其中一部分执行操作 对整数和浮点数执行自增或者自减操作 LIST 列表 从两端压入或者弹出元素 读取单个或者多个元素 进行修剪，只保留一个范围内的元素 SET 无序集合 添加、获取、移除单个元素 检查一个元素是否存在于集合中 计算交集、并集、差集 从集合里面随机获取元素 HASH 包含键值对的无序散列表 添加、获取、移除单个键值对 获取所有键值对 检查某个键是否存在 ZSET 有序集合 添加、获取、删除元素 根据分值范围或者成员来获取元素 计算一个键的排名"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-10T10:35:58.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"分布式"}],["meta",{"property":"article:tag","content":"分布式综合"}],["meta",{"property":"article:tag","content":"面试"}],["meta",{"property":"article:published_time","content":"2018-07-10T16:02:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-10T10:35:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"分布式面试总结\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2018-07-10T16:02:00.000Z\\",\\"dateModified\\":\\"2023-09-10T10:35:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io\\"}]}"]]},"headers":[{"level":2,"title":"分布式缓存","slug":"分布式缓存","link":"#分布式缓存","children":[{"level":3,"title":"Redis 有什么数据类型？分别用于什么场景","slug":"redis-有什么数据类型-分别用于什么场景","link":"#redis-有什么数据类型-分别用于什么场景","children":[]},{"level":3,"title":"Redis 的主从复制是如何实现的","slug":"redis-的主从复制是如何实现的","link":"#redis-的主从复制是如何实现的","children":[]},{"level":3,"title":"Redis 的 key 是如何寻址的","slug":"redis-的-key-是如何寻址的","link":"#redis-的-key-是如何寻址的","children":[]},{"level":3,"title":"Redis 的集群模式是如何实现的？","slug":"redis-的集群模式是如何实现的","link":"#redis-的集群模式是如何实现的","children":[]},{"level":3,"title":"Redis 如何实现分布式锁？ZooKeeper 如何实现分布式锁？比较二者优劣？","slug":"redis-如何实现分布式锁-zookeeper-如何实现分布式锁-比较二者优劣","link":"#redis-如何实现分布式锁-zookeeper-如何实现分布式锁-比较二者优劣","children":[]},{"level":3,"title":"Redis 的持久化方式？有什么优缺点？持久化实现原理？","slug":"redis-的持久化方式-有什么优缺点-持久化实现原理","link":"#redis-的持久化方式-有什么优缺点-持久化实现原理","children":[]},{"level":3,"title":"Redis 过期策略有哪些？","slug":"redis-过期策略有哪些","link":"#redis-过期策略有哪些","children":[]},{"level":3,"title":"Redis 和 Memcached 有什么区别？","slug":"redis-和-memcached-有什么区别","link":"#redis-和-memcached-有什么区别","children":[]},{"level":3,"title":"为什么单线程的 Redis 性能反而优于多线程的 Memcached？","slug":"为什么单线程的-redis-性能反而优于多线程的-memcached","link":"#为什么单线程的-redis-性能反而优于多线程的-memcached","children":[]}]},{"level":2,"title":"分布式消息队列（MQ）","slug":"分布式消息队列-mq","link":"#分布式消息队列-mq","children":[{"level":3,"title":"为什么使用 MQ？","slug":"为什么使用-mq","link":"#为什么使用-mq","children":[]},{"level":3,"title":"如何保证 MQ 的高可用？","slug":"如何保证-mq-的高可用","link":"#如何保证-mq-的高可用","children":[]},{"level":3,"title":"MQ 有哪些常见问题？如何解决这些问题？","slug":"mq-有哪些常见问题-如何解决这些问题","link":"#mq-有哪些常见问题-如何解决这些问题","children":[]},{"level":3,"title":"Kafka, ActiveMQ, RabbitMQ, RocketMQ 各有什么优缺点？","slug":"kafka-activemq-rabbitmq-rocketmq-各有什么优缺点","link":"#kafka-activemq-rabbitmq-rocketmq-各有什么优缺点","children":[]},{"level":3,"title":"Dubbo 的实现过程？","slug":"dubbo-的实现过程","link":"#dubbo-的实现过程","children":[]},{"level":3,"title":"Dubbo 负载均衡策略有哪些？","slug":"dubbo-负载均衡策略有哪些","link":"#dubbo-负载均衡策略有哪些","children":[]},{"level":3,"title":"Dubbo 集群容错策略 ？","slug":"dubbo-集群容错策略","link":"#dubbo-集群容错策略","children":[]},{"level":3,"title":"动态代理策略？","slug":"动态代理策略","link":"#动态代理策略","children":[]},{"level":3,"title":"Dubbo 支持哪些序列化协议？Hessian？Hessian 的数据结构？","slug":"dubbo-支持哪些序列化协议-hessian-hessian-的数据结构","link":"#dubbo-支持哪些序列化协议-hessian-hessian-的数据结构","children":[]},{"level":3,"title":"Protoco Buffer 是什么？","slug":"protoco-buffer-是什么","link":"#protoco-buffer-是什么","children":[]},{"level":3,"title":"注册中心挂了可以继续通信吗？","slug":"注册中心挂了可以继续通信吗","link":"#注册中心挂了可以继续通信吗","children":[]},{"level":3,"title":"ZooKeeper 原理是什么？ZooKeeper 有什么用？","slug":"zookeeper-原理是什么-zookeeper-有什么用","link":"#zookeeper-原理是什么-zookeeper-有什么用","children":[]},{"level":3,"title":"Netty 有什么用？NIO/BIO/AIO 有什么用？有什么区别？","slug":"netty-有什么用-nio-bio-aio-有什么用-有什么区别","link":"#netty-有什么用-nio-bio-aio-有什么用-有什么区别","children":[]},{"level":3,"title":"为什么要进行系统拆分？拆分不用 Dubbo 可以吗？","slug":"为什么要进行系统拆分-拆分不用-dubbo-可以吗","link":"#为什么要进行系统拆分-拆分不用-dubbo-可以吗","children":[]},{"level":3,"title":"Dubbo 和 Thrift 有什么区别？","slug":"dubbo-和-thrift-有什么区别","link":"#dubbo-和-thrift-有什么区别","children":[]}]},{"level":2,"title":"分布式锁基本原理","slug":"分布式锁基本原理","link":"#分布式锁基本原理","children":[]}],"git":{"createdTime":1694342158000,"updatedTime":1694342158000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":1}]},"readingTime":{"minutes":27.2,"words":8160},"filePathRelative":"15.分布式/00.分布式综合/99.分布式面试.md","localizedDate":"2018年7月10日","excerpt":"<h1> 分布式面试总结</h1>\\n<h2> 分布式缓存</h2>\\n<h3> Redis 有什么数据类型？分别用于什么场景</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>数据类型</th>\\n<th>可以存储的值</th>\\n<th>操作</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>STRING</td>\\n<td>字符串、整数或者浮点数</td>\\n<td>对整个字符串或者字符串的其中一部分执行操作<br> 对整数和浮点数执行自增或者自减操作</td>\\n</tr>\\n<tr>\\n<td>LIST</td>\\n<td>列表</td>\\n<td>从两端压入或者弹出元素<br> 读取单个或者多个元素<br> 进行修剪，只保留一个范围内的元素</td>\\n</tr>\\n<tr>\\n<td>SET</td>\\n<td>无序集合</td>\\n<td>添加、获取、移除单个元素<br> 检查一个元素是否存在于集合中<br> 计算交集、并集、差集<br> 从集合里面随机获取元素</td>\\n</tr>\\n<tr>\\n<td>HASH</td>\\n<td>包含键值对的无序散列表</td>\\n<td>添加、获取、移除单个键值对<br> 获取所有键值对<br> 检查某个键是否存在</td>\\n</tr>\\n<tr>\\n<td>ZSET</td>\\n<td>有序集合</td>\\n<td>添加、获取、删除元素<br> 根据分值范围或者成员来获取元素<br> 计算一个键的排名</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{e as data};
