const e=JSON.parse('{"key":"v-120bd580","path":"/01.Java/01.JavaSE/99.Java%E9%9D%A2%E8%AF%95.html","title":"Java 面试总结","lang":"zh-CN","frontmatter":{"title":"Java 面试总结","date":"2020-06-04T13:51:00.000Z","order":99,"category":["Java","JavaSE"],"tag":["Java","JavaSE","面试"],"description":"Java 面试总结 基础 工具类 String String 类能被继承吗？ String，StringBuffer，StringBuilder 的区别。 String 类不能被继承。因为其被 final 修饰，所以无法被继承。 StringBuffer，StringBuilder 拼接字符串，使用 append 比 String 效率高。因为 String 会隐式 new String 对象。 StringBuffer 主要方法都用 synchronized 修饰，是线程安全的；而 StringBuilder 不是。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/01.Java/01.JavaSE/99.Java%E9%9D%A2%E8%AF%95.html"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"Java 面试总结"}],["meta",{"property":"og:description","content":"Java 面试总结 基础 工具类 String String 类能被继承吗？ String，StringBuffer，StringBuilder 的区别。 String 类不能被继承。因为其被 final 修饰，所以无法被继承。 StringBuffer，StringBuilder 拼接字符串，使用 append 比 String 效率高。因为 String 会隐式 new String 对象。 StringBuffer 主要方法都用 synchronized 修饰，是线程安全的；而 StringBuilder 不是。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-11T15:44:18.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"JavaSE"}],["meta",{"property":"article:tag","content":"面试"}],["meta",{"property":"article:published_time","content":"2020-06-04T13:51:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-11T15:44:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 面试总结\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-06-04T13:51:00.000Z\\",\\"dateModified\\":\\"2023-09-11T15:44:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io\\"}]}"]]},"headers":[{"level":2,"title":"基础","slug":"基础","link":"#基础","children":[{"level":3,"title":"工具类","slug":"工具类","link":"#工具类","children":[]},{"level":3,"title":"面向对象","slug":"面向对象","link":"#面向对象","children":[]},{"level":3,"title":"反射","slug":"反射","link":"#反射","children":[]},{"level":3,"title":"JDK8","slug":"jdk8","link":"#jdk8","children":[]},{"level":3,"title":"其他","slug":"其他","link":"#其他","children":[]}]},{"level":2,"title":"IO","slug":"io","link":"#io","children":[{"level":3,"title":"NIO","slug":"nio","link":"#nio","children":[]},{"level":3,"title":"序列化","slug":"序列化","link":"#序列化","children":[]}]},{"level":2,"title":"容器","slug":"容器","link":"#容器","children":[{"level":3,"title":"List","slug":"list","link":"#list","children":[]},{"level":3,"title":"Map","slug":"map","link":"#map","children":[]}]},{"level":2,"title":"并发","slug":"并发","link":"#并发","children":[{"level":3,"title":"并发简介","slug":"并发简介","link":"#并发简介","children":[]},{"level":3,"title":"线程基础","slug":"线程基础","link":"#线程基础","children":[]},{"level":3,"title":"并发机制的底层实现","slug":"并发机制的底层实现","link":"#并发机制的底层实现","children":[]},{"level":3,"title":"内存模型","slug":"内存模型","link":"#内存模型","children":[]},{"level":3,"title":"同步容器和并发容器","slug":"同步容器和并发容器","link":"#同步容器和并发容器","children":[]},{"level":3,"title":"并发锁","slug":"并发锁","link":"#并发锁","children":[]},{"level":3,"title":"原子变量类","slug":"原子变量类","link":"#原子变量类","children":[]},{"level":3,"title":"并发工具类","slug":"并发工具类","link":"#并发工具类","children":[]},{"level":3,"title":"线程池","slug":"线程池","link":"#线程池","children":[]}]},{"level":2,"title":"JVM","slug":"jvm","link":"#jvm","children":[{"level":3,"title":"内存管理","slug":"内存管理","link":"#内存管理","children":[]},{"level":3,"title":"OOM","slug":"oom","link":"#oom","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1694447058000,"updatedTime":1694447058000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":1}]},"readingTime":{"minutes":41.03,"words":12310},"filePathRelative":"01.Java/01.JavaSE/99.Java面试.md","localizedDate":"2020年6月4日","excerpt":"<h1> Java 面试总结</h1>\\n<h2> 基础</h2>\\n<h3> 工具类</h3>\\n<h4> String</h4>\\n<blockquote>\\n<p>String 类能被继承吗？</p>\\n<p>String，StringBuffer，StringBuilder 的区别。</p>\\n</blockquote>\\n<p>String 类不能被继承。因为其被 final 修饰，所以无法被继承。</p>\\n<p>StringBuffer，StringBuilder 拼接字符串，使用 append 比 String 效率高。因为 String 会隐式 new String 对象。</p>\\n<p>StringBuffer 主要方法都用 synchronized 修饰，是线程安全的；而 StringBuilder 不是。</p>","autoDesc":true}');export{e as data};
