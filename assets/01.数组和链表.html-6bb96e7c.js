const e=JSON.parse('{"key":"v-522a7500","path":"/11.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/01.%E7%BA%BF%E6%80%A7%E8%A1%A8/01.%E6%95%B0%E7%BB%84%E5%92%8C%E9%93%BE%E8%A1%A8.html","title":"数组和链表","lang":"zh-CN","frontmatter":{"title":"数组和链表","date":"2015-04-10T18:46:13.000Z","order":1,"category":["数据结构和算法","线性表"],"tag":["数据结构","线性表","数组","链表"],"description":"数组和链表 数组和链表分别代表了连续空间和不连续空间的存储方式，它们是线性表（Linear List）的典型代表。其他所有的数据结构，比如栈、队列、二叉树、B+ 树等，实际上都是这两者的结合和变化。 数组 数组用 连续 的内存空间来存储数据。 数组的访问 数组元素的访问是以行或列索引的单一下标表示。 img","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/11.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/01.%E7%BA%BF%E6%80%A7%E8%A1%A8/01.%E6%95%B0%E7%BB%84%E5%92%8C%E9%93%BE%E8%A1%A8.html"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"数组和链表"}],["meta",{"property":"og:description","content":"数组和链表 数组和链表分别代表了连续空间和不连续空间的存储方式，它们是线性表（Linear List）的典型代表。其他所有的数据结构，比如栈、队列、二叉树、B+ 树等，实际上都是这两者的结合和变化。 数组 数组用 连续 的内存空间来存储数据。 数组的访问 数组元素的访问是以行或列索引的单一下标表示。 img"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-20T00:08:32.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"数据结构"}],["meta",{"property":"article:tag","content":"线性表"}],["meta",{"property":"article:tag","content":"数组"}],["meta",{"property":"article:tag","content":"链表"}],["meta",{"property":"article:published_time","content":"2015-04-10T18:46:13.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-20T00:08:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数组和链表\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2015-04-10T18:46:13.000Z\\",\\"dateModified\\":\\"2023-09-20T00:08:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io\\"}]}"]]},"headers":[{"level":2,"title":"数组","slug":"数组","link":"#数组","children":[{"level":3,"title":"数组的访问","slug":"数组的访问","link":"#数组的访问","children":[]},{"level":3,"title":"数组的插入","slug":"数组的插入","link":"#数组的插入","children":[]},{"level":3,"title":"数组的删除","slug":"数组的删除","link":"#数组的删除","children":[]},{"level":3,"title":"数组的特性","slug":"数组的特性","link":"#数组的特性","children":[]},{"level":3,"title":"多维数组","slug":"多维数组","link":"#多维数组","children":[]}]},{"level":2,"title":"链表","slug":"链表","link":"#链表","children":[{"level":3,"title":"单链表","slug":"单链表","link":"#单链表","children":[]},{"level":3,"title":"双链表","slug":"双链表","link":"#双链表","children":[]},{"level":3,"title":"循环链表","slug":"循环链表","link":"#循环链表","children":[]}]},{"level":2,"title":"数组 vs. 链表","slug":"数组-vs-链表","link":"#数组-vs-链表","children":[]},{"level":2,"title":"数组和链表的基本操作示例","slug":"数组和链表的基本操作示例","link":"#数组和链表的基本操作示例","children":[{"level":3,"title":"一维数组的基本操作","slug":"一维数组的基本操作","link":"#一维数组的基本操作","children":[]},{"level":3,"title":"二维数组的基本操作","slug":"二维数组的基本操作","link":"#二维数组的基本操作","children":[]},{"level":3,"title":"单链表的基本操作","slug":"单链表的基本操作","link":"#单链表的基本操作","children":[]},{"level":3,"title":"双链表的基本操作","slug":"双链表的基本操作","link":"#双链表的基本操作","children":[]}]},{"level":2,"title":"练习","slug":"练习","link":"#练习","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1694447058000,"updatedTime":1695168512000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":2}]},"readingTime":{"minutes":9.76,"words":2929},"filePathRelative":"11.数据结构和算法/01.线性表/01.数组和链表.md","localizedDate":"2015年4月10日","excerpt":"<h1> 数组和链表</h1>\\n<blockquote>\\n<p>数组和链表分别代表了连续空间和不连续空间的存储方式，它们是线性表（Linear List）的典型代表。其他所有的数据结构，比如栈、队列、二叉树、B+ 树等，实际上都是这两者的结合和变化。</p>\\n</blockquote>\\n<h2> 数组</h2>\\n<p>数组用 <strong>连续</strong> 的内存空间来存储数据。</p>\\n<h3> 数组的访问</h3>\\n<p>数组元素的访问是以行或列索引的单一下标表示。</p>\\n<figure><img src=\\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220320115836.png\\" alt=\\"img\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>img</figcaption></figure>","autoDesc":true}');export{e as data};
