const e=JSON.parse('{"key":"v-9f1a0096","path":"/pages/47f7bd/","title":"分布式复制","lang":"zh-CN","frontmatter":{"title":"分布式复制","date":"2022-06-11T10:40:10.000Z","order":1,"permalink":"/pages/47f7bd/","category":["分布式","分布式协同","分布式协同综合"],"tag":["分布式","协同","复制","主从","多主","无主"],"description":"分布式复制 复制是指：在多个节点上保存相同数据的副本，每个副本具体的存储位置可能不尽相同。复制方法可以提供冗余：如果某些节点发生不可用，则可以通过其他节点继续提供服务。复制也可以帮助提高系统性能。 复制数据，可能出于各种各样的原因： 提高可用性 - 即使部分组件（可能是多台机器，甚至整个数据中心）出现故障，系统也能保持正常运行。 降低访问延迟 - 将数据放置在距离用户较近的地方，从而实现更快地交互。 提高读吞吐量 - 采用多副本读取，大幅度提高系统读操作的吞吐量。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/pages/47f7bd/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"分布式复制"}],["meta",{"property":"og:description","content":"分布式复制 复制是指：在多个节点上保存相同数据的副本，每个副本具体的存储位置可能不尽相同。复制方法可以提供冗余：如果某些节点发生不可用，则可以通过其他节点继续提供服务。复制也可以帮助提高系统性能。 复制数据，可能出于各种各样的原因： 提高可用性 - 即使部分组件（可能是多台机器，甚至整个数据中心）出现故障，系统也能保持正常运行。 降低访问延迟 - 将数据放置在距离用户较近的地方，从而实现更快地交互。 提高读吞吐量 - 采用多副本读取，大幅度提高系统读操作的吞吐量。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-15T22:46:25.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"分布式"}],["meta",{"property":"article:tag","content":"协同"}],["meta",{"property":"article:tag","content":"复制"}],["meta",{"property":"article:tag","content":"主从"}],["meta",{"property":"article:tag","content":"多主"}],["meta",{"property":"article:tag","content":"无主"}],["meta",{"property":"article:published_time","content":"2022-06-11T10:40:10.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-15T22:46:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"分布式复制\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-06-11T10:40:10.000Z\\",\\"dateModified\\":\\"2024-05-15T22:46:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io\\"}]}"]]},"headers":[{"level":2,"title":"主从复制","slug":"主从复制","link":"#主从复制","children":[{"level":3,"title":"同步复制与异步复制","slug":"同步复制与异步复制","link":"#同步复制与异步复制","children":[]},{"level":3,"title":"配置新的从节点","slug":"配置新的从节点","link":"#配置新的从节点","children":[]},{"level":3,"title":"处理节点失效","slug":"处理节点失效","link":"#处理节点失效","children":[]},{"level":3,"title":"复制日志的实现","slug":"复制日志的实现","link":"#复制日志的实现","children":[]}]},{"level":2,"title":"复制滞后问题","slug":"复制滞后问题","link":"#复制滞后问题","children":[{"level":3,"title":"写后读一致性","slug":"写后读一致性","link":"#写后读一致性","children":[]},{"level":3,"title":"单调读","slug":"单调读","link":"#单调读","children":[]},{"level":3,"title":"前缀一致读","slug":"前缀一致读","link":"#前缀一致读","children":[]},{"level":3,"title":"复制滞后的解决方案","slug":"复制滞后的解决方案","link":"#复制滞后的解决方案","children":[]}]},{"level":2,"title":"多主复制","slug":"多主复制","link":"#多主复制","children":[{"level":3,"title":"适用场景","slug":"适用场景","link":"#适用场景","children":[]},{"level":3,"title":"处理写冲突","slug":"处理写冲突","link":"#处理写冲突","children":[]},{"level":3,"title":"拓扑结构","slug":"拓扑结构","link":"#拓扑结构","children":[]}]},{"level":2,"title":"无主复制","slug":"无主复制","link":"#无主复制","children":[{"level":3,"title":"节点失效时写入数据库","slug":"节点失效时写入数据库","link":"#节点失效时写入数据库","children":[]},{"level":3,"title":"quorum 一致性的局限性","slug":"quorum-一致性的局限性","link":"#quorum-一致性的局限性","children":[]},{"level":3,"title":"检测并发写","slug":"检测并发写","link":"#检测并发写","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1715731123000,"updatedTime":1715813185000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":2}]},"readingTime":{"minutes":53.78,"words":16133},"filePathRelative":"15.分布式/11.分布式协同/01.分布式协同综合/01.分布式复制.md","localizedDate":"2022年6月11日","excerpt":"<h1> 分布式复制</h1>\\n<p>复制是指：在多个节点上保存相同数据的副本，每个副本具体的存储位置可能不尽相同。复制方法可以提供冗余：如果某些节点发生不可用，则可以通过其他节点继续提供服务。复制也可以帮助提高系统性能。</p>\\n<p>复制数据，可能出于各种各样的原因：</p>\\n<ul>\\n<li><strong>提高可用性</strong> - 即使部分组件（可能是多台机器，甚至整个数据中心）出现故障，系统也能保持正常运行。</li>\\n<li><strong>降低访问延迟</strong> - 将数据放置在距离用户较近的地方，从而实现更快地交互。</li>\\n<li><strong>提高读吞吐量</strong> - 采用多副本读取，大幅度提高系统读操作的吞吐量。</li>\\n</ul>","autoDesc":true}');export{e as data};
