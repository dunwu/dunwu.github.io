import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as d,c,a as n,d as e,b as s,e as t}from"./app-e12ad880.js";const l={},p=t('<h1 id="redis-独立功能" tabindex="-1"><a class="header-anchor" href="#redis-独立功能" aria-hidden="true">#</a> Redis 独立功能</h1><h2 id="事务" tabindex="-1"><a class="header-anchor" href="#事务" aria-hidden="true">#</a> 事务</h2><blockquote><p><strong>Redis 提供的不是严格的事务，Redis 只保证串行执行命令，并且能保证全部执行，但是执行命令失败时并不会回滚，而是会继续执行下去</strong>。</p></blockquote><p><code>MULTI</code> 、 <code>EXEC</code> 、 <code>DISCARD</code> 和 <code>WATCH</code> 是 Redis 事务相关的命令。</p><p>事务可以一次执行多个命令， 并且有以下两个重要的保证：</p><ul><li>事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</li><li>事务是一个原子操作：事务中的命令要么全部被执行，要么全部都不执行。</li></ul><h3 id="multi" tabindex="-1"><a class="header-anchor" href="#multi" aria-hidden="true">#</a> MULTI</h3>',7),r={href:"https://redis.io/commands/multi",target:"_blank",rel:"noopener noreferrer"},u=n("code",null,"MULTI",-1),v=t(`<p><code>MULTI</code> 执行之后， 客户端可以继续向服务器发送任意多条命令， 这些命令不会立即被执行， 而是被放到一个队列中， 当 EXEC 命令被调用时， 所有队列中的命令才会被执行。</p><p>以下是一个事务例子， 它原子地增加了 foo 和 bar 两个键的值：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;</span> MULTI
OK
<span class="token operator">&gt;</span> INCR foo
QUEUED
<span class="token operator">&gt;</span> INCR bar
QUEUED
<span class="token operator">&gt;</span> EXEC
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="exec" tabindex="-1"><a class="header-anchor" href="#exec" aria-hidden="true">#</a> EXEC</h3>`,4),h={href:"https://redis.io/commands/exec",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"EXEC",-1),k=n("ul",null,[n("li",null,[s("如果客户端在使用 "),n("code",null,"MULTI"),s(" 开启了一个事务之后，却因为断线而没有成功执行 "),n("code",null,"EXEC"),s(" ，那么事务中的所有命令都不会被执行。")]),n("li",null,[s("另一方面，如果客户端成功在开启事务之后执行 "),n("code",null,"EXEC"),s(" ，那么事务中的所有命令都会被执行。")])],-1),b=n("h3",{id:"discard",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#discard","aria-hidden":"true"},"#"),s(" DISCARD")],-1),g={href:"https://redis.io/commands/discard",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"DISCARD",-1),R=t(`<p>示例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;</span> SET foo <span class="token number">1</span>
OK
<span class="token operator">&gt;</span> MULTI
OK
<span class="token operator">&gt;</span> INCR foo
QUEUED
<span class="token operator">&gt;</span> DISCARD
OK
<span class="token operator">&gt;</span> GET foo
<span class="token string">&quot;1&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="watch" tabindex="-1"><a class="header-anchor" href="#watch" aria-hidden="true">#</a> WATCH</h3>`,3),E={href:"https://redis.io/commands/watch",target:"_blank",rel:"noopener noreferrer"},L=n("code",null,"WATCH",-1),C=t(`<p>被 WATCH 的键会被监视，并会发觉这些键是否被改动过了。 如果有至少一个被监视的键在 EXEC 执行之前被修改了， 那么整个事务都会被取消， EXEC 返回 nil-reply 来表示事务已经失败。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>WATCH mykey
val <span class="token operator">=</span> GET mykey
val <span class="token operator">=</span> val <span class="token operator">+</span> <span class="token number">1</span>
MULTI
SET mykey $val
EXEC
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用上面的代码， 如果在 WATCH 执行之后， EXEC 执行之前， 有其他客户端修改了 mykey 的值， 那么当前客户端的事务就会失败。 程序需要做的， 就是不断重试这个操作， 直到没有发生碰撞为止。</p><p>这种形式的锁被称作乐观锁， 它是一种非常强大的锁机制。 并且因为大多数情况下， 不同的客户端会访问不同的键， 碰撞的情况一般都很少， 所以通常并不需要进行重试。</p><p>WATCH 使得 EXEC 命令需要有条件地执行：事务只能在所有被监视键都没有被修改的前提下执行，如果这个前提不能满足的话，事务就不会被执行。</p><p>WATCH 命令可以被调用多次。对键的监视从 WATCH 执行之后开始生效，直到调用 EXEC 为止。</p><p>用户还可以在单个 WATCH 命令中监视任意多个键，例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>redis<span class="token operator">&gt;</span> WATCH key1 key2 key3
OK
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="取消-watch-的场景" tabindex="-1"><a class="header-anchor" href="#取消-watch-的场景" aria-hidden="true">#</a> 取消 WATCH 的场景</h4><p>当 EXEC 被调用时， 不管事务是否成功执行， 对所有键的监视都会被取消。</p><p>另外， 当客户端断开连接时， 该客户端对键的监视也会被取消。</p><p>使用无参数的 UNWATCH 命令可以手动取消对所有键的监视。 对于一些需要改动多个键的事务， 有时候程序需要同时对多个键进行加锁， 然后检查这些键的当前值是否符合程序的要求。 当值达不到要求时， 就可以使用 UNWATCH 命令来取消目前对键的监视， 中途放弃这个事务， 并等待事务的下次尝试。</p><h4 id="使用-watch-创建原子操作" tabindex="-1"><a class="header-anchor" href="#使用-watch-创建原子操作" aria-hidden="true">#</a> 使用 WATCH 创建原子操作</h4><p>WATCH 可以用于创建 Redis 没有内置的原子操作。</p><p>举个例子，以下代码实现了原创的 ZPOP 命令，它可以原子地弹出有序集合中分值（score）最小的元素：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>WATCH zset
element = ZRANGE zset 0 0
MULTI
ZREM zset element
EXEC
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rollback" tabindex="-1"><a class="header-anchor" href="#rollback" aria-hidden="true">#</a> Rollback</h3><p><strong>Redis 不支持回滚</strong>。Redis 不支持回滚的理由：</p><ul><li>Redis 命令只会因为错误的语法而失败，或是命令用在了错误类型的键上面。</li><li>因为不需要对回滚进行支持，所以 Redis 的内部可以保持简单且快速。</li></ul><h2 id="订阅与发布" tabindex="-1"><a class="header-anchor" href="#订阅与发布" aria-hidden="true">#</a> 订阅与发布</h2><p>Redis 提供了 5 个订阅与发布命令：</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>SUBSCRIBE</code></td><td><code>SUBSCRIBE channel [channel ...]</code>—订阅指定频道。</td></tr><tr><td><code>UNSUBSCRIBE</code></td><td><code>UNSUBSCRIBE [channel [channel ...]]</code>—取消订阅指定频道。</td></tr><tr><td><code>PUBLISH</code></td><td><code>PUBLISH channel message</code>—发送信息到指定的频道。</td></tr><tr><td><code>PSUBSCRIBE</code></td><td><code>PSUBSCRIBE pattern [pattern ...]</code>—订阅符合指定模式的频道。</td></tr><tr><td><code>PUNSUBSCRIBE</code></td><td><code>PUNSUBSCRIBE [pattern [pattern ...]]</code>—取消订阅符合指定模式的频道。</td></tr></tbody></table><p>订阅者订阅了频道之后，发布者向频道发送字符串消息会被所有订阅者接收到。</p><p>某个客户端使用 SUBSCRIBE 订阅一个频道，其它客户端可以使用 PUBLISH 向这个频道发送消息。</p><p>订阅与发布模式和观察者模式有以下不同：</p><ul><li>观察者模式中，观察者和主题都知道对方的存在；而在订阅与发布模式中，发布者与订阅者不知道对方的存在，它们之间通过频道进行通信。</li><li>观察者模式是同步的，当事件触发时，主题会去调用观察者的方法；而订阅与发布模式是异步的；</li></ul><h2 id="lua" tabindex="-1"><a class="header-anchor" href="#lua" aria-hidden="true">#</a> Lua</h2><blockquote><p>Redis 2.6 版本通过内嵌支持 Lua 环境。</p></blockquote><h3 id="为什么使用-lua" tabindex="-1"><a class="header-anchor" href="#为什么使用-lua" aria-hidden="true">#</a> 为什么使用 Lua</h3><p>Lua 是一种轻量小巧的脚本语言，用标准 C 语言编写并以源代码形式开放， 其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。</p><p>在 Redis 中，执行单一命令是原子性操作，所以不会出现并发问题。但有的业务场景下，需要执行多个命令，同时确保不出现并发问题，这就需要用到 Lua 脚本了。</p><p><strong>Redis 执行 Lua 是原子操作</strong>。因为 Redis 使用串行化的方式来执行 Redis 命令， 所以在任何特定时间里， 最多都只会有一个脚本能够被放进 Lua 环境里面运行， 因此， 整个 Redis 服务器只需要创建一个 Lua 环境即可。</p><p>由于，Redis 执行 Lua 具有原子性，所以常被用于需要原子性执行多命令的场景。</p><h3 id="命令" tabindex="-1"><a class="header-anchor" href="#命令" aria-hidden="true">#</a> 命令</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>EVAL</code></td><td><code>EVAL</code> 命令为客户端输入的脚本在 Lua 环境中定义一个函数， 并通过调用这个函数来执行脚本。</td></tr><tr><td><code>EVALSHA</code></td><td><code>EVALSHA</code> 命令通过直接调用 Lua 环境中已定义的函数来执行脚本。</td></tr><tr><td><code>SCRIPT_FLUSH</code></td><td><code>SCRIPT_FLUSH</code> 命令会清空服务器 <code>lua_scripts</code> 字典中保存的脚本， 并重置 Lua 环境。</td></tr><tr><td><code>SCRIPT_EXISTS</code></td><td><code>SCRIPT_EXISTS</code> 命令接受一个或多个 SHA1 校验和为参数， 并通过检查 <code>lua_scripts</code> 字典来确认校验和对应的脚本是否存在。</td></tr><tr><td><code>SCRIPT_LOAD</code></td><td><code>SCRIPT_LOAD</code> 命令接受一个 Lua 脚本为参数， 为该脚本在 Lua 环境中创建函数， 并将脚本保存到 <code>lua_scripts</code> 字典中。</td></tr><tr><td><code>SCRIPT_KILL</code></td><td><code>SCRIPT_KILL</code> 命令用于停止正在执行的脚本。</td></tr></tbody></table><h3 id="redis-执行-lua-的工作流程" tabindex="-1"><a class="header-anchor" href="#redis-执行-lua-的工作流程" aria-hidden="true">#</a> Redis 执行 Lua 的工作流程</h3><p>为了在 Redis 服务器中执行 Lua 脚本， Redis 在服务器内嵌了一个 Lua 环境（environment）， 并对这个 Lua 环境进行了一系列修改， 从而确保这个 Lua 环境可以满足 Redis 服务器的需要。</p><p>Redis 服务器创建并修改 Lua 环境的整个过程由以下步骤组成：</p><ol><li>创建一个基础的 Lua 环境， 之后的所有修改都是针对这个环境进行的。</li><li>载入多个函数库到 Lua 环境里面， 让 Lua 脚本可以使用这些函数库来进行数据操作。</li><li>创建全局表格 <code>redis</code> ， 这个表格包含了对 Redis 进行操作的函数， 比如用于在 Lua 脚本中执行 Redis 命令的 <code>redis.call</code> 函数。</li><li>使用 Redis 自制的随机函数来替换 Lua 原有的带有副作用的随机函数， 从而避免在脚本中引入副作用。</li><li>创建排序辅助函数， Lua 环境使用这个辅佐函数来对一部分 Redis 命令的结果进行排序， 从而消除这些命令的不确定性。</li><li>创建 <code>redis.pcall</code> 函数的错误报告辅助函数， 这个函数可以提供更详细的出错信息。</li><li>对 Lua 环境里面的全局环境进行保护， 防止用户在执行 Lua 脚本的过程中， 将额外的全局变量添加到了 Lua 环境里面。</li><li>将完成修改的 Lua 环境保存到服务器状态的 <code>lua</code> 属性里面， 等待执行服务器传来的 Lua 脚本。</li></ol><h3 id="redis-执行-lua-的要点" tabindex="-1"><a class="header-anchor" href="#redis-执行-lua-的要点" aria-hidden="true">#</a> Redis 执行 Lua 的要点</h3><ul><li>Redis 服务器专门使用一个伪客户端来执行 Lua 脚本中包含的 Redis 命令。</li><li>Redis 使用脚本字典来保存所有被 <code>EVAL</code> 命令执行过， 或者被 <code>SCRIPT_LOAD</code> 命令载入过的 Lua 脚本， 这些脚本可以用于实现 <code>SCRIPT_EXISTS</code> 命令， 以及实现脚本复制功能。</li><li>服务器在执行脚本之前， 会为 Lua 环境设置一个超时处理钩子， 当脚本出现超时运行情况时， 客户端可以通过向服务器发送 <code>SCRIPT_KILL</code> 命令来让钩子停止正在执行的脚本， 或者发送 <code>SHUTDOWN nosave</code> 命令来让钩子关闭整个服务器。</li><li>主服务器复制 <code>EVAL</code> 、 <code>SCRIPT_FLUSH</code> 、 <code>SCRIPT_LOAD</code> 三个命令的方法和复制普通 Redis 命令一样 —— 只要将相同的命令传播给从服务器就可以了。</li><li>主服务器在复制 <code>EVALSHA</code> 命令时， 必须确保所有从服务器都已经载入了 <code>EVALSHA</code> 命令指定的 SHA1 校验和所对应的 Lua 脚本， 如果不能确保这一点的话， 主服务器会将 <code>EVALSHA</code> 命令转换成等效的 <code>EVAL</code> 命令， 并通过传播 <code>EVAL</code> 命令来获得相同的脚本执行效果。</li></ul><h2 id="管道" tabindex="-1"><a class="header-anchor" href="#管道" aria-hidden="true">#</a> 管道</h2><p>Redis 是一种基于 C/S 模型以及请求/响应协议的 TCP 服务。Redis 支持管道技术。管道技术允许请求以异步方式发送，即旧请求的应答还未返回的情况下，允许发送新请求。这种方式可以大大提高传输效率。</p><p>在需要批量执行 Redis 命令时，如果一条一条执行，显然很低效。为了减少通信次数并降低延迟，可以使用 Redis 管道功能。Redis 的管道（pipeline）功能没有提供命令行支持，但是在各种语言版本的客户端中都有相应的实现。</p><p>以 Jedis 为例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Pipeline</span> pipe <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">pipelined</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
pipe<span class="token punctuation">.</span><span class="token function">multi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
pipe<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span><span class="token string">&quot;login:&quot;</span><span class="token punctuation">,</span> token<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
pipe<span class="token punctuation">.</span><span class="token function">zadd</span><span class="token punctuation">(</span><span class="token string">&quot;recent:&quot;</span><span class="token punctuation">,</span> timestamp<span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    pipe<span class="token punctuation">.</span><span class="token function">zadd</span><span class="token punctuation">(</span><span class="token string">&quot;viewed:&quot;</span> <span class="token operator">+</span> token<span class="token punctuation">,</span> timestamp<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    pipe<span class="token punctuation">.</span><span class="token function">zremrangeByRank</span><span class="token punctuation">(</span><span class="token string">&quot;viewed:&quot;</span> <span class="token operator">+</span> token<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pipe<span class="token punctuation">.</span><span class="token function">zincrby</span><span class="token punctuation">(</span><span class="token string">&quot;viewed:&quot;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
pipe<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>🔔 注意：使用管道发送命令时，Redis Server 会将部分请求放到缓存队列中（占用内存），执行完毕后一次性发送结果。如果需要发送大量的命令，会占用大量的内存，因此应该按照合理数量分批次的处理。</p></blockquote><h2 id="redis-事件" tabindex="-1"><a class="header-anchor" href="#redis-事件" aria-hidden="true">#</a> Redis 事件</h2><p>Redis 服务器是一个事件驱动程序，服务器需要处理两类事件：</p><ul><li><strong><code>文件事件（file event）</code></strong> - Redis 服务器通过套接字（Socket）与客户端或者其它服务器进行通信，文件事件就是对套接字操作的抽象。服务器与客户端（或其他的服务器）的通信会产生文件事件，而服务器通过监听并处理这些事件来完成一系列网络通信操作。</li><li><strong><code>时间事件（time event）</code></strong> - Redis 服务器有一些操作需要在给定的时间点执行，时间事件是对这类定时操作的抽象。</li></ul><h3 id="文件事件" tabindex="-1"><a class="header-anchor" href="#文件事件" aria-hidden="true">#</a> 文件事件</h3><p>Redis 基于 Reactor 模式开发了自己的网络时间处理器。</p><ul><li>Redis 文件事件处理器使用 I/O 多路复用程序来同时监听多个套接字，并根据套接字目前执行的任务来为套接字关联不同的事件处理器。</li><li>当被监听的套接字准备好执行连接应答、读取、写入、关闭操作时，与操作相对应的文件事件就会产生，这时文件事件处理器就会调用套接字之前关联好的事件处理器来处理这些事件。</li></ul><p>虽然文件事件处理器以单线程方式运行，但通过使用 I/O 多路复用程序来监听多个套接字，文件事件处理器实现了高性能的网络通信模型。</p><p>文件事件处理器有四个组成部分：套接字、I/O 多路复用程序、文件事件分派器、事件处理器。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/dev/snap/20200130172525.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="时间事件" tabindex="-1"><a class="header-anchor" href="#时间事件" aria-hidden="true">#</a> 时间事件</h3><p>时间事件又分为：</p><ul><li><strong>定时事件</strong>：是让一段程序在指定的时间之内执行一次；</li><li><strong>周期性事件</strong>：是让一段程序每隔指定时间就执行一次。</li></ul><p>Redis 将所有时间事件都放在一个无序链表中，每当时间事件执行器运行时，通过遍历整个链表查找出已到达的时间事件，并调用响应的事件处理器。</p><h3 id="事件的调度与执行" tabindex="-1"><a class="header-anchor" href="#事件的调度与执行" aria-hidden="true">#</a> 事件的调度与执行</h3><p>服务器需要不断监听文件事件的套接字才能得到待处理的文件事件，但是不能一直监听，否则时间事件无法在规定的时间内执行，因此监听时间应该根据距离现在最近的时间事件来决定。</p><p>事件调度与执行由 aeProcessEvents 函数负责，伪代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">aeProcessEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token comment">## 获取到达时间离当前时间最接近的时间事件</span>
    time_event <span class="token operator">=</span> aeSearchNearestTimer<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">## 计算最接近的时间事件距离到达还有多少毫秒</span>
    remaind_ms <span class="token operator">=</span> time_event<span class="token punctuation">.</span>when <span class="token operator">-</span> unix_ts_now<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">## 如果事件已到达，那么 remaind_ms 的值可能为负数，将它设为 0</span>
    <span class="token keyword">if</span> remaind_ms <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
        remaind_ms <span class="token operator">=</span> <span class="token number">0</span>

    <span class="token comment">## 根据 remaind_ms 的值，创建 timeval</span>
    timeval <span class="token operator">=</span> create_timeval_with_ms<span class="token punctuation">(</span>remaind_ms<span class="token punctuation">)</span>

    <span class="token comment">## 阻塞并等待文件事件产生，最大阻塞时间由传入的 timeval 决定</span>
    aeApiPoll<span class="token punctuation">(</span>timeval<span class="token punctuation">)</span>

    <span class="token comment">## 处理所有已产生的文件事件</span>
    procesFileEvents<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">## 处理所有已到达的时间事件</span>
    processTimeEvents<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将 aeProcessEvents 函数置于一个循环里面，加上初始化和清理函数，就构成了 Redis 服务器的主函数，伪代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token comment">## 初始化服务器</span>
    init_server<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">## 一直处理事件，直到服务器关闭为止</span>
    <span class="token keyword">while</span> server_is_not_shutdown<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        aeProcessEvents<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">## 服务器关闭，执行清理操作</span>
    clean_server<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从事件处理的角度来看，服务器运行流程如下：</p><div align="center"><img src="https://raw.githubusercontent.com/dunwu/images/dev/cs/database/redis/redis-event.png"></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,69),f={href:"https://item.jd.com/11791607.html",target:"_blank",rel:"noopener noreferrer"},S={href:"https://item.jd.com/11486101.html",target:"_blank",rel:"noopener noreferrer"};function I(T,A){const a=o("ExternalLinkIcon");return d(),c("div",null,[p,n("p",null,[n("strong",null,[n("a",r,[u,e(a)]),s(" 命令用于开启一个事务，它总是返回 OK 。")])]),v,n("p",null,[n("strong",null,[n("a",h,[m,e(a)]),s(" 命令负责触发并执行事务中的所有命令。")])]),k,b,n("p",null,[n("strong",null,[s("当执行 "),n("a",g,[_,e(a)]),s(" 命令时， 事务会被放弃， 事务队列会被清空， 并且客户端会从事务状态中退出。")])]),R,n("p",null,[n("strong",null,[n("a",E,[L,e(a)]),s(" 命令可以为 Redis 事务提供 check-and-set （CAS）行为。")])]),C,n("ul",null,[n("li",null,[n("a",f,[s("《Redis 实战》"),e(a)])]),n("li",null,[n("a",S,[s("《Redis 设计与实现》"),e(a)])])])])}const U=i(l,[["render",I],["__file","06.Redis独立功能.html.vue"]]);export{U as default};
