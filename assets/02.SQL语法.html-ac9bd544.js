import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as d,o as l,c,b as n,a as s,d as e,e as t}from"./app-2ca3a8cf.js";const p={},i=t(`<h1 id="sql-语法速成" tabindex="-1"><a class="header-anchor" href="#sql-语法速成" aria-hidden="true">#</a> SQL 语法速成</h1><blockquote><p>本文针对关系型数据库的基本语法。限于篇幅，本文侧重说明用法，不会展开讲解特性、原理。</p><p>本文语法主要针对 Mysql，但大部分的语法对其他关系型数据库也适用。</p></blockquote><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202310011053288.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="sql-简介" tabindex="-1"><a class="header-anchor" href="#sql-简介" aria-hidden="true">#</a> SQL 简介</h2><h3 id="数据库术语" tabindex="-1"><a class="header-anchor" href="#数据库术语" aria-hidden="true">#</a> 数据库术语</h3><ul><li><strong>数据库（database）</strong> - 保存有组织的数据的容器（通常是一个文件或一组文件）。</li><li><strong>数据表（table）</strong> - 某种特定类型数据的结构化清单。</li><li><strong>模式（schema）</strong> - 关于数据库和表的布局及特性的信息。模式定义了数据在表中如何存储，包含存储什么样的数据，数据如何分解，各部分信息如何命名等信息。数据库和表都有模式。</li><li><strong>行（row）</strong> - 表中的一条记录。</li><li><strong>列（column）</strong> - 表中的一个字段。所有表都是由一个或多个列组成的。</li><li><strong>主键（primary key）</strong> - 一列（或一组列），其值能够唯一标识表中每一行。</li></ul><h3 id="sql-语法" tabindex="-1"><a class="header-anchor" href="#sql-语法" aria-hidden="true">#</a> SQL 语法</h3><blockquote><p>SQL（Structured Query Language)，标准 SQL 由 ANSI 标准委员会管理，从而称为 ANSI SQL。各个 DBMS 都有自己的实现，如 PL/SQL、Transact-SQL 等。</p></blockquote><h4 id="sql-语法结构" tabindex="-1"><a class="header-anchor" href="#sql-语法结构" aria-hidden="true">#</a> SQL 语法结构</h4><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/database/mysql/sql-syntax.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>SQL 语法结构包括：</p><ul><li><strong>子句</strong> - 是语句和查询的组成成分。（在某些情况下，这些都是可选的。）</li><li><strong>表达式</strong> - 可以产生任何标量值，或由列和行的数据库表</li><li><strong>谓词</strong> - 给需要评估的 SQL 三值逻辑（3VL）（true/false/unknown）或布尔真值指定条件，并限制语句和查询的效果，或改变程序流程。</li><li><strong>查询</strong> - 基于特定条件检索数据。这是 SQL 的一个重要组成部分。</li><li><strong>语句</strong> - 可以持久地影响纲要和数据，也可以控制数据库事务、程序流程、连接、会话或诊断。</li></ul><h4 id="sql-语法要点" tabindex="-1"><a class="header-anchor" href="#sql-语法要点" aria-hidden="true">#</a> SQL 语法要点</h4><ul><li><strong>SQL 语句不区分大小写</strong>，但是数据库表名、列名和值是否区分，依赖于具体的 DBMS 以及配置。</li></ul><p>例如：<code>SELECT</code> 与 <code>select</code> 、<code>Select</code> 是相同的。</p><ul><li><p><strong>多条 SQL 语句必须以分号（<code>;</code>）分隔</strong>。</p></li><li><p>处理 SQL 语句时，<strong>所有空格都被忽略</strong>。SQL 语句可以写成一行，也可以分写为多行。</p></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 一行 SQL 语句</span>
<span class="token keyword">UPDATE</span> <span class="token keyword">user</span> <span class="token keyword">SET</span> username<span class="token operator">=</span><span class="token string">&#39;robot&#39;</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">&#39;robot&#39;</span> <span class="token keyword">WHERE</span> username <span class="token operator">=</span> <span class="token string">&#39;root&#39;</span><span class="token punctuation">;</span>

<span class="token comment">-- 多行 SQL 语句</span>
<span class="token keyword">UPDATE</span> <span class="token keyword">user</span>
<span class="token keyword">SET</span> username<span class="token operator">=</span><span class="token string">&#39;robot&#39;</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">&#39;robot&#39;</span>
<span class="token keyword">WHERE</span> username <span class="token operator">=</span> <span class="token string">&#39;root&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>SQL 支持三种注释</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">## 注释1</span>
<span class="token comment">-- 注释2</span>
<span class="token comment">/* 注释3 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="sql-分类" tabindex="-1"><a class="header-anchor" href="#sql-分类" aria-hidden="true">#</a> SQL 分类</h4><h5 id="ddl" tabindex="-1"><a class="header-anchor" href="#ddl" aria-hidden="true">#</a> DDL</h5><p><strong>DDL</strong>，英文叫做 Data Definition Language，即**“数据定义语言”**。<strong>DDL 用于定义数据库对象</strong>。</p><p>DDL 定义操作包括创建（<code>CREATE</code>）、删除（<code>DROP</code>）、修改（<code>ALTER</code>）；而被操作的对象包括：数据库、数据表和列、视图、索引。</p><h5 id="dml" tabindex="-1"><a class="header-anchor" href="#dml" aria-hidden="true">#</a> DML</h5><p><strong>DML</strong>，英文叫做 Data Manipulation Language，即**“数据操作语言”**。<strong>DML 用于访问数据库的数据</strong>。</p><p>DML 访问操作包括插入（<code>INSERT</code>）、删除（<code>DELETE</code>）、修改（<code>UPDATE</code>）、查询（<code>SELECT</code>）。这四个指令合称 <strong>CRUD</strong>，英文单词为 Create, Read, Update, Delete，即增删改查。</p><h5 id="tcl" tabindex="-1"><a class="header-anchor" href="#tcl" aria-hidden="true">#</a> TCL</h5><p><strong>TCL</strong>，英文叫做 Transaction Control Language，即**“事务控制语言”**。<strong>TCL 用于管理数据库中的事务</strong>，实际上就是用于管理由 DML 语句所产生的数据变更，它还允许将语句分组为逻辑事务。</p><p>TCL 的核心指令是 <code>COMMIT</code>、<code>ROLLBACK</code>。</p><h5 id="dcl" tabindex="-1"><a class="header-anchor" href="#dcl" aria-hidden="true">#</a> DCL</h5><p><strong>DCL</strong>，英文叫做 Data Control Language，即**“数据控制语言”**。DCL 用于对数据访问权进行控制，它可以控制特定用户账户对数据表、查看表、预存程序、用户自定义函数等数据库对象的控制权。</p><p>DCL 的核心指令是 <code>GRANT</code>、<code>REVOKE</code>。</p><p>DCL 以<strong>控制用户的访问权限</strong>为主，因此其指令作法并不复杂，可利用 DCL 控制的权限有：<code>CONNECT</code>、<code>SELECT</code>、<code>INSERT</code>、<code>UPDATE</code>、<code>DELETE</code>、<code>EXECUTE</code>、<code>USAGE</code>、<code>REFERENCES</code>。根据不同的 DBMS 以及不同的安全性实体，其支持的权限控制也有所不同。</p><h2 id="数据定义-create、alter、drop" tabindex="-1"><a class="header-anchor" href="#数据定义-create、alter、drop" aria-hidden="true">#</a> 数据定义（CREATE、ALTER、DROP）</h2><blockquote><p>DDL 的主要功能是定义数据库对象（如：数据库、数据表、视图、索引等）。</p></blockquote><h3 id="数据库-database" tabindex="-1"><a class="header-anchor" href="#数据库-database" aria-hidden="true">#</a> 数据库（DATABASE）</h3><h4 id="创建数据库" tabindex="-1"><a class="header-anchor" href="#创建数据库" aria-hidden="true">#</a> 创建数据库</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> db_tutorial<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="删除数据库" tabindex="-1"><a class="header-anchor" href="#删除数据库" aria-hidden="true">#</a> 删除数据库</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">DATABASE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> db_tutorial<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="选择数据库" tabindex="-1"><a class="header-anchor" href="#选择数据库" aria-hidden="true">#</a> 选择数据库</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">USE</span> db_tutorial<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="数据表-table" tabindex="-1"><a class="header-anchor" href="#数据表-table" aria-hidden="true">#</a> 数据表（TABLE）</h3><h4 id="创建数据表" tabindex="-1"><a class="header-anchor" href="#创建数据表" aria-hidden="true">#</a> 创建数据表</h4><p><strong>普通创建</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">user</span> <span class="token punctuation">(</span>
    id       <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;Id&#39;</span><span class="token punctuation">,</span>
    username <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span>      <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;default&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;用户名&#39;</span><span class="token punctuation">,</span>
    password <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span>      <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;default&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;密码&#39;</span><span class="token punctuation">,</span>
    email    <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span>      <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;default&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;邮箱&#39;</span>
<span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token operator">=</span><span class="token string">&#39;用户表&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>根据已有的表创建新表</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> vip_user <span class="token keyword">AS</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="修改数据表" tabindex="-1"><a class="header-anchor" href="#修改数据表" aria-hidden="true">#</a> 修改数据表</h4><h5 id="添加列" tabindex="-1"><a class="header-anchor" href="#添加列" aria-hidden="true">#</a> 添加列</h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token keyword">user</span>
<span class="token keyword">ADD</span> age <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="删除列" tabindex="-1"><a class="header-anchor" href="#删除列" aria-hidden="true">#</a> 删除列</h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token keyword">user</span>
<span class="token keyword">DROP</span> <span class="token keyword">COLUMN</span> age<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="修改列" tabindex="-1"><a class="header-anchor" href="#修改列" aria-hidden="true">#</a> 修改列</h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>user<span class="token punctuation">\`</span></span>
<span class="token keyword">MODIFY</span> <span class="token keyword">COLUMN</span> age <span class="token keyword">tinyint</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="删除数据表" tabindex="-1"><a class="header-anchor" href="#删除数据表" aria-hidden="true">#</a> 删除数据表</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token keyword">user</span><span class="token punctuation">;</span>
<span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> vip_user<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="视图-view" tabindex="-1"><a class="header-anchor" href="#视图-view" aria-hidden="true">#</a> 视图（VIEW）</h3><p><strong>“视图”是基于 SQL 语句的结果集的可视化的表</strong>。视图是虚拟的表，本身不存储数据，也就不能对其进行索引操作。对视图的操作和对普通表的操作一样。</p><p>视图的作用：</p><ul><li>简化复杂的 SQL 操作，比如复杂的连接。</li><li>只使用实际表的一部分数据。</li><li>通过只给用户访问视图的权限，保证数据的安全性。</li><li>更改数据格式和表示。</li></ul><h4 id="创建视图" tabindex="-1"><a class="header-anchor" href="#创建视图" aria-hidden="true">#</a> 创建视图</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> top_10_user_view <span class="token keyword">AS</span>
<span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> username <span class="token keyword">FROM</span> <span class="token keyword">user</span>
<span class="token keyword">WHERE</span> id <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="删除视图" tabindex="-1"><a class="header-anchor" href="#删除视图" aria-hidden="true">#</a> 删除视图</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">VIEW</span> top_10_user_view<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="索引-index" tabindex="-1"><a class="header-anchor" href="#索引-index" aria-hidden="true">#</a> 索引（INDEX）</h3><p><strong>“索引”是数据库为了提高查找效率的一种数据结构</strong>。</p><p>日常生活中，我们可以通过检索目录，来快速定位书本中的内容。索引和数据表，就好比目录和书，想要高效查询数据表，索引至关重要。在数据量小且负载较低时，不恰当的索引对于性能的影响可能还不明显；但随着数据量逐渐增大，性能则会急剧下降。因此，<strong>设置合理的索引是数据库查询性能优化的最有效手段</strong>。</p><p>更新一个包含索引的表需要比更新一个没有索引的表花费更多的时间，这是由于索引本身也需要更新。因此，理想的做法是仅仅在常常被搜索的列（以及表）上面创建索引。</p><p>“唯一索引”表明此索引的每一个索引值只对应唯一的数据记录。</p><h4 id="创建索引" tabindex="-1"><a class="header-anchor" href="#创建索引" aria-hidden="true">#</a> 创建索引</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_email
    <span class="token keyword">ON</span> <span class="token keyword">user</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="创建唯一索引" tabindex="-1"><a class="header-anchor" href="#创建唯一索引" aria-hidden="true">#</a> 创建唯一索引</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">UNIQUE</span> <span class="token keyword">INDEX</span> uniq_name
    <span class="token keyword">ON</span> <span class="token keyword">user</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="删除索引" tabindex="-1"><a class="header-anchor" href="#删除索引" aria-hidden="true">#</a> 删除索引</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token keyword">user</span>
<span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> idx_email<span class="token punctuation">;</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token keyword">user</span>
<span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> uniq_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="添加主键" tabindex="-1"><a class="header-anchor" href="#添加主键" aria-hidden="true">#</a> 添加主键</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token keyword">user</span>
<span class="token keyword">ADD</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="删除主键" tabindex="-1"><a class="header-anchor" href="#删除主键" aria-hidden="true">#</a> 删除主键</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token keyword">user</span>
<span class="token keyword">DROP</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="约束" tabindex="-1"><a class="header-anchor" href="#约束" aria-hidden="true">#</a> 约束</h3><blockquote><p>SQL 约束用于规定表中的数据规则。</p></blockquote><p>如果存在违反约束的数据行为，行为会被约束终止。约束可以在创建表时规定（通过 <code>CREATE TABLE</code> 语句），或者在表创建之后规定（通过 <code>ALTER TABLE</code> 语句）。</p><p>约束类型</p><ul><li><code>NOT NULL</code> - 指示字段不能存储 <code>NULL</code> 值。</li><li><code>UNIQUE</code> - 保证字段的每行必须有唯一的值。</li><li><code>PRIMARY KEY</code> - PRIMARY KEY 的作用是唯一标识一条记录，不能重复，不能为空，即相当于 <code>NOT NULL</code> + <code>UNIQUE</code>。确保字段（或两个列多个列的结合）有唯一标识，有助于更容易更快速地找到表中的一个特定的记录。</li><li><code>FOREIGN KEY</code> - 保证一个表中的数据匹配另一个表中的值的参照完整性。</li><li><code>CHECK</code> - 用于检查字段取值范围的有效性。</li><li><code>DEFAULT</code> - 表明字段的默认值。如果插入数据时，该字段没有赋值，就会被设置为默认值。</li></ul><p>创建表时使用约束条件：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> Users <span class="token punctuation">(</span>
  Id <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;自增Id&#39;</span><span class="token punctuation">,</span>
  Username <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">UNIQUE</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;default&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;用户名&#39;</span><span class="token punctuation">,</span>
  Password <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;default&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;密码&#39;</span><span class="token punctuation">,</span>
  Email <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;default&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;邮箱地址&#39;</span><span class="token punctuation">,</span>
  Enabled <span class="token keyword">TINYINT</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;是否有效&#39;</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>Id<span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4 <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">&#39;用户表&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="增删改查-crud" tabindex="-1"><a class="header-anchor" href="#增删改查-crud" aria-hidden="true">#</a> 增删改查（CRUD）</h2><p>增删改查，又称为 <strong><code>CRUD</code></strong>，是数据库基本操作中的基本操作。</p><h3 id="插入数据" tabindex="-1"><a class="header-anchor" href="#插入数据" aria-hidden="true">#</a> 插入数据</h3><blockquote><ul><li><code>INSERT INTO</code> 语句用于向表中插入新记录。</li></ul></blockquote><h4 id="插入完整的行" tabindex="-1"><a class="header-anchor" href="#插入完整的行" aria-hidden="true">#</a> 插入完整的行</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">user</span>
<span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;xxxx@163.com&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="插入行的一部分" tabindex="-1"><a class="header-anchor" href="#插入行的一部分" aria-hidden="true">#</a> 插入行的一部分</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">user</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> email<span class="token punctuation">)</span>
<span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;admin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;admin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;xxxx@163.com&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="插入查询出来的数据" tabindex="-1"><a class="header-anchor" href="#插入查询出来的数据" aria-hidden="true">#</a> 插入查询出来的数据</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">user</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span>
<span class="token keyword">SELECT</span> name
<span class="token keyword">FROM</span> account<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="更新数据" tabindex="-1"><a class="header-anchor" href="#更新数据" aria-hidden="true">#</a> 更新数据</h3><blockquote><ul><li><code>UPDATE</code> 语句用于更新表中的记录。</li></ul></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">UPDATE</span> <span class="token keyword">user</span>
<span class="token keyword">SET</span> username<span class="token operator">=</span><span class="token string">&#39;robot&#39;</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">&#39;robot&#39;</span>
<span class="token keyword">WHERE</span> username <span class="token operator">=</span> <span class="token string">&#39;root&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="删除数据" tabindex="-1"><a class="header-anchor" href="#删除数据" aria-hidden="true">#</a> 删除数据</h3><blockquote><ul><li><code>DELETE</code> 语句用于删除表中的记录。</li><li><code>TRUNCATE TABLE</code> 可以清空表，也就是删除所有行。</li></ul></blockquote><h4 id="删除表中的指定数据" tabindex="-1"><a class="header-anchor" href="#删除表中的指定数据" aria-hidden="true">#</a> 删除表中的指定数据</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span> <span class="token keyword">WHERE</span> username <span class="token operator">=</span> <span class="token string">&#39;robot&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="清空表中的数据" tabindex="-1"><a class="header-anchor" href="#清空表中的数据" aria-hidden="true">#</a> 清空表中的数据</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">TRUNCATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">user</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="查询数据" tabindex="-1"><a class="header-anchor" href="#查询数据" aria-hidden="true">#</a> 查询数据</h3><blockquote><ul><li><code>SELECT</code> 语句用于从数据库中查询数据。</li><li><code>DISTINCT</code> 用于返回唯一不同的值。它作用于所有列，也就是说所有列的值都相同才算相同。</li><li><code>LIMIT</code> 限制返回的行数。可以有两个参数，第一个参数为起始行，从 0 开始；第二个参数为返回的总行数。 <ul><li><code>ASC</code> ：升序（默认）</li><li><code>DESC</code> ：降序</li></ul></li></ul></blockquote><h4 id="查询单列" tabindex="-1"><a class="header-anchor" href="#查询单列" aria-hidden="true">#</a> 查询单列</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> prod_name <span class="token keyword">FROM</span> products<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="查询多列" tabindex="-1"><a class="header-anchor" href="#查询多列" aria-hidden="true">#</a> 查询多列</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_name<span class="token punctuation">,</span> prod_price <span class="token keyword">FROM</span> products<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="查询所有列" tabindex="-1"><a class="header-anchor" href="#查询所有列" aria-hidden="true">#</a> 查询所有列</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> products<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="查询不同的值" tabindex="-1"><a class="header-anchor" href="#查询不同的值" aria-hidden="true">#</a> 查询不同的值</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> vend_id <span class="token keyword">FROM</span> products<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="限制查询数量" tabindex="-1"><a class="header-anchor" href="#限制查询数量" aria-hidden="true">#</a> 限制查询数量</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 返回前 5 行</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> products <span class="token keyword">LIMIT</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> products <span class="token keyword">LIMIT</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token comment">-- 返回第 3 ~ 5 行</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> products <span class="token keyword">LIMIT</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="过滤数据-where" tabindex="-1"><a class="header-anchor" href="#过滤数据-where" aria-hidden="true">#</a> 过滤数据（WHERE）</h2><p>子查询是嵌套在较大查询中的 SQL 查询。子查询也称为<strong>内部查询</strong>或<strong>内部选择</strong>，而包含子查询的语句也称为<strong>外部查询</strong>或<strong>外部选择</strong>。</p><ul><li><p>子查询可以嵌套在 <code>SELECT</code>，<code>INSERT</code>，<code>UPDATE</code> 或 <code>DELETE</code> 语句内或另一个子查询中。</p></li><li><p>子查询通常会在另一个 <code>SELECT</code> 语句的 <code>WHERE</code> 子句中添加。</p></li><li><p>您可以使用比较运算符，如 <code>&gt;</code>，<code>&lt;</code>，或 <code>=</code>。比较运算符也可以是多行运算符，如 <code>IN</code>，<code>ANY</code> 或 <code>ALL</code>。</p></li><li><p>子查询必须被圆括号 <code>()</code> 括起来。</p></li><li><p>内部查询首先在其父查询之前执行，以便可以将内部查询的结果传递给外部查询。执行过程可以参考下图：</p><p align="center"><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/database/mysql/sql-subqueries.gif" alt="sql-subqueries"></p></li></ul><p><strong>子查询的子查询</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> cust_name<span class="token punctuation">,</span> cust_contact
<span class="token keyword">FROM</span> customers
<span class="token keyword">WHERE</span> cust_id <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> cust_id
                  <span class="token keyword">FROM</span> orders
                  <span class="token keyword">WHERE</span> order_num <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> order_num
                                      <span class="token keyword">FROM</span> orderitems
                                      <span class="token keyword">WHERE</span> prod_id <span class="token operator">=</span> <span class="token string">&#39;RGAN01&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="where-子句" tabindex="-1"><a class="header-anchor" href="#where-子句" aria-hidden="true">#</a> WHERE 子句</h3><p>在 SQL 语句中，数据根据 <code>WHERE</code> 子句中指定的搜索条件进行过滤。</p><p><code>WHERE</code> 子句的基本格式如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> ……<span class="token punctuation">(</span>列名<span class="token punctuation">)</span> <span class="token keyword">FROM</span> ……<span class="token punctuation">(</span>表名<span class="token punctuation">)</span> <span class="token keyword">WHERE</span> ……<span class="token punctuation">(</span>子句条件<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>WHERE</code> 子句用于过滤记录，即缩小访问数据的范围。<code>WHERE</code> 后跟一个返回 <code>true</code> 或 <code>false</code> 的条件。</p><p><code>WHERE</code> 可以与 <code>SELECT</code>，<code>UPDATE</code> 和 <code>DELETE</code> 一起使用。</p><p><strong><code>SELECT</code> 语句中的 <code>WHERE</code> 子句</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Customers
<span class="token keyword">WHERE</span> cust_name <span class="token operator">=</span> <span class="token string">&#39;Kids Place&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>UPDATE</code> 语句中的 <code>WHERE</code> 子句</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">UPDATE</span> Customers
<span class="token keyword">SET</span> cust_name <span class="token operator">=</span> <span class="token string">&#39;Jack Jones&#39;</span>
<span class="token keyword">WHERE</span> cust_name <span class="token operator">=</span> <span class="token string">&#39;Kids Place&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>DELETE</code> 语句中的 <code>WHERE</code> 子句</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> Customers
<span class="token keyword">WHERE</span> cust_name <span class="token operator">=</span> <span class="token string">&#39;Kids Place&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以在 <code>WHERE</code> 子句中使用的操作符：</p><h3 id="比较操作符" tabindex="-1"><a class="header-anchor" href="#比较操作符" aria-hidden="true">#</a> 比较操作符</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>=</code></td><td>等于</td></tr><tr><td><code>&lt;&gt;</code></td><td>不等于。注释：在 SQL 的一些版本中，该操作符可被写成 !=</td></tr><tr><td><code>&gt;</code></td><td>大于</td></tr><tr><td><code>&lt;</code></td><td>小于</td></tr><tr><td><code>&gt;=</code></td><td>大于等于</td></tr><tr><td><code>&lt;=</code></td><td>小于等于</td></tr></tbody></table><h3 id="范围操作符" tabindex="-1"><a class="header-anchor" href="#范围操作符" aria-hidden="true">#</a> 范围操作符</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>BETWEEN</code></td><td>在某个范围内</td></tr><tr><td><code>IN</code></td><td>指定针对某个列的多个可能值</td></tr></tbody></table><ul><li><p><code>IN</code> 操作符在 <code>WHERE</code> 子句中使用，作用是在指定的几个特定值中任选一个值。</p></li><li><p><code>BETWEEN</code> 操作符在 <code>WHERE</code> 子句中使用，作用是选取介于某个范围内的值。</p></li></ul><p><strong>IN 示例</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> products
<span class="token keyword">WHERE</span> vend_id <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">&#39;DLL01&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;BRS01&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>BETWEEN 示例</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> products
<span class="token keyword">WHERE</span> prod_price <span class="token operator">BETWEEN</span> <span class="token number">3</span> <span class="token operator">AND</span> <span class="token number">5</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="逻辑操作符" tabindex="-1"><a class="header-anchor" href="#逻辑操作符" aria-hidden="true">#</a> 逻辑操作符</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>AND</code></td><td>并且（与）</td></tr><tr><td><code>OR</code></td><td>或者（或）</td></tr><tr><td><code>NOT</code></td><td>否定（非）</td></tr></tbody></table><p><code>AND</code>、<code>OR</code>、<code>NOT</code> 是用于对过滤条件的逻辑处理指令。</p><ul><li><p><code>AND</code> 优先级高于 <code>OR</code>，为了明确处理顺序，可以使用 <code>()</code>。<code>AND</code> 操作符表示左右条件都要满足。</p></li><li><p><code>OR</code> 操作符表示左右条件满足任意一个即可。</p></li><li><p><code>NOT</code> 操作符用于否定一个条件。</p></li></ul><p><strong>AND 示例</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_name<span class="token punctuation">,</span> prod_price
<span class="token keyword">FROM</span> products
<span class="token keyword">WHERE</span> vend_id <span class="token operator">=</span> <span class="token string">&#39;DLL01&#39;</span> <span class="token operator">AND</span> prod_price <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>OR 示例</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_name<span class="token punctuation">,</span> prod_price
<span class="token keyword">FROM</span> products
<span class="token keyword">WHERE</span> vend_id <span class="token operator">=</span> <span class="token string">&#39;DLL01&#39;</span> <span class="token operator">OR</span> vend_id <span class="token operator">=</span> <span class="token string">&#39;BRS01&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>NOT 示例</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> products
<span class="token keyword">WHERE</span> prod_price <span class="token operator">NOT</span> <span class="token operator">BETWEEN</span> <span class="token number">3</span> <span class="token operator">AND</span> <span class="token number">5</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="通配符" tabindex="-1"><a class="header-anchor" href="#通配符" aria-hidden="true">#</a> 通配符</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>LIKE</code></td><td>搜索某种模式</td></tr><tr><td><code>%</code></td><td>表示任意字符出现任意次数</td></tr><tr><td><code>_</code></td><td>表示任意字符出现一次</td></tr><tr><td><code>[]</code></td><td>必须匹配指定位置的一个字符</td></tr></tbody></table><p><code>LIKE</code> 操作符在 <code>WHERE</code> 子句中使用，作用是确定字符串是否匹配模式。只有字段是文本值时才使用 <code>LIKE</code>。</p><p><code>LIKE</code> 支持以下通配符匹配选项：</p><ul><li><code>%</code> 表示任何字符出现任意次数。</li><li><code>_</code> 表示任何字符出现一次。</li><li><code>[]</code> 必须匹配指定位置的一个字符。</li></ul><blockquote><p>注意：<strong>不要滥用通配符，通配符位于开头处匹配会非常慢</strong>。</p></blockquote><p><code>%</code> 示例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_name<span class="token punctuation">,</span> prod_price
<span class="token keyword">FROM</span> products
<span class="token keyword">WHERE</span> prod_name <span class="token operator">LIKE</span> <span class="token string">&#39;%bean bag%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>_</code> 示例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_name<span class="token punctuation">,</span> prod_price
<span class="token keyword">FROM</span> products
<span class="token keyword">WHERE</span> prod_name <span class="token operator">LIKE</span> <span class="token string">&#39;__ inch teddy bear&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="排序和分组" tabindex="-1"><a class="header-anchor" href="#排序和分组" aria-hidden="true">#</a> 排序和分组</h2><h3 id="order-by" tabindex="-1"><a class="header-anchor" href="#order-by" aria-hidden="true">#</a> ORDER BY</h3><blockquote><p><code>ORDER BY</code> 用于对结果集进行排序。</p></blockquote><p><code>ORDER BY</code> 有两种排序模式：</p><ul><li><code>ASC</code> ：升序（默认）</li><li><code>DESC</code> ：降序</li></ul><p>可以按多个列进行排序，并且为每个列指定不同的排序方式。</p><p>指定多个列的排序示例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> products
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> prod_price <span class="token keyword">DESC</span><span class="token punctuation">,</span> prod_name <span class="token keyword">ASC</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="group-by" tabindex="-1"><a class="header-anchor" href="#group-by" aria-hidden="true">#</a> GROUP BY</h3><blockquote><p><code>GROUP BY</code> 子句将记录分组到汇总行中，<code>GROUP BY</code> 为每个组返回一个记录。</p></blockquote><p><code>GROUP BY</code> 可以按一列或多列进行分组。</p><p><code>GROUP BY</code> 通常还涉及聚合函数：COUNT，MAX，SUM，AVG 等。</p><p><code>GROUP BY</code> 按分组字段进行排序后，<code>ORDER BY</code> 可以以汇总字段来进行排序。</p><p>分组示例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> cust_name<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>cust_address<span class="token punctuation">)</span> <span class="token keyword">AS</span> addr_num
<span class="token keyword">FROM</span> Customers <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> cust_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>分组后排序示例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> cust_name<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>cust_address<span class="token punctuation">)</span> <span class="token keyword">AS</span> addr_num
<span class="token keyword">FROM</span> Customers <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> cust_name
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> cust_name <span class="token keyword">DESC</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="having" tabindex="-1"><a class="header-anchor" href="#having" aria-hidden="true">#</a> HAVING</h3><blockquote><p><code>HAVING</code> 用于对汇总的 <code>GROUP BY</code> 结果进行过滤。<code>HAVING</code> 要求存在一个 <code>GROUP BY</code> 子句。</p></blockquote><p><code>WHERE</code> 和 <code>HAVING</code> 可以在相同的查询中。</p><p><code>HAVING</code> vs <code>WHERE</code>：</p><ul><li><code>WHERE</code> 和 <code>HAVING</code> 都是用于过滤。</li><li><code>HAVING</code> 适用于汇总的组记录；而 <code>WHERE</code> 适用于单个记录。</li></ul><p>使用 <code>WHERE</code> 和 <code>HAVING</code> 过滤数据示例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> cust_name<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> num
<span class="token keyword">FROM</span> Customers
<span class="token keyword">WHERE</span> cust_email <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> cust_name
<span class="token keyword">HAVING</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="连接和组合" tabindex="-1"><a class="header-anchor" href="#连接和组合" aria-hidden="true">#</a> 连接和组合</h2><h3 id="连接-join" tabindex="-1"><a class="header-anchor" href="#连接-join" aria-hidden="true">#</a> 连接（JOIN）</h3><p><strong>在 SELECT, UPDATE 和 DELETE 语句中，“连接”可以用于联合多表查询。连接使用 <code>JOIN</code> 关键字，并且条件语句使用 <code>ON</code> 而不是 <code>WHERE</code></strong>。</p><p><strong>连接可以替换子查询，并且一般比子查询的效率更快</strong>。</p><p><code>JOIN</code> 有以下类型：</p><ul><li>内连接 - 内连接又称等值连接，用于获取两个表中字段匹配关系的记录，<strong>使用 <code>INNER JOIN</code> 关键字</strong>。在没有条件语句的情况下<strong>返回笛卡尔积</strong>。 <ul><li>笛卡尔积 - <strong>“笛卡尔积”也称为交叉连接（<code>CROSS JOIN</code>），它的作用就是可以把任意表进行连接，即使这两张表不相关</strong>。</li><li>自连接（=） - <strong>“自连接（=）”可以看成内连接的一种，只是连接的表是自身而已</strong>。</li><li>自然连接（NATURAL JOIN） - <strong>“自然连接”会自动连接所有同名列</strong>。自然连接使用 <code>NATURAL JOIN</code> 关键字。</li></ul></li><li>外连接 <ul><li>左连接（LEFT JOIN） - <strong>“左外连接”会获取左表所有记录，即使右表没有对应匹配的记录</strong>。左外连接使用 <code>LEFT JOIN</code> 关键字。</li><li>右连接（RIGHT JOIN） - <strong>“右外连接”会获取右表所有记录，即使左表没有对应匹配的记录</strong>。右外连接使用 <code>RIGHT JOIN</code> 关键字。</li></ul></li></ul><div align="center"><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/database/mysql/sql-join.png" alt="sql-join"></div>`,196),r=t(`<p>内连接又称等值连接，用于获取两个表中字段匹配关系的记录，<strong>使用 <code>INNER JOIN</code> 关键字</strong>。在没有条件语句的情况下<strong>返回笛卡尔积</strong>。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> vend_name<span class="token punctuation">,</span> prod_name<span class="token punctuation">,</span> prod_price
<span class="token keyword">FROM</span> vendors <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> products
<span class="token keyword">ON</span> vendors<span class="token punctuation">.</span>vend_id <span class="token operator">=</span> products<span class="token punctuation">.</span>vend_id<span class="token punctuation">;</span>

<span class="token comment">-- 也可以省略 INNER 使用 JOIN，与上面一句效果一样</span>
<span class="token keyword">SELECT</span> vend_name<span class="token punctuation">,</span> prod_name<span class="token punctuation">,</span> prod_price
<span class="token keyword">FROM</span> vendors <span class="token keyword">JOIN</span> products
<span class="token keyword">ON</span> vendors<span class="token punctuation">.</span>vend_id <span class="token operator">=</span> products<span class="token punctuation">.</span>vend_id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="笛卡尔积" tabindex="-1"><a class="header-anchor" href="#笛卡尔积" aria-hidden="true">#</a> 笛卡尔积</h5><p><strong>“笛卡尔积”也称为交叉连接（<code>CROSS JOIN</code>），它的作用就是可以把任意表进行连接，即使这两张表不相关</strong>。但通常进行连接还是需要筛选的，因此需要在连接后面加上 <code>WHERE</code> 子句，也就是作为过滤条件对连接数据进行筛选。</p><p>笛卡尔积是一个数学运算。假设我有两个集合 X 和 Y，那么 X 和 Y 的笛卡尔积就是 X 和 Y 的所有可能组合，也就是第一个对象来自于 X，第二个对象来自于 Y 的所有可能。</p><p>【示例】求 t1 和 t2 两张表的笛卡尔积</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 以下两条 SQL，执行结果相同</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t1<span class="token punctuation">,</span> t2<span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t1 <span class="token keyword">CROSS</span> <span class="token keyword">JOIN</span> t2<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="自连接" tabindex="-1"><a class="header-anchor" href="#自连接" aria-hidden="true">#</a> 自连接（=）</h5><p><strong>“自连接”可以看成内连接的一种，只是连接的表是自身而已</strong>。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> c1<span class="token punctuation">.</span>cust_id<span class="token punctuation">,</span> c1<span class="token punctuation">.</span>cust_name<span class="token punctuation">,</span> c1<span class="token punctuation">.</span>cust_contact
<span class="token keyword">FROM</span> customers c1<span class="token punctuation">,</span> customers c2
<span class="token keyword">WHERE</span> c1<span class="token punctuation">.</span>cust_name <span class="token operator">=</span> c2<span class="token punctuation">.</span>cust_name
<span class="token operator">AND</span> c2<span class="token punctuation">.</span>cust_contact <span class="token operator">=</span> <span class="token string">&#39;Jim Jones&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="自然连接-natural-join" tabindex="-1"><a class="header-anchor" href="#自然连接-natural-join" aria-hidden="true">#</a> 自然连接（NATURAL JOIN）</h5><p><strong>“自然连接”会自动连接所有同名列</strong>。自然连接使用 <code>NATURAL JOIN</code> 关键字。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> Products
<span class="token keyword">NATURAL</span> <span class="token keyword">JOIN</span> Customers<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="外连接-outer-join" tabindex="-1"><a class="header-anchor" href="#外连接-outer-join" aria-hidden="true">#</a> 外连接（OUTER JOIN）</h4><p>外连接返回一个表中的所有行，并且仅返回来自此表中满足连接条件的那些行，即两个表中的列是相等的。外连接分为左外连接、右外连接、全外连接（Mysql 不支持）。</p><h5 id="左连接-left-join" tabindex="-1"><a class="header-anchor" href="#左连接-left-join" aria-hidden="true">#</a> 左连接（LEFT JOIN）</h5><p><strong>“左外连接”会获取左表所有记录，即使右表没有对应匹配的记录</strong>。左外连接使用 <code>LEFT JOIN</code> 关键字。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> customers<span class="token punctuation">.</span>cust_id<span class="token punctuation">,</span> orders<span class="token punctuation">.</span>order_num
<span class="token keyword">FROM</span> customers <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> orders
<span class="token keyword">ON</span> customers<span class="token punctuation">.</span>cust_id <span class="token operator">=</span> orders<span class="token punctuation">.</span>cust_id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="右连接-right-join" tabindex="-1"><a class="header-anchor" href="#右连接-right-join" aria-hidden="true">#</a> 右连接（RIGHT JOIN）</h5><p><strong>“右外连接”会获取右表所有记录，即使左表没有对应匹配的记录</strong>。右外连接使用 <code>RIGHT JOIN</code> 关键字。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> customers<span class="token punctuation">.</span>cust_id<span class="token punctuation">,</span> orders<span class="token punctuation">.</span>order_num
<span class="token keyword">FROM</span> customers <span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> orders
<span class="token keyword">ON</span> customers<span class="token punctuation">.</span>cust_id <span class="token operator">=</span> orders<span class="token punctuation">.</span>cust_id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="组合-union" tabindex="-1"><a class="header-anchor" href="#组合-union" aria-hidden="true">#</a> 组合（UNION）</h3><blockquote><p><code>UNION</code> 运算符<strong>将两个或更多查询的结果组合起来，并生成一个结果集</strong>，其中包含来自 <code>UNION</code> 中参与查询的提取行。</p></blockquote><p><code>UNION</code> 基本规则：</p><ul><li>所有查询的列数和列顺序必须相同。</li><li>每个查询中涉及表的列的数据类型必须相同或兼容。</li><li>通常返回的列名取自第一个查询。</li></ul><p>默认会去除相同行，如果需要保留相同行，使用 <code>UNION ALL</code>。</p><p>只能包含一个 <code>ORDER BY</code> 子句，并且必须位于语句的最后。</p><p>应用场景：</p><ul><li>在一个查询中从不同的表返回结构数据。</li><li>对一个表执行多个查询，按一个查询返回数据。</li></ul><p>组合查询示例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> cust_name<span class="token punctuation">,</span> cust_contact<span class="token punctuation">,</span> cust_email
<span class="token keyword">FROM</span> customers
<span class="token keyword">WHERE</span> cust_state <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">&#39;IL&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;IN&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;MI&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">UNION</span>
<span class="token keyword">SELECT</span> cust_name<span class="token punctuation">,</span> cust_contact<span class="token punctuation">,</span> cust_email
<span class="token keyword">FROM</span> customers
<span class="token keyword">WHERE</span> cust_name <span class="token operator">=</span> <span class="token string">&#39;Fun4All&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="join-vs-union" tabindex="-1"><a class="header-anchor" href="#join-vs-union" aria-hidden="true">#</a> JOIN vs UNION</h3><ul><li><code>JOIN</code> 中连接表的列可能不同，但在 <code>UNION</code> 中，所有查询的列数和列顺序必须相同。</li><li><code>UNION</code> 将查询之后的行放在一起（垂直放置），但 <code>JOIN</code> 将查询之后的列放在一起（水平放置），即它构成一个笛卡尔积。</li></ul><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h2><blockquote><p>🔔 注意：不同数据库的函数往往各不相同，因此不可移植。本节主要以 Mysql 的函数为例。</p></blockquote><h3 id="字符串函数" tabindex="-1"><a class="header-anchor" href="#字符串函数" aria-hidden="true">#</a> 字符串函数</h3><table><thead><tr><th style="text-align:center;">函数</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>CONCAT()</code></td><td style="text-align:center;">合并字符串</td></tr><tr><td style="text-align:center;"><code>LEFT()</code>、<code>RIGHT()</code></td><td style="text-align:center;">左边或者右边的字符</td></tr><tr><td style="text-align:center;"><code>LOWER()</code>、<code>UPPER()</code></td><td style="text-align:center;">转换为小写或者大写</td></tr><tr><td style="text-align:center;"><code>LTRIM()</code>、<code>RTIM()</code></td><td style="text-align:center;">去除左边或者右边的空格</td></tr><tr><td style="text-align:center;"><code>LENGTH()</code></td><td style="text-align:center;">长度</td></tr><tr><td style="text-align:center;"><code>SOUNDEX()</code></td><td style="text-align:center;">转换为语音值</td></tr></tbody></table><p>其中， <strong>SOUNDEX()</strong> 可以将一个字符串转换为描述其语音表示的字母数字模式。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> mytable
<span class="token keyword">WHERE</span> SOUNDEX<span class="token punctuation">(</span>col1<span class="token punctuation">)</span> <span class="token operator">=</span> SOUNDEX<span class="token punctuation">(</span><span class="token string">&#39;apple&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="时间函数" tabindex="-1"><a class="header-anchor" href="#时间函数" aria-hidden="true">#</a> 时间函数</h3><ul><li>日期格式：<code>YYYY-MM-DD</code></li><li>时间格式：<code>HH:MM:SS</code></li></ul><table><thead><tr><th style="text-align:center;">函 数</th><th style="text-align:center;">说 明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ADDDATE()</code></td><td style="text-align:center;">增加一个日期（天、周等）</td></tr><tr><td style="text-align:center;"><code>ADDTIME()</code></td><td style="text-align:center;">增加一个时间（时、分等）</td></tr><tr><td style="text-align:center;"><code>CURRENT_DATE()</code></td><td style="text-align:center;">返回当前日期</td></tr><tr><td style="text-align:center;"><code>CURRENT_TIME()</code></td><td style="text-align:center;">返回当前时间</td></tr><tr><td style="text-align:center;"><code>DATE()</code></td><td style="text-align:center;">返回日期时间的日期部分</td></tr><tr><td style="text-align:center;"><code>DATEDIFF()</code></td><td style="text-align:center;">计算两个日期之差</td></tr><tr><td style="text-align:center;"><code>DATE_ADD()</code></td><td style="text-align:center;">高度灵活的日期运算函数</td></tr><tr><td style="text-align:center;"><code>DATE_FORMAT()</code></td><td style="text-align:center;">返回一个格式化的日期或时间串</td></tr><tr><td style="text-align:center;"><code>DAY()</code></td><td style="text-align:center;">返回一个日期的天数部分</td></tr><tr><td style="text-align:center;"><code>DAYOFWEEK()</code></td><td style="text-align:center;">对于一个日期，返回对应的星期几</td></tr><tr><td style="text-align:center;"><code>HOUR()</code></td><td style="text-align:center;">返回一个时间的小时部分</td></tr><tr><td style="text-align:center;"><code>MINUTE()</code></td><td style="text-align:center;">返回一个时间的分钟部分</td></tr><tr><td style="text-align:center;"><code>MONTH()</code></td><td style="text-align:center;">返回一个日期的月份部分</td></tr><tr><td style="text-align:center;"><code>NOW()</code></td><td style="text-align:center;">返回当前日期和时间</td></tr><tr><td style="text-align:center;"><code>SECOND()</code></td><td style="text-align:center;">返回一个时间的秒部分</td></tr><tr><td style="text-align:center;"><code>TIME()</code></td><td style="text-align:center;">返回一个日期时间的时间部分</td></tr><tr><td style="text-align:center;"><code>YEAR()</code></td><td style="text-align:center;">返回一个日期的年份部分</td></tr></tbody></table><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">2018</span><span class="token operator">-</span><span class="token number">4</span><span class="token operator">-</span><span class="token number">14</span> <span class="token number">20</span>:<span class="token number">25</span>:<span class="token number">11</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数学函数" tabindex="-1"><a class="header-anchor" href="#数学函数" aria-hidden="true">#</a> 数学函数</h3><p>常见 Mysql 数学函数：</p><table><thead><tr><th style="text-align:center;">函数</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ABS()</code></td><td style="text-align:center;">取绝对值</td></tr><tr><td style="text-align:center;"><code>MOD()</code></td><td style="text-align:center;">取余</td></tr><tr><td style="text-align:center;"><code>ROUND()</code></td><td style="text-align:center;">四舍五入</td></tr><tr><td style="text-align:center;"><code>...</code></td><td style="text-align:center;"></td></tr></tbody></table><h3 id="聚合函数" tabindex="-1"><a class="header-anchor" href="#聚合函数" aria-hidden="true">#</a> 聚合函数</h3><table><thead><tr><th style="text-align:center;">函 数</th><th style="text-align:center;">说 明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>AVG()</code></td><td style="text-align:center;">返回某列的平均值</td></tr><tr><td style="text-align:center;"><code>COUNT()</code></td><td style="text-align:center;">返回某列的行数</td></tr><tr><td style="text-align:center;"><code>MAX()</code></td><td style="text-align:center;">返回某列的最大值</td></tr><tr><td style="text-align:center;"><code>MIN()</code></td><td style="text-align:center;">返回某列的最小值</td></tr><tr><td style="text-align:center;"><code>SUM()</code></td><td style="text-align:center;">返回某列值之和</td></tr></tbody></table><p><code>AVG()</code> 会忽略 NULL 行。</p><p>使用 DISTINCT 可以让汇总函数值汇总不同的值。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> col1<span class="token punctuation">)</span> <span class="token keyword">AS</span> avg_col
<span class="token keyword">FROM</span> mytable
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="转换函数" tabindex="-1"><a class="header-anchor" href="#转换函数" aria-hidden="true">#</a> 转换函数</h3><table><thead><tr><th style="text-align:center;">函 数</th><th style="text-align:center;">说 明</th><th>示例</th></tr></thead><tbody><tr><td style="text-align:center;"><code>CAST()</code></td><td style="text-align:center;">转换数据类型</td><td><code>SELECT CAST(&quot;2017-08-29&quot; AS DATE); -&gt; 2017-08-29</code></td></tr></tbody></table><h2 id="事务" tabindex="-1"><a class="header-anchor" href="#事务" aria-hidden="true">#</a> 事务</h2><p>不能回退 <code>SELECT</code> 语句，回退 <code>SELECT</code> 语句也没意义；也不能回退 <code>CREATE</code> 和 <code>DROP</code> 语句。</p><p><strong>MySQL 默认采用隐式提交策略（<code>autocommit</code>）</strong>，每执行一条语句就把这条语句当成一个事务然后进行提交。当出现 <code>START TRANSACTION</code> 语句时，会关闭隐式提交；当 <code>COMMIT</code> 或 <code>ROLLBACK</code> 语句执行后，事务会自动关闭，重新恢复隐式提交。</p><p>通过 <code>set autocommit=0</code> 可以取消自动提交，直到 <code>set autocommit=1</code> 才会提交；<code>autocommit</code> 标记是针对每个连接而不是针对服务器的。</p><p>事务处理指令：</p><ul><li><code>START TRANSACTION</code> - 指令用于标记事务的起始点。</li><li><code>SAVEPOINT</code> - 指令用于创建保留点。</li><li><code>ROLLBACK TO</code> - 指令用于回滚到指定的保留点；如果没有设置保留点，则回退到 <code>START TRANSACTION</code> 语句处。</li><li><code>COMMIT</code> - 提交事务。</li><li><code>RELEASE SAVEPOINT</code>：删除某个保存点。</li><li><code>SET TRANSACTION</code>：设置事务的隔离级别。</li></ul><p>事务处理示例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 开始事务</span>
<span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span>

<span class="token comment">-- 插入操作 A</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">\`</span>user<span class="token punctuation">\`</span></span>
<span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;root1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;root1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;xxxx@163.com&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 创建保留点 updateA</span>
<span class="token keyword">SAVEPOINT</span> updateA<span class="token punctuation">;</span>

<span class="token comment">-- 插入操作 B</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">\`</span>user<span class="token punctuation">\`</span></span>
<span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;root2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;root2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;xxxx@163.com&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 回滚到保留点 updateA</span>
<span class="token keyword">ROLLBACK</span> <span class="token keyword">TO</span> updateA<span class="token punctuation">;</span>

<span class="token comment">-- 提交事务，只有操作 A 生效</span>
<span class="token keyword">COMMIT</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="acid" tabindex="-1"><a class="header-anchor" href="#acid" aria-hidden="true">#</a> ACID</h3><h3 id="事务隔离级别" tabindex="-1"><a class="header-anchor" href="#事务隔离级别" aria-hidden="true">#</a> 事务隔离级别</h3><hr><p><strong>（以下为 DCL 语句用法）</strong></p><h2 id="权限控制" tabindex="-1"><a class="header-anchor" href="#权限控制" aria-hidden="true">#</a> 权限控制</h2><p><code>GRANT</code> 和 <code>REVOKE</code> 可在几个层次上控制访问权限：</p><ul><li>整个服务器，使用 <code>GRANT ALL</code> 和 <code>REVOKE ALL</code>；</li><li>整个数据库，使用 ON database.*；</li><li>特定的表，使用 ON database.table；</li><li>特定的列；</li><li>特定的存储过程。</li></ul><p>新创建的账户没有任何权限。</p><p>账户用 <code>username@host</code> 的形式定义，<code>username@%</code> 使用的是默认主机名。</p><p>MySQL 的账户信息保存在 mysql 这个数据库中。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">USE</span> mysql<span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> <span class="token keyword">user</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建账户" tabindex="-1"><a class="header-anchor" href="#创建账户" aria-hidden="true">#</a> 创建账户</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> myuser IDENTIFIED <span class="token keyword">BY</span> <span class="token string">&#39;mypassword&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="修改账户名" tabindex="-1"><a class="header-anchor" href="#修改账户名" aria-hidden="true">#</a> 修改账户名</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">UPDATE</span> <span class="token keyword">user</span> <span class="token keyword">SET</span> <span class="token keyword">user</span><span class="token operator">=</span><span class="token string">&#39;newuser&#39;</span> <span class="token keyword">WHERE</span> <span class="token keyword">user</span><span class="token operator">=</span><span class="token string">&#39;myuser&#39;</span><span class="token punctuation">;</span>
FLUSH <span class="token keyword">PRIVILEGES</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="删除账户" tabindex="-1"><a class="header-anchor" href="#删除账户" aria-hidden="true">#</a> 删除账户</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">USER</span> myuser<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="查看权限" tabindex="-1"><a class="header-anchor" href="#查看权限" aria-hidden="true">#</a> 查看权限</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SHOW</span> GRANTS <span class="token keyword">FOR</span> myuser<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="授予权限" tabindex="-1"><a class="header-anchor" href="#授予权限" aria-hidden="true">#</a> 授予权限</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">GRANT</span> <span class="token keyword">SELECT</span><span class="token punctuation">,</span> <span class="token keyword">INSERT</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> myuser<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="删除权限" tabindex="-1"><a class="header-anchor" href="#删除权限" aria-hidden="true">#</a> 删除权限</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">REVOKE</span> <span class="token keyword">SELECT</span><span class="token punctuation">,</span> <span class="token keyword">INSERT</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">FROM</span> myuser<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="更改密码" tabindex="-1"><a class="header-anchor" href="#更改密码" aria-hidden="true">#</a> 更改密码</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SET</span> PASSWORD <span class="token keyword">FOR</span> myuser <span class="token operator">=</span> <span class="token string">&#39;mypass&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="存储过程" tabindex="-1"><a class="header-anchor" href="#存储过程" aria-hidden="true">#</a> 存储过程</h2><p>存储过程的英文是 Stored Procedure。它可以视为一组 SQL 语句的批处理。一旦存储过程被创建出来，使用它就像使用函数一样简单，我们直接通过调用存储过程名即可。</p><p>定义存储过程的语法格式：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> 存储过程名称 <span class="token punctuation">(</span><span class="token punctuation">[</span>参数列表<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span>
    需要执行的语句
<span class="token keyword">END</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>存储过程定义语句类型：</p><ul><li><code>CREATE PROCEDURE</code> 用于创建存储过程</li><li><code>DROP PROCEDURE</code> 用于删除存储过程</li><li><code>ALTER PROCEDURE</code> 用于修改存储过程</li></ul><h3 id="使用存储过程" tabindex="-1"><a class="header-anchor" href="#使用存储过程" aria-hidden="true">#</a> 使用存储过程</h3><p>创建存储过程的要点：</p><ul><li><code>DELIMITER</code> 用于定义语句的结束符</li><li>存储过程的 3 种参数类型： <ul><li><code>IN</code>：存储过程的入参</li><li><code>OUT</code>：存储过程的出参</li><li><code>INPUT</code>：既是存储过程的入参，也是存储过程的出参</li></ul></li><li>流控制语句： <ul><li><code>BEGIN…END</code>：<code>BEGIN…END</code> 中间包含了多个语句，每个语句都以（<code>;</code>）号为结束符。</li><li><code>DECLARE</code>：<code>DECLARE</code> 用来声明变量，使用的位置在于 <code>BEGIN…END</code> 语句中间，而且需要在其他语句使用之前进行变量的声明。</li><li><code>SET</code>：赋值语句，用于对变量进行赋值。</li><li><code>SELECT…INTO</code>：把从数据表中查询的结果存放到变量中，也就是为变量赋值。每次只能给一个变量赋值，不支持集合的操作。</li><li><code>IF…THEN…ENDIF</code>：条件判断语句，可以在 <code>IF…THEN…ENDIF</code> 中使用 <code>ELSE</code> 和 <code>ELSEIF</code> 来进行条件判断。</li><li><code>CASE</code>：<code>CASE</code> 语句用于多条件的分支判断。</li></ul></li></ul><p>创建存储过程示例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">PROCEDURE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">\`</span>proc_adder<span class="token punctuation">\`</span></span><span class="token punctuation">;</span>
<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">DEFINER</span><span class="token operator">=</span><span class="token identifier"><span class="token punctuation">\`</span>root<span class="token punctuation">\`</span></span><span class="token variable">@\`localhost\`</span> <span class="token keyword">PROCEDURE</span> <span class="token identifier"><span class="token punctuation">\`</span>proc_adder<span class="token punctuation">\`</span></span><span class="token punctuation">(</span><span class="token operator">IN</span> a <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token operator">IN</span> b <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">OUT</span> sum <span class="token keyword">int</span><span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span>
    <span class="token keyword">DECLARE</span> c <span class="token keyword">int</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> a <span class="token operator">is</span> <span class="token boolean">null</span> <span class="token keyword">then</span> <span class="token keyword">set</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> b <span class="token operator">is</span> <span class="token boolean">null</span> <span class="token keyword">then</span> <span class="token keyword">set</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>

    <span class="token keyword">set</span> sum  <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token keyword">END</span>
<span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用存储过程示例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">set</span> <span class="token variable">@b</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">call</span> proc_adder<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token variable">@b</span><span class="token punctuation">,</span><span class="token variable">@s</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token variable">@s</span> <span class="token keyword">as</span> sum<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="存储过程的利弊" tabindex="-1"><a class="header-anchor" href="#存储过程的利弊" aria-hidden="true">#</a> 存储过程的利弊</h3><p>存储过程的优点：</p><ul><li><strong>执行效率高</strong>：一次编译多次使用。</li><li><strong>安全性强</strong>：在设定存储过程的时候可以设置对用户的使用权限，这样就和视图一样具有较强的安全性。</li><li><strong>可复用</strong>：将代码封装，可以提高代码复用。</li><li><strong>性能好</strong><ul><li>由于是预先编译，因此具有很高的性能。</li><li>一个存储过程替代大量 T_SQL 语句 ，可以降低网络通信量，提高通信速率。</li></ul></li></ul><p>存储过程的缺点：</p><ul><li><strong>可移植性差</strong>：存储过程不能跨数据库移植。由于不同数据库的存储过程语法几乎都不一样，十分难以维护（不通用）。</li><li><strong>调试困难</strong>：只有少数 DBMS 支持存储过程的调试。对于复杂的存储过程来说，开发和维护都不容易。</li><li><strong>版本管理困难</strong>：比如数据表索引发生变化了，可能会导致存储过程失效。我们在开发软件的时候往往需要进行版本管理，但是存储过程本身没有版本控制，版本迭代更新的时候很麻烦。</li><li><strong>不适合高并发的场景</strong>：高并发的场景需要减少数据库的压力，有时数据库会采用分库分表的方式，而且对可扩展性要求很高，在这种情况下，存储过程会变得难以维护，增加数据库的压力，显然就不适用了。</li></ul><blockquote><p><em>综上，存储过程的优缺点都非常突出，是否使用一定要慎重，需要根据具体应用场景来权衡</em>。</p></blockquote><h3 id="触发器" tabindex="-1"><a class="header-anchor" href="#触发器" aria-hidden="true">#</a> 触发器</h3><blockquote><p>触发器可以视为一种特殊的存储过程。</p><p>触发器是一种与表操作有关的数据库对象，当触发器所在表上出现指定事件时，将调用该对象，即表的操作事件触发表上的触发器的执行。</p></blockquote><h4 id="触发器特性" tabindex="-1"><a class="header-anchor" href="#触发器特性" aria-hidden="true">#</a> 触发器特性</h4><p>可以使用触发器来进行审计跟踪，把修改记录到另外一张表中。</p><p>MySQL 不允许在触发器中使用 <code>CALL</code> 语句 ，也就是不能调用存储过程。</p><p><strong><code>BEGIN</code> 和 <code>END</code></strong></p><p>当触发器的触发条件满足时，将会执行 <code>BEGIN</code> 和 <code>END</code> 之间的触发器执行动作。</p><blockquote><p>🔔 注意：在 MySQL 中，分号 <code>;</code> 是语句结束的标识符，遇到分号表示该段语句已经结束，MySQL 可以开始执行了。因此，解释器遇到触发器执行动作中的分号后就开始执行，然后会报错，因为没有找到和 BEGIN 匹配的 END。</p><p>这时就会用到 <code>DELIMITER</code> 命令（<code>DELIMITER</code> 是定界符，分隔符的意思）。它是一条命令，不需要语句结束标识，语法为：<code>DELIMITER new_delemiter</code>。<code>new_delemiter</code> 可以设为 1 个或多个长度的符号，默认的是分号 <code>;</code>，我们可以把它修改为其他符号，如 <code>$</code> - <code>DELIMITER $</code> 。在这之后的语句，以分号结束，解释器不会有什么反应，只有遇到了 <code>$</code>，才认为是语句结束。注意，使用完之后，我们还应该记得把它给修改回来。</p></blockquote><p><strong><code>NEW</code> 和 <code>OLD</code></strong></p><ul><li>MySQL 中定义了 <code>NEW</code> 和 <code>OLD</code> 关键字，用来表示触发器的所在表中，触发了触发器的那一行数据。</li><li>在 <code>INSERT</code> 型触发器中，<code>NEW</code> 用来表示将要（<code>BEFORE</code>）或已经（<code>AFTER</code>）插入的新数据；</li><li>在 <code>UPDATE</code> 型触发器中，<code>OLD</code> 用来表示将要或已经被修改的原数据，<code>NEW</code> 用来表示将要或已经修改为的新数据；</li><li>在 <code>DELETE</code> 型触发器中，<code>OLD</code> 用来表示将要或已经被删除的原数据；</li><li>使用方法： <code>NEW.columnName</code> （columnName 为相应数据表某一列名）</li></ul><h4 id="触发器指令" tabindex="-1"><a class="header-anchor" href="#触发器指令" aria-hidden="true">#</a> 触发器指令</h4><blockquote><p>提示：为了理解触发器的要点，有必要先了解一下创建触发器的指令。</p></blockquote><p><code>CREATE TRIGGER</code> 指令用于创建触发器。</p><p>语法：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> trigger_name
trigger_time
trigger_event
<span class="token keyword">ON</span> table_name
<span class="token keyword">FOR EACH ROW</span>
<span class="token keyword">BEGIN</span>
  trigger_statements
<span class="token keyword">END</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：</p><ul><li>trigger_name：触发器名</li><li>trigger_time: 触发器的触发时机。取值为 <code>BEFORE</code> 或 <code>AFTER</code>。</li><li>trigger_event: 触发器的监听事件。取值为 <code>INSERT</code>、<code>UPDATE</code> 或 <code>DELETE</code>。</li><li>table_name: 触发器的监听目标。指定在哪张表上建立触发器。</li><li>FOR EACH ROW: 行级监视，Mysql 固定写法，其他 DBMS 不同。</li><li>trigger_statements: 触发器执行动作。是一条或多条 SQL 语句的列表，列表内的每条语句都必须用分号 <code>;</code> 来结尾。</li></ul><p>创建触发器示例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DELIMITER</span> $
<span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> <span class="token identifier"><span class="token punctuation">\`</span>trigger_insert_user<span class="token punctuation">\`</span></span>
<span class="token keyword">AFTER</span> <span class="token keyword">INSERT</span> <span class="token keyword">ON</span> <span class="token identifier"><span class="token punctuation">\`</span>user<span class="token punctuation">\`</span></span>
<span class="token keyword">FOR EACH ROW</span>
<span class="token keyword">BEGIN</span>
    <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">\`</span>user_history<span class="token punctuation">\`</span></span><span class="token punctuation">(</span>user_id<span class="token punctuation">,</span> operate_type<span class="token punctuation">,</span> operate_time<span class="token punctuation">)</span>
    <span class="token keyword">VALUES</span> <span class="token punctuation">(</span>NEW<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token string">&#39;add a user&#39;</span><span class="token punctuation">,</span>  <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">END</span> $
<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看触发器示例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SHOW</span> TRIGGERS<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>删除触发器示例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">TRIGGER</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> trigger_insert_user<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="游标" tabindex="-1"><a class="header-anchor" href="#游标" aria-hidden="true">#</a> 游标</h2><blockquote><p>游标（CURSOR）是一个存储在 DBMS 服务器上的数据库查询，它不是一条 <code>SELECT</code> 语句，而是被该语句检索出来的结果集。在存储过程中使用游标可以对一个结果集进行移动遍历。</p></blockquote><p>游标主要用于交互式应用，其中用户需要对数据集中的任意行进行浏览和修改。</p><p>使用游标的步骤：</p><ol><li><strong>定义游标</strong>：通过 <code>DECLARE cursor_name CURSOR FOR &lt;语句&gt;</code> 定义游标。这个过程没有实际检索出数据。</li><li><strong>打开游标</strong>：通过 <code>OPEN cursor_name</code> 打开游标。</li><li><strong>取出数据</strong>：通过 <code>FETCH cursor_name INTO var_name ...</code> 获取数据。</li><li><strong>关闭游标</strong>：通过 <code>CLOSE cursor_name</code> 关闭游标。</li><li><strong>释放游标</strong>：通过 <code>DEALLOCATE PREPARE</code> 释放游标。</li></ol><p>游标使用示例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DELIMITER</span> $
<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> getTotal<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span>
    <span class="token keyword">DECLARE</span> total <span class="token keyword">INT</span><span class="token punctuation">;</span>
    <span class="token comment">-- 创建接收游标数据的变量</span>
    <span class="token keyword">DECLARE</span> sid <span class="token keyword">INT</span><span class="token punctuation">;</span>
    <span class="token keyword">DECLARE</span> sname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">-- 创建总数变量</span>
    <span class="token keyword">DECLARE</span> sage <span class="token keyword">INT</span><span class="token punctuation">;</span>
    <span class="token comment">-- 创建结束标志变量</span>
    <span class="token keyword">DECLARE</span> done <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token comment">-- 创建游标</span>
    <span class="token keyword">DECLARE</span> cur <span class="token keyword">CURSOR</span> <span class="token keyword">FOR</span> <span class="token keyword">SELECT</span> id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age <span class="token keyword">from</span> cursor_table <span class="token keyword">where</span> age<span class="token operator">&gt;</span><span class="token number">30</span><span class="token punctuation">;</span>
    <span class="token comment">-- 指定游标循环结束时的返回值</span>
    <span class="token keyword">DECLARE</span> <span class="token keyword">CONTINUE</span> <span class="token keyword">HANDLER</span> <span class="token keyword">FOR</span> <span class="token operator">NOT</span> FOUND <span class="token keyword">SET</span> done <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">SET</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">OPEN</span> cur<span class="token punctuation">;</span>
    <span class="token keyword">FETCH</span> cur <span class="token keyword">INTO</span> sid<span class="token punctuation">,</span> sname<span class="token punctuation">,</span> sage<span class="token punctuation">;</span>
    <span class="token keyword">WHILE</span><span class="token punctuation">(</span><span class="token operator">NOT</span> done<span class="token punctuation">)</span>
    <span class="token keyword">DO</span>
        <span class="token keyword">SET</span> total <span class="token operator">=</span> total <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">FETCH</span> cur <span class="token keyword">INTO</span> sid<span class="token punctuation">,</span> sname<span class="token punctuation">,</span> sage<span class="token punctuation">;</span>
    <span class="token keyword">END</span> <span class="token keyword">WHILE</span><span class="token punctuation">;</span>

    <span class="token keyword">CLOSE</span> cur<span class="token punctuation">;</span>
    <span class="token keyword">SELECT</span> total<span class="token punctuation">;</span>
<span class="token keyword">END</span> $
<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span>

<span class="token comment">-- 调用存储过程</span>
<span class="token keyword">call</span> getTotal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,136),u={href:"https://book.douban.com/subject/35167240/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://draveness.me/mysql-transaction",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.cnblogs.com/CraryPrimitiveMan/p/4206942.html",target:"_blank",rel:"noopener noreferrer"},h={href:"https://zh.wikipedia.org/wiki/SQL",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.sitesbay.com/sql/index",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.w3resource.com/sql/subqueries/understanding-sql-subqueries.php",target:"_blank",rel:"noopener noreferrer"},g={href:"https://stackoverflow.com/questions/6294778/mysql-quick-breakdown-of-the-types-of-joins",target:"_blank",rel:"noopener noreferrer"},E={href:"https://www.w3resource.com/sql/sql-union.php",target:"_blank",rel:"noopener noreferrer"},y={href:"https://www.w3resource.com/sql/database-security/create-users.php",target:"_blank",rel:"noopener noreferrer"},w={href:"https://www.cnblogs.com/chenpi/p/5136483.html",target:"_blank",rel:"noopener noreferrer"};function T(R,N){const a=d("ExternalLinkIcon");return l(),c("div",null,[i,n(" #### 内连接（INNER JOIN） "),r,s("ul",null,[s("li",null,[s("a",u,[n("《SQL 必知必会》"),e(a)])]),s("li",null,[s("a",k,[n("“浅入深出”MySQL 中事务的实现"),e(a)])]),s("li",null,[s("a",v,[n("MySQL 的学习--触发器"),e(a)])]),s("li",null,[s("a",h,[n("维基百科词条 - SQL"),e(a)])]),s("li",null,[s("a",m,[n("https://www.sitesbay.com/sql/index"),e(a)])]),s("li",null,[s("a",b,[n("SQL Subqueries"),e(a)])]),s("li",null,[s("a",g,[n("Quick breakdown of the types of joins"),e(a)])]),s("li",null,[s("a",E,[n("SQL UNION"),e(a)])]),s("li",null,[s("a",y,[n("SQL database security"),e(a)])]),s("li",null,[s("a",w,[n("Mysql 中的存储过程"),e(a)])])])])}const x=o(p,[["render",T],["__file","02.SQL语法.html.vue"]]);export{x as default};
