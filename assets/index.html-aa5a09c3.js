const e=JSON.parse('{"key":"v-037c34a9","path":"/pages/f6b642/","title":"Java并发简介","lang":"zh-CN","frontmatter":{"title":"Java并发简介","date":"2019-05-06T15:33:13.000Z","category":["Java","JavaSE","并发"],"tag":["Java","JavaSE","并发"],"permalink":"/pages/f6b642/","description":"Java 并发简介 关键词：进程、线程、安全性、活跃性、性能、死锁、饥饿、上下文切换 摘要：并发编程并非 Java 语言所独有，而是一种成熟的编程范式，Java 只是用自己的方式实现了并发工作模型。学习 Java 并发编程，应该先熟悉并发的基本概念，然后进一步了解并发的特性以及其特性所面临的问题。掌握了这些，当学习 Java 并发工具时，才会明白它们各自是为了解决什么问题，为什么要这样设计。通过这样由点到面的学习方式，更容易融会贯通，将并发知识形成体系化。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/pages/f6b642/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"Java并发简介"}],["meta",{"property":"og:description","content":"Java 并发简介 关键词：进程、线程、安全性、活跃性、性能、死锁、饥饿、上下文切换 摘要：并发编程并非 Java 语言所独有，而是一种成熟的编程范式，Java 只是用自己的方式实现了并发工作模型。学习 Java 并发编程，应该先熟悉并发的基本概念，然后进一步了解并发的特性以及其特性所面临的问题。掌握了这些，当学习 Java 并发工具时，才会明白它们各自是为了解决什么问题，为什么要这样设计。通过这样由点到面的学习方式，更容易融会贯通，将并发知识形成体系化。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-10T10:35:58.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"JavaSE"}],["meta",{"property":"article:tag","content":"并发"}],["meta",{"property":"article:published_time","content":"2019-05-06T15:33:13.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-10T10:35:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java并发简介\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-05-06T15:33:13.000Z\\",\\"dateModified\\":\\"2023-09-10T10:35:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io\\"}]}"]]},"headers":[{"level":2,"title":"并发概念","slug":"并发概念","link":"#并发概念","children":[{"level":3,"title":"并发和并行","slug":"并发和并行","link":"#并发和并行","children":[]},{"level":3,"title":"同步和异步","slug":"同步和异步","link":"#同步和异步","children":[]},{"level":3,"title":"阻塞和非阻塞","slug":"阻塞和非阻塞","link":"#阻塞和非阻塞","children":[]},{"level":3,"title":"进程和线程","slug":"进程和线程","link":"#进程和线程","children":[]},{"level":3,"title":"竞态条件和临界区","slug":"竞态条件和临界区","link":"#竞态条件和临界区","children":[]},{"level":3,"title":"管程","slug":"管程","link":"#管程","children":[]}]},{"level":2,"title":"并发的特点","slug":"并发的特点","link":"#并发的特点","children":[{"level":3,"title":"提升资源利用率","slug":"提升资源利用率","link":"#提升资源利用率","children":[]},{"level":3,"title":"程序响应更快","slug":"程序响应更快","link":"#程序响应更快","children":[]},{"level":3,"title":"并发的问题","slug":"并发的问题","link":"#并发的问题","children":[]}]},{"level":2,"title":"安全性问题","slug":"安全性问题","link":"#安全性问题","children":[{"level":3,"title":"缓存导致的可见性问题","slug":"缓存导致的可见性问题","link":"#缓存导致的可见性问题","children":[]},{"level":3,"title":"线程切换带来的原子性问题","slug":"线程切换带来的原子性问题","link":"#线程切换带来的原子性问题","children":[]},{"level":3,"title":"编译优化带来的有序性问题","slug":"编译优化带来的有序性问题","link":"#编译优化带来的有序性问题","children":[]},{"level":3,"title":"保证并发安全的思路","slug":"保证并发安全的思路","link":"#保证并发安全的思路","children":[]}]},{"level":2,"title":"活跃性问题","slug":"活跃性问题","link":"#活跃性问题","children":[{"level":3,"title":"死锁（Deadlock）","slug":"死锁-deadlock","link":"#死锁-deadlock","children":[]},{"level":3,"title":"活锁（Livelock）","slug":"活锁-livelock","link":"#活锁-livelock","children":[]},{"level":3,"title":"饥饿（Starvation）","slug":"饥饿-starvation","link":"#饥饿-starvation","children":[]}]},{"level":2,"title":"性能问题","slug":"性能问题","link":"#性能问题","children":[{"level":3,"title":"上下文切换","slug":"上下文切换","link":"#上下文切换","children":[]},{"level":3,"title":"资源限制","slug":"资源限制","link":"#资源限制","children":[]}]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1694342158000,"updatedTime":1694342158000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":1}]},"readingTime":{"minutes":27.11,"words":8132},"filePathRelative":"01.Java/01.JavaSE/05.并发/01.Java并发简介.md","localizedDate":"2019年5月6日","excerpt":"<h1> Java 并发简介</h1>\\n<blockquote>\\n<p><strong>关键词</strong>：<code>进程</code>、<code>线程</code>、<code>安全性</code>、<code>活跃性</code>、<code>性能</code>、<code>死锁</code>、<code>饥饿</code>、<code>上下文切换</code></p>\\n<p><strong>摘要</strong>：并发编程并非 Java 语言所独有，而是一种成熟的编程范式，Java 只是用自己的方式实现了并发工作模型。学习 Java 并发编程，应该先熟悉并发的基本概念，然后进一步了解并发的特性以及其特性所面临的问题。掌握了这些，当学习 Java 并发工具时，才会明白它们各自是为了解决什么问题，为什么要这样设计。通过这样由点到面的学习方式，更容易融会贯通，将并发知识形成体系化。</p>\\n</blockquote>","autoDesc":true}');export{e as data};
